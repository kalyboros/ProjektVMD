
ProjektnaNaloga.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800b310  0800b310  0001b310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f8  0800b5f8  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5f8  0800b5f8  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5f8  0800b5f8  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5fc  0800b5fc  0001b5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800b600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001284  2000034c  0800b94c  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  0800b94c  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c52  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000335e  00000000  00000000  00037fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  0003b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  0003c280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020625  00000000  00000000  0003d048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ffa  00000000  00000000  0005d66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b11b2  00000000  00000000  0006e667  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f819  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  0011f894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2f8 	.word	0x0800b2f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	0800b2f8 	.word	0x0800b2f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	b299      	uxth	r1, r3
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	230a      	movs	r3, #10
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	1d7b      	adds	r3, r7, #5
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	4804      	ldr	r0, [pc, #16]	; (8000be8 <i2c1_pisiRegister+0x40>)
 8000bd8:	f000 ff46 	bl	8001a68 <HAL_I2C_Mem_Write>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000598 	.word	0x20000598

08000bec <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af04      	add	r7, sp, #16
 8000bf2:	603a      	str	r2, [r7, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000c02:	797b      	ldrb	r3, [r7, #5]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d906      	bls.n	8000c16 <i2c1_beriRegistre+0x2a>
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b19      	cmp	r3, #25
 8000c0c:	d103      	bne.n	8000c16 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c14:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	b299      	uxth	r1, r3
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	b298      	uxth	r0, r3
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	797a      	ldrb	r2, [r7, #5]
 8000c2a:	9202      	str	r2, [sp, #8]
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	4602      	mov	r2, r0
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <i2c1_beriRegistre+0x58>)
 8000c38:	f001 f82a 	bl	8001c90 <HAL_I2C_Mem_Read>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000598 	.word	0x20000598

08000c48 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f000 fbb5 	bl	80013bc <HAL_Delay>
  #define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
 8000c52:	226e      	movs	r2, #110	; 0x6e
 8000c54:	214f      	movs	r1, #79	; 0x4f
 8000c56:	201e      	movs	r0, #30
 8000c58:	f7ff ffa6 	bl	8000ba8 <i2c1_pisiRegister>
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 fbad 	bl	80013bc <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x47);  // zbudi pospeskometer in omogoci osi, odzivnost na 50hz
 8000c62:	2247      	movs	r2, #71	; 0x47
 8000c64:	2120      	movs	r1, #32
 8000c66:	2019      	movs	r0, #25
 8000c68:	f7ff ff9e 	bl	8000ba8 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x98);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost, obÄutljivost na +/-4G
 8000c6c:	2298      	movs	r2, #152	; 0x98
 8000c6e:	2123      	movs	r1, #35	; 0x23
 8000c70:	2019      	movs	r0, #25
 8000c72:	f7ff ff99 	bl	8000ba8 <i2c1_pisiRegister>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c80:	b09e      	sub	sp, #120	; 0x78
 8000c82:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c84:	f000 fb34 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c88:	f000 f87a 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f000 f954 	bl	8000f38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c90:	f000 f8d6 	bl	8000e40 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c94:	f000 f912 	bl	8000ebc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000c98:	f007 fdf8 	bl	800888c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <main+0xf8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <main+0xf8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

  int16_t meritev[4];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 8000cac:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8000cb0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initLSM303DLHC();
 8000cb4:	f7ff ffc8 	bl	8000c48 <initLSM303DLHC>
  while (1)
  {
	  HAL_Delay(10);
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f000 fb7f 	bl	80013bc <HAL_Delay>

	  i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[1], 6);
 8000cbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cc2:	1c9a      	adds	r2, r3, #2
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	2128      	movs	r1, #40	; 0x28
 8000cc8:	2019      	movs	r0, #25
 8000cca:	f7ff ff8f 	bl	8000bec <i2c1_beriRegistre>

	  float x = (float)meritev[1]*8/65535;
 8000cce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8000cd2:	ee07 3a90 	vmov	s15, r3
 8000cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cda:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000cde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ce2:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000d78 <main+0xfc>
 8000ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cea:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	  float y = (float)meritev[2]*8/65535;
 8000cee:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000cfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d02:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000d78 <main+0xfc>
 8000d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	  float z = (float)meritev[3]*8/65535;
 8000d0e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000d1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d22:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000d78 <main+0xfc>
 8000d26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d2a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	  char buffer[80];
	  int buffSize = sprintf(buffer, "%0.3f %0.3f %0.3f\n", (float)x, (float)y, (float)z);
 8000d2e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d30:	f7ff fc0a 	bl	8000548 <__aeabi_f2d>
 8000d34:	4680      	mov	r8, r0
 8000d36:	4689      	mov	r9, r1
 8000d38:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d3a:	f7ff fc05 	bl	8000548 <__aeabi_f2d>
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d44:	f7ff fc00 	bl	8000548 <__aeabi_f2d>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d52:	e9cd 4500 	strd	r4, r5, [sp]
 8000d56:	4642      	mov	r2, r8
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <main+0x100>)
 8000d5c:	f008 feec 	bl	8009b38 <siprintf>
 8000d60:	65b8      	str	r0, [r7, #88]	; 0x58

	  CDC_Transmit_FS(buffer, buffSize);
 8000d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	463b      	mov	r3, r7
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f007 fe4c 	bl	8008a08 <CDC_Transmit_FS>
  {
 8000d70:	e7a2      	b.n	8000cb8 <main+0x3c>
 8000d72:	bf00      	nop
 8000d74:	20000598 	.word	0x20000598
 8000d78:	477fff00 	.word	0x477fff00
 8000d7c:	0800b310 	.word	0x0800b310

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09e      	sub	sp, #120	; 0x78
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d8a:	2228      	movs	r2, #40	; 0x28
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f008 fa6e 	bl	8009270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	223c      	movs	r2, #60	; 0x3c
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f008 fa60 	bl	8009270 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000db0:	2303      	movs	r3, #3
 8000db2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000db4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000db8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dd4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fe12 	bl	8003a04 <HAL_RCC_OscConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000de6:	f000 f927 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dea:	230f      	movs	r3, #15
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	2302      	movs	r3, #2
 8000df0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e04:	2102      	movs	r1, #2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fd04 	bl	8004814 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e12:	f000 f911 	bl	8001038 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <SystemClock_Config+0xbc>)
 8000e18:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fedb 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e30:	f000 f902 	bl	8001038 <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3778      	adds	r7, #120	; 0x78
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	00020020 	.word	0x00020020

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_I2C1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e4c:	f240 220b 	movw	r2, #523	; 0x20b
 8000e50:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e7e:	f000 fd63 	bl	8001948 <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e88:	f000 f8d6 	bl	8001038 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e90:	f001 fa34 	bl	80022fc <HAL_I2CEx_ConfigAnalogFilter>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e9a:	f000 f8cd 	bl	8001038 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000ea2:	f001 fa76 	bl	8002392 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 f8c4 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000598 	.word	0x20000598
 8000eb8:	40005400 	.word	0x40005400

08000ebc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_SPI1_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f16:	2208      	movs	r2, #8
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f1c:	f004 f810 	bl	8004f40 <HAL_SPI_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 f887 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200005e4 	.word	0x200005e4
 8000f34:	40013000 	.word	0x40013000

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a30      	ldr	r2, [pc, #192]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a24      	ldr	r2, [pc, #144]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_GPIO_Init+0xf4>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_GPIO_Init+0xf4>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <MX_GPIO_Init+0xf4>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_GPIO_Init+0xf4>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_GPIO_Init+0xf8>)
 8000fce:	f000 fca3 	bl	8001918 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000fd2:	2337      	movs	r3, #55	; 0x37
 8000fd4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_GPIO_Init+0xfc>)
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <MX_GPIO_Init+0xf8>)
 8000fe6:	f000 fb1d 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fea:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000fee:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	480b      	ldr	r0, [pc, #44]	; (8001030 <MX_GPIO_Init+0xf8>)
 8001004:	f000 fb0e 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f000 fb01 	bl	8001624 <HAL_GPIO_Init>

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	48001000 	.word	0x48001000
 8001034:	10120000 	.word	0x10120000

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_MspInit+0x44>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_MspInit+0x44>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_MspInit+0x44>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x44>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800107e:	2007      	movs	r0, #7
 8001080:	f000 fa8e 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_I2C_MspInit+0x7c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d127      	bne.n	8001102 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_I2C_MspInit+0x80>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <HAL_I2C_MspInit+0x80>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_I2C_MspInit+0x80>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80010ca:	23c0      	movs	r3, #192	; 0xc0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010da:	2304      	movs	r3, #4
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <HAL_I2C_MspInit+0x84>)
 80010e6:	f000 fa9d 	bl	8001624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_I2C_MspInit+0x80>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_I2C_MspInit+0x80>)
 80010f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_I2C_MspInit+0x80>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40005400 	.word	0x40005400
 8001110:	40021000 	.word	0x40021000
 8001114:	48000400 	.word	0x48000400

08001118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_SPI_MspInit+0x7c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d128      	bne.n	800118c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x80>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <HAL_SPI_MspInit+0x80>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_SPI_MspInit+0x80>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_SPI_MspInit+0x80>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_SPI_MspInit+0x80>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_SPI_MspInit+0x80>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800116a:	23e0      	movs	r3, #224	; 0xe0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117a:	2305      	movs	r3, #5
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f000 fa4c 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40013000 	.word	0x40013000
 8001198:	40021000 	.word	0x40021000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f8c4 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80011fe:	f001 fa18 	bl	8002632 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200012e0 	.word	0x200012e0

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f007 ffee 	bl	800921c <__errno>
 8001240:	4602      	mov	r2, r0
 8001242:	230c      	movs	r3, #12
 8001244:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000a000 	.word	0x2000a000
 800126c:	00000400 	.word	0x00000400
 8001270:	20000368 	.word	0x20000368
 8001274:	200015d0 	.word	0x200015d0

08001278 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <LoopForever+0xe>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b8:	4c0b      	ldr	r4, [pc, #44]	; (80012e8 <LoopForever+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c6:	f7ff ffd7 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f007 ffad 	bl	8009228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ce:	f7ff fcd5 	bl	8000c7c <main>

080012d2 <LoopForever>:

LoopForever:
    b LoopForever
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80012e0:	0800b600 	.word	0x0800b600
  ldr r2, =_sbss
 80012e4:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80012e8:	200015d0 	.word	0x200015d0

080012ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f94d 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fe9c 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f965 	bl	800160a <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f92d 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20000008 	.word	0x20000008
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000648 	.word	0x20000648

080013a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000648 	.word	0x20000648

080013bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_Delay+0x40>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000008 	.word	0x20000008

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff8e 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff29 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff3e 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff8e 	bl	80014f4 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5d 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff31 	bl	8001464 <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa2 	bl	800155c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	e154      	b.n	80018de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8146 	beq.w	80018d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d00b      	beq.n	800166c <HAL_GPIO_Init+0x48>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d007      	beq.n	800166c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001660:	2b11      	cmp	r3, #17
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b12      	cmp	r3, #18
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0xea>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b12      	cmp	r3, #18
 800170c:	d123      	bne.n	8001756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	6939      	ldr	r1, [r7, #16]
 8001752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0203 	and.w	r2, r3, #3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a0 	beq.w	80018d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_GPIO_Init+0x2d8>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a57      	ldr	r2, [pc, #348]	; (80018fc <HAL_GPIO_Init+0x2d8>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_GPIO_Init+0x2d8>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b0:	4a53      	ldr	r2, [pc, #332]	; (8001900 <HAL_GPIO_Init+0x2dc>)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017da:	d019      	beq.n	8001810 <HAL_GPIO_Init+0x1ec>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a49      	ldr	r2, [pc, #292]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d013      	beq.n	800180c <HAL_GPIO_Init+0x1e8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a48      	ldr	r2, [pc, #288]	; (8001908 <HAL_GPIO_Init+0x2e4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00d      	beq.n	8001808 <HAL_GPIO_Init+0x1e4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a47      	ldr	r2, [pc, #284]	; (800190c <HAL_GPIO_Init+0x2e8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1e0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a46      	ldr	r2, [pc, #280]	; (8001910 <HAL_GPIO_Init+0x2ec>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_GPIO_Init+0x1dc>
 80017fc:	2304      	movs	r3, #4
 80017fe:	e008      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 8001800:	2305      	movs	r3, #5
 8001802:	e006      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 8001804:	2303      	movs	r3, #3
 8001806:	e004      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 8001808:	2302      	movs	r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_GPIO_Init+0x1ee>
 8001810:	2300      	movs	r3, #0
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001822:	4937      	ldr	r1, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x2dc>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001830:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001854:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800187e:	4a25      	ldr	r2, [pc, #148]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018a8:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f47f aea3 	bne.w	8001634 <HAL_GPIO_Init+0x10>
  }
}
 80018ee:	bf00      	nop
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	48000400 	.word	0x48000400
 8001908:	48000800 	.word	0x48000800
 800190c:	48000c00 	.word	0x48000c00
 8001910:	48001000 	.word	0x48001000
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001934:	e002      	b.n	800193c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e081      	b.n	8001a5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fb8e 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e006      	b.n	80019d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d104      	bne.n	80019e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	ea42 0103 	orr.w	r1, r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	021a      	lsls	r2, r3, #8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69d9      	ldr	r1, [r3, #28]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1a      	ldr	r2, [r3, #32]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	f040 80f9 	bne.w	8001c82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_I2C_Mem_Write+0x34>
 8001a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0ed      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2C_Mem_Write+0x4e>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e0e6      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001abe:	f7ff fc71 	bl	80013a4 <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2319      	movs	r3, #25
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fac3 	bl	800205c <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0d1      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2221      	movs	r2, #33	; 0x21
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b08:	88f8      	ldrh	r0, [r7, #6]
 8001b0a:	893a      	ldrh	r2, [r7, #8]
 8001b0c:	8979      	ldrh	r1, [r7, #10]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	4603      	mov	r3, r0
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f9d3 	bl	8001ec4 <I2C_RequestMemoryWrite>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0a9      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d90e      	bls.n	8001b58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	22ff      	movs	r2, #255	; 0xff
 8001b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	8979      	ldrh	r1, [r7, #10]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 fba5 	bl	80022a0 <I2C_TransferConfig>
 8001b56:	e00f      	b.n	8001b78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	8979      	ldrh	r1, [r7, #10]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fb94 	bl	80022a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 faad 	bl	80020dc <I2C_WaitOnTXISFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e07b      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d034      	beq.n	8001c30 <HAL_I2C_Mem_Write+0x1c8>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d130      	bne.n	8001c30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fa3f 	bl	800205c <I2C_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e04d      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2bff      	cmp	r3, #255	; 0xff
 8001bf0:	d90e      	bls.n	8001c10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	22ff      	movs	r2, #255	; 0xff
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	8979      	ldrh	r1, [r7, #10]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fb49 	bl	80022a0 <I2C_TransferConfig>
 8001c0e:	e00f      	b.n	8001c30 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	8979      	ldrh	r1, [r7, #10]
 8001c22:	2300      	movs	r3, #0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fb38 	bl	80022a0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d19e      	bne.n	8001b78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa8c 	bl	800215c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e01a      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2220      	movs	r2, #32
 8001c54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_I2C_Mem_Write+0x224>)
 8001c62:	400b      	ands	r3, r1
 8001c64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	fe00e800 	.word	0xfe00e800

08001c90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	817b      	strh	r3, [r7, #10]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	813b      	strh	r3, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	f040 80fd 	bne.w	8001eb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0x34>
 8001cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0f1      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_I2C_Mem_Read+0x4e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e0ea      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ce6:	f7ff fb5d 	bl	80013a4 <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2319      	movs	r3, #25
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f9af 	bl	800205c <I2C_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d5      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2222      	movs	r2, #34	; 0x22
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d30:	88f8      	ldrh	r0, [r7, #6]
 8001d32:	893a      	ldrh	r2, [r7, #8]
 8001d34:	8979      	ldrh	r1, [r7, #10]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f913 	bl	8001f6c <I2C_RequestMemoryRead>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0ad      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2bff      	cmp	r3, #255	; 0xff
 8001d60:	d90e      	bls.n	8001d80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	22ff      	movs	r2, #255	; 0xff
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	8979      	ldrh	r1, [r7, #10]
 8001d70:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <HAL_I2C_Mem_Read+0x22c>)
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fa91 	bl	80022a0 <I2C_TransferConfig>
 8001d7e:	e00f      	b.n	8001da0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	8979      	ldrh	r1, [r7, #10]
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_I2C_Mem_Read+0x22c>)
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fa80 	bl	80022a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	2104      	movs	r1, #4
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f956 	bl	800205c <I2C_WaitOnFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07c      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d034      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x1d0>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d130      	bne.n	8001e60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	2200      	movs	r2, #0
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f927 	bl	800205c <I2C_WaitOnFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e04d      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d90e      	bls.n	8001e40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	22ff      	movs	r2, #255	; 0xff
 8001e26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	8979      	ldrh	r1, [r7, #10]
 8001e30:	2300      	movs	r3, #0
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fa31 	bl	80022a0 <I2C_TransferConfig>
 8001e3e:	e00f      	b.n	8001e60 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	8979      	ldrh	r1, [r7, #10]
 8001e52:	2300      	movs	r3, #0
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fa20 	bl	80022a0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d19a      	bne.n	8001da0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f974 	bl	800215c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e01a      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2220      	movs	r2, #32
 8001e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_I2C_Mem_Read+0x230>)
 8001e92:	400b      	ands	r3, r1
 8001e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	80002400 	.word	0x80002400
 8001ec0:	fe00e800 	.word	0xfe00e800

08001ec4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <I2C_RequestMemoryWrite+0xa4>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f9d7 	bl	80022a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	69b9      	ldr	r1, [r7, #24]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f8f0 	bl	80020dc <I2C_WaitOnTXISFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02c      	b.n	8001f60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f0c:	893b      	ldrh	r3, [r7, #8]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
 8001f16:	e015      	b.n	8001f44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f18:	893b      	ldrh	r3, [r7, #8]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	69b9      	ldr	r1, [r7, #24]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f8d6 	bl	80020dc <I2C_WaitOnTXISFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e012      	b.n	8001f60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f3a:	893b      	ldrh	r3, [r7, #8]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f884 	bl	800205c <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	80002000 	.word	0x80002000

08001f6c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	817b      	strh	r3, [r7, #10]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	813b      	strh	r3, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	8979      	ldrh	r1, [r7, #10]
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <I2C_RequestMemoryRead+0xa4>)
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f984 	bl	80022a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f89d 	bl	80020dc <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e02c      	b.n	8002006 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb2:	893b      	ldrh	r3, [r7, #8]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
 8001fbc:	e015      	b.n	8001fea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fbe:	893b      	ldrh	r3, [r7, #8]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f883 	bl	80020dc <I2C_WaitOnTXISFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e012      	b.n	8002006 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe0:	893b      	ldrh	r3, [r7, #8]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2140      	movs	r1, #64	; 0x40
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f831 	bl	800205c <I2C_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	80002000 	.word	0x80002000

08002014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d103      	bne.n	8002032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	619a      	str	r2, [r3, #24]
  }
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800206c:	e022      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d01e      	beq.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7ff f995 	bl	80013a4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d113      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f043 0220 	orr.w	r2, r3, #32
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e00f      	b.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4013      	ands	r3, r2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d0cd      	beq.n	800206e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020e8:	e02c      	b.n	8002144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f870 	bl	80021d4 <I2C_IsAcknowledgeFailed>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e02a      	b.n	8002154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d01e      	beq.n	8002144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002106:	f7ff f94d 	bl	80013a4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	d302      	bcc.n	800211c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d113      	bne.n	8002144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d1cb      	bne.n	80020ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002168:	e028      	b.n	80021bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f830 	bl	80021d4 <I2C_IsAcknowledgeFailed>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e026      	b.n	80021cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7ff f911 	bl	80013a4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d113      	bne.n	80021bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e007      	b.n	80021cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d1cf      	bne.n	800216a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d151      	bne.n	8002292 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ee:	e022      	b.n	8002236 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d01e      	beq.n	8002236 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f8:	f7ff f8d4 	bl	80013a4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	429a      	cmp	r2, r3
 8002206:	d302      	bcc.n	800220e <I2C_IsAcknowledgeFailed+0x3a>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d113      	bne.n	8002236 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e02e      	b.n	8002294 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b20      	cmp	r3, #32
 8002242:	d1d5      	bne.n	80021f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2210      	movs	r2, #16
 800224a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2220      	movs	r2, #32
 8002252:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fedd 	bl	8002014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <I2C_IsAcknowledgeFailed+0xc8>)
 8002266:	400b      	ands	r3, r1
 8002268:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	fe00e800 	.word	0xfe00e800

080022a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	817b      	strh	r3, [r7, #10]
 80022ae:	4613      	mov	r3, r2
 80022b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	0d5b      	lsrs	r3, r3, #21
 80022bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <I2C_TransferConfig+0x58>)
 80022c2:	430b      	orrs	r3, r1
 80022c4:	43db      	mvns	r3, r3
 80022c6:	ea02 0103 	and.w	r1, r2, r3
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022d0:	7a7b      	ldrb	r3, [r7, #9]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	431a      	orrs	r2, r3
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	03ff63ff 	.word	0x03ff63ff

080022fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	d138      	bne.n	8002384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800231c:	2302      	movs	r3, #2
 800231e:	e032      	b.n	8002386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800234e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d139      	bne.n	800241c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e033      	b.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2224      	movs	r2, #36	; 0x24
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800242a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242c:	b08b      	sub	sp, #44	; 0x2c
 800242e:	af06      	add	r7, sp, #24
 8002430:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d0      	b.n	80025de <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f006 fc0d 	bl	8008c70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2203      	movs	r2, #3
 800245a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f002 fe2e 	bl	80050c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e04c      	b.n	8002508 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	3301      	adds	r3, #1
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b298      	uxth	r0, r3
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	3336      	adds	r3, #54	; 0x36
 80024ac:	4602      	mov	r2, r0
 80024ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	3303      	adds	r3, #3
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	3338      	adds	r3, #56	; 0x38
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	333c      	adds	r3, #60	; 0x3c
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	3340      	adds	r3, #64	; 0x40
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	3301      	adds	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3ad      	bcc.n	800246e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e044      	b.n	80025a2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	f203 1369 	addw	r3, r3, #361	; 0x169
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	3301      	adds	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3b5      	bcc.n	8002518 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	687e      	ldr	r6, [r7, #4]
 80025b4:	466d      	mov	r5, sp
 80025b6:	f106 0410 	add.w	r4, r6, #16
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	602b      	str	r3, [r5, #0]
 80025c2:	1d33      	adds	r3, r6, #4
 80025c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f002 fd97 	bl	80050fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_PCD_Start+0x16>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e016      	b.n	800262a <HAL_PCD_Start+0x44>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fd44 	bl	8005096 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800260e:	2101      	movs	r1, #1
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f006 fdcb 	bl	80091ac <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f004 fd1c 	bl	8007058 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fd15 	bl	800706e <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264e:	d102      	bne.n	8002656 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 faf6 	bl	8002c42 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f004 fd07 	bl	800706e <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d112      	bne.n	8002692 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	b292      	uxth	r2, r2
 8002680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f006 fb94 	bl	8008db2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f8c7 	bl	8002820 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fce9 	bl	800706e <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a6:	d10b      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026ba:	b292      	uxth	r2, r2
 80026bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f004 fcd2 	bl	800706e <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d4:	d10b      	bne.n	80026ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e8:	b292      	uxth	r2, r2
 80026ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fcbb 	bl	800706e <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d126      	bne.n	8002752 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0204 	bic.w	r2, r2, #4
 8002716:	b292      	uxth	r2, r2
 8002718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0208 	bic.w	r2, r2, #8
 800272e:	b292      	uxth	r2, r2
 8002730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f006 fb75 	bl	8008e24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002742:	b29a      	uxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800274c:	b292      	uxth	r2, r2
 800274e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fc89 	bl	800706e <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002766:	d126      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	b292      	uxth	r2, r2
 800277c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002792:	b292      	uxth	r2, r2
 8002794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0204 	orr.w	r2, r2, #4
 80027aa:	b292      	uxth	r2, r2
 80027ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f006 fb1d 	bl	8008df0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 fc57 	bl	800706e <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ca:	d10e      	bne.n	80027ea <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027de:	b292      	uxth	r2, r2
 80027e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f006 fad6 	bl	8008d96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 fc3d 	bl	800706e <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fe:	d10b      	bne.n	8002818 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002812:	b292      	uxth	r2, r2
 8002814:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_PCD_SetAddress+0x1a>
 8002836:	2302      	movs	r3, #2
 8002838:	e013      	b.n	8002862 <HAL_PCD_SetAddress+0x42>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f004 fbec 	bl	8007030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	4608      	mov	r0, r1
 8002874:	4611      	mov	r1, r2
 8002876:	461a      	mov	r2, r3
 8002878:	4603      	mov	r3, r0
 800287a:	70fb      	strb	r3, [r7, #3]
 800287c:	460b      	mov	r3, r1
 800287e:	803b      	strh	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da0e      	bge.n	80028ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	705a      	strb	r2, [r3, #1]
 80028ac:	e00e      	b.n	80028cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 0207 	and.w	r2, r3, #7
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028d8:	883a      	ldrh	r2, [r7, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	78ba      	ldrb	r2, [r7, #2]
 80028e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028f6:	78bb      	ldrb	r3, [r7, #2]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d102      	bne.n	8002902 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_PCD_EP_Open+0xa6>
 800290c:	2302      	movs	r3, #2
 800290e:	e00e      	b.n	800292e <HAL_PCD_EP_Open+0xc4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68f9      	ldr	r1, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fc0c 	bl	800513c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800292c:	7afb      	ldrb	r3, [r7, #11]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da0e      	bge.n	8002968 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	705a      	strb	r2, [r3, #1]
 8002966:	e00e      	b.n	8002986 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 0207 	and.w	r2, r3, #7
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_PCD_EP_Close+0x6a>
 800299c:	2302      	movs	r3, #2
 800299e:	e00e      	b.n	80029be <HAL_PCD_EP_Close+0x88>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 ff32 	bl	8005818 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	460b      	mov	r3, r1
 80029d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	7afb      	ldrb	r3, [r7, #11]
 80029d8:	f003 0207 	and.w	r2, r3, #7
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 f8e5 	bl	8005bf2 <USB_EPStartXfer>
 8002a28:	e005      	b.n	8002a36 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6979      	ldr	r1, [r7, #20]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 f8de 	bl	8005bf2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 0207 	and.w	r2, r3, #7
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	7afb      	ldrb	r3, [r7, #11]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abc:	7afb      	ldrb	r3, [r7, #11]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 f88a 	bl	8005bf2 <USB_EPStartXfer>
 8002ade:	e005      	b.n	8002aec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 f883 	bl	8005bf2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 0207 	and.w	r2, r3, #7
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d901      	bls.n	8002b14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e03e      	b.n	8002b92 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da0e      	bge.n	8002b3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
 8002b38:	e00c      	b.n	8002b54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_EP_SetStall+0x7e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e00e      	b.n	8002b92 <HAL_PCD_EP_SetStall+0x9c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 f955 	bl	8006e32 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e040      	b.n	8002c3a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	da0e      	bge.n	8002bde <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	705a      	strb	r2, [r3, #1]
 8002bdc:	e00e      	b.n	8002bfc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	f003 0207 	and.w	r2, r3, #7
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_PCD_EP_ClrStall+0x82>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e00e      	b.n	8002c3a <HAL_PCD_EP_ClrStall+0xa0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68f9      	ldr	r1, [r7, #12]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 f952 	bl	8006ed4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b08e      	sub	sp, #56	; 0x38
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c4a:	e2df      	b.n	800320c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c54:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002c62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8158 	bne.w	8002f1c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d152      	bne.n	8002d1c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	81fb      	strh	r3, [r7, #14]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3328      	adds	r3, #40	; 0x28
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f006 f840 	bl	8008d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 828e 	beq.w	800320c <PCD_EP_ISR_Handler+0x5ca>
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f040 8289 	bne.w	800320c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d1a:	e277      	b.n	800320c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d034      	beq.n	8002da0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3306      	adds	r3, #6
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f004 f9cf 	bl	8007118 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d86:	4013      	ands	r3, r2
 8002d88:	823b      	strh	r3, [r7, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	8a3a      	ldrh	r2, [r7, #16]
 8002d90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d94:	b292      	uxth	r2, r2
 8002d96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f005 ffb5 	bl	8008d08 <HAL_PCD_SetupStageCallback>
 8002d9e:	e235      	b.n	800320c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002da0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f280 8231 	bge.w	800320c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002db6:	4013      	ands	r3, r2
 8002db8:	83bb      	strh	r3, [r7, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	8bba      	ldrh	r2, [r7, #28]
 8002dc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3306      	adds	r3, #6
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d019      	beq.n	8002e30 <PCD_EP_ISR_Handler+0x1ee>
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	6959      	ldr	r1, [r3, #20]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f004 f97f 	bl	8007118 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	441a      	add	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e28:	2100      	movs	r1, #0
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f005 ff7e 	bl	8008d2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d112      	bne.n	8002e7e <PCD_EP_ISR_Handler+0x23c>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	801a      	strh	r2, [r3, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	801a      	strh	r2, [r3, #0]
 8002e7c:	e02f      	b.n	8002ede <PCD_EP_ISR_Handler+0x29c>
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b3e      	cmp	r3, #62	; 0x3e
 8002e84:	d813      	bhi.n	8002eae <PCD_EP_ISR_Handler+0x26c>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <PCD_EP_ISR_Handler+0x25e>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	029b      	lsls	r3, r3, #10
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e017      	b.n	8002ede <PCD_EP_ISR_Handler+0x29c>
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <PCD_EP_ISR_Handler+0x286>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	827b      	strh	r3, [r7, #18]
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ef6:	827b      	strh	r3, [r7, #18]
 8002ef8:	8a7b      	ldrh	r3, [r7, #18]
 8002efa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002efe:	827b      	strh	r3, [r7, #18]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	8a7b      	ldrh	r3, [r7, #18]
 8002f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8013      	strh	r3, [r2, #0]
 8002f1a:	e177      	b.n	800320c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f280 80ea 	bge.w	800310c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f4e:	4013      	ands	r3, r2
 8002f50:	853b      	strh	r3, [r7, #40]	; 0x28
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f66:	b292      	uxth	r2, r2
 8002f68:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	7b1b      	ldrb	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d122      	bne.n	8002fce <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3306      	adds	r3, #6
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002fb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8087 	beq.w	80030c8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	6959      	ldr	r1, [r3, #20]
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	88da      	ldrh	r2, [r3, #6]
 8002fc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fc8:	f004 f8a6 	bl	8007118 <USB_ReadPMA>
 8002fcc:	e07c      	b.n	80030c8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d108      	bne.n	8002fe8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002fd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f923 	bl	8003228 <HAL_PCD_EP_DB_Receive>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002fe6:	e06f      	b.n	80030c8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	847b      	strh	r3, [r7, #34]	; 0x22
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003024:	b29b      	uxth	r3, r3
 8003026:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d021      	beq.n	8003086 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	3302      	adds	r3, #2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800306c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800306e:	2b00      	cmp	r3, #0
 8003070:	d02a      	beq.n	80030c8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	6959      	ldr	r1, [r3, #20]
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	891a      	ldrh	r2, [r3, #8]
 800307e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003080:	f004 f84a 	bl	8007118 <USB_ReadPMA>
 8003084:	e020      	b.n	80030c8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	3306      	adds	r3, #6
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80030b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	6959      	ldr	r1, [r3, #20]
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	895a      	ldrh	r2, [r3, #10]
 80030c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030c4:	f004 f828 	bl	8007118 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030ce:	441a      	add	r2, r3
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030da:	441a      	add	r2, r3
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <PCD_EP_ISR_Handler+0x4b0>
 80030e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d206      	bcs.n	8003100 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f005 fe17 	bl	8008d2c <HAL_PCD_DataOutStageCallback>
 80030fe:	e005      	b.n	800310c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fd73 	bl	8005bf2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800310c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07a      	beq.n	800320c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003116:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003144:	843b      	strh	r3, [r7, #32]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	8c3b      	ldrh	r3, [r7, #32]
 8003156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800315e:	b29b      	uxth	r3, r3
 8003160:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	78db      	ldrb	r3, [r3, #3]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d108      	bne.n	800317c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800316e:	2b02      	cmp	r3, #2
 8003170:	d146      	bne.n	8003200 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d141      	bne.n	8003200 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003184:	b29b      	uxth	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	3302      	adds	r3, #2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	8bfb      	ldrh	r3, [r7, #30]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d906      	bls.n	80031be <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	8bfb      	ldrh	r3, [r7, #30]
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	619a      	str	r2, [r3, #24]
 80031bc:	e002      	b.n	80031c4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f005 fdc5 	bl	8008d62 <HAL_PCD_DataInStageCallback>
 80031d8:	e018      	b.n	800320c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	8bfb      	ldrh	r3, [r7, #30]
 80031e0:	441a      	add	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	8bfb      	ldrh	r3, [r7, #30]
 80031ec:	441a      	add	r2, r3
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 fcfa 	bl	8005bf2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80031fe:	e005      	b.n	800320c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003200:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003202:	461a      	mov	r2, r3
 8003204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f91b 	bl	8003442 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003214:	b29b      	uxth	r3, r3
 8003216:	b21b      	sxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	f6ff ad17 	blt.w	8002c4c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3738      	adds	r7, #56	; 0x38
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d07e      	beq.n	800333e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003248:	b29b      	uxth	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	3302      	adds	r3, #2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003268:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	8b7b      	ldrh	r3, [r7, #26]
 8003270:	429a      	cmp	r2, r3
 8003272:	d306      	bcc.n	8003282 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	8b7b      	ldrh	r3, [r7, #26]
 800327a:	1ad2      	subs	r2, r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	619a      	str	r2, [r3, #24]
 8003280:	e002      	b.n	8003288 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d123      	bne.n	80032d8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	833b      	strh	r3, [r7, #24]
 80032ac:	8b3b      	ldrh	r3, [r7, #24]
 80032ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032b2:	833b      	strh	r3, [r7, #24]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	8b3b      	ldrh	r3, [r7, #24]
 80032c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01f      	beq.n	8003322 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fc:	82fb      	strh	r3, [r7, #22]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	441a      	add	r2, r3
 800330c:	8afb      	ldrh	r3, [r7, #22]
 800330e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800331e:	b29b      	uxth	r3, r3
 8003320:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003322:	8b7b      	ldrh	r3, [r7, #26]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8087 	beq.w	8003438 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6959      	ldr	r1, [r3, #20]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	891a      	ldrh	r2, [r3, #8]
 8003336:	8b7b      	ldrh	r3, [r7, #26]
 8003338:	f003 feee 	bl	8007118 <USB_ReadPMA>
 800333c:	e07c      	b.n	8003438 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	3306      	adds	r3, #6
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003366:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	8b7b      	ldrh	r3, [r7, #26]
 800336e:	429a      	cmp	r2, r3
 8003370:	d306      	bcc.n	8003380 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	8b7b      	ldrh	r3, [r7, #26]
 8003378:	1ad2      	subs	r2, r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	619a      	str	r2, [r3, #24]
 800337e:	e002      	b.n	8003386 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d123      	bne.n	80033d6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	83fb      	strh	r3, [r7, #30]
 80033aa:	8bfb      	ldrh	r3, [r7, #30]
 80033ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033b0:	83fb      	strh	r3, [r7, #30]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	8bfb      	ldrh	r3, [r7, #30]
 80033c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11f      	bne.n	8003420 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	83bb      	strh	r3, [r7, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	441a      	add	r2, r3
 800340a:	8bbb      	ldrh	r3, [r7, #28]
 800340c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800341c:	b29b      	uxth	r3, r3
 800341e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003420:	8b7b      	ldrh	r3, [r7, #26]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6959      	ldr	r1, [r3, #20]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	895a      	ldrh	r2, [r3, #10]
 8003432:	8b7b      	ldrh	r3, [r7, #26]
 8003434:	f003 fe70 	bl	8007118 <USB_ReadPMA>
    }
  }

  return count;
 8003438:	8b7b      	ldrh	r3, [r7, #26]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b092      	sub	sp, #72	; 0x48
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	4613      	mov	r3, r2
 800344e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8132 	beq.w	80036c0 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	3302      	adds	r3, #2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003484:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800348c:	429a      	cmp	r2, r3
 800348e:	d906      	bls.n	800349e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003496:	1ad2      	subs	r2, r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	619a      	str	r2, [r3, #24]
 800349c:	e002      	b.n	80034a4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d12c      	bne.n	8003506 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	4619      	mov	r1, r3
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f005 fc55 	bl	8008d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 822f 	beq.w	8003922 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	827b      	strh	r3, [r7, #18]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	8a7b      	ldrh	r3, [r7, #18]
 80034f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]
 8003504:	e20d      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01f      	beq.n	8003550 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800353c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	b29b      	uxth	r3, r3
 800354e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003556:	2b01      	cmp	r3, #1
 8003558:	f040 81e3 	bne.w	8003922 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003562:	441a      	add	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800356e:	441a      	add	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d309      	bcc.n	8003594 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	1ad2      	subs	r2, r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	621a      	str	r2, [r3, #32]
 8003592:	e014      	b.n	80035be <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800359c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035a8:	e009      	b.n	80035be <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	785b      	ldrb	r3, [r3, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d155      	bne.n	8003672 <HAL_PCD_EP_DB_Transmit+0x230>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	4413      	add	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	011a      	lsls	r2, r3, #4
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d112      	bne.n	800361a <HAL_PCD_EP_DB_Transmit+0x1d8>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035fe:	b29a      	uxth	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	801a      	strh	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003612:	b29a      	uxth	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	801a      	strh	r2, [r3, #0]
 8003618:	e047      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x268>
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2b3e      	cmp	r3, #62	; 0x3e
 800361e:	d811      	bhi.n	8003644 <HAL_PCD_EP_DB_Transmit+0x202>
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	3301      	adds	r3, #1
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	b29b      	uxth	r3, r3
 800363a:	029b      	lsls	r3, r3, #10
 800363c:	b29a      	uxth	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	e032      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x268>
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_PCD_EP_DB_Transmit+0x218>
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	b29b      	uxth	r3, r3
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	b29b      	uxth	r3, r3
 8003662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366a:	b29a      	uxth	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e01b      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x268>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d117      	bne.n	80036aa <HAL_PCD_EP_DB_Transmit+0x268>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003688:	b29b      	uxth	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	4413      	add	r3, r2
 8003690:	623b      	str	r3, [r7, #32]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	011a      	lsls	r2, r3, #4
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	4413      	add	r3, r2
 800369c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6959      	ldr	r1, [r3, #20]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	891a      	ldrh	r2, [r3, #8]
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f003 fce8 	bl	800708e <USB_WritePMA>
 80036be:	e130      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	3306      	adds	r3, #6
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d306      	bcc.n	8003702 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036fa:	1ad2      	subs	r2, r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	619a      	str	r2, [r3, #24]
 8003700:	e002      	b.n	8003708 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d12c      	bne.n	800376a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f005 fb23 	bl	8008d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 80fd 	bne.w	8003922 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800375c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003764:	b29b      	uxth	r3, r3
 8003766:	8013      	strh	r3, [r2, #0]
 8003768:	e0db      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d11f      	bne.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	f040 80b1 	bne.w	8003922 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037c6:	441a      	add	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037d2:	441a      	add	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6a1a      	ldr	r2, [r3, #32]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d309      	bcc.n	80037f8 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	621a      	str	r2, [r3, #32]
 80037f6:	e014      	b.n	8003822 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8003800:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003802:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800380c:	e009      	b.n	8003822 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2200      	movs	r2, #0
 8003818:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d155      	bne.n	80038dc <HAL_PCD_EP_DB_Transmit+0x49a>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	647b      	str	r3, [r7, #68]	; 0x44
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003844:	4413      	add	r3, r2
 8003846:	647b      	str	r3, [r7, #68]	; 0x44
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003850:	4413      	add	r3, r2
 8003852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d112      	bne.n	8003884 <HAL_PCD_EP_DB_Transmit+0x442>
 800385e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003868:	b29a      	uxth	r2, r3
 800386a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387c:	b29a      	uxth	r2, r3
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	e044      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b3e      	cmp	r3, #62	; 0x3e
 8003888:	d811      	bhi.n	80038ae <HAL_PCD_EP_DB_Transmit+0x46c>
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_PCD_EP_DB_Transmit+0x45e>
 800389a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389c:	3301      	adds	r3, #1
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	e02f      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_PCD_EP_DB_Transmit+0x482>
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	3b01      	subs	r3, #1
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	029b      	lsls	r3, r3, #10
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	e018      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d114      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	4413      	add	r3, r2
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	011a      	lsls	r2, r3, #4
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	4413      	add	r3, r2
 8003900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	b29a      	uxth	r2, r3
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6959      	ldr	r1, [r3, #20]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	895a      	ldrh	r2, [r3, #10]
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	b29b      	uxth	r3, r3
 800391e:	f003 fbb6 	bl	800708e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393c:	823b      	strh	r3, [r7, #16]
 800393e:	8a3b      	ldrh	r3, [r7, #16]
 8003940:	f083 0310 	eor.w	r3, r3, #16
 8003944:	823b      	strh	r3, [r7, #16]
 8003946:	8a3b      	ldrh	r3, [r7, #16]
 8003948:	f083 0320 	eor.w	r3, r3, #32
 800394c:	823b      	strh	r3, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	441a      	add	r2, r3
 800395c:	8a3b      	ldrh	r3, [r7, #16]
 800395e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3748      	adds	r7, #72	; 0x48
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	817b      	strh	r3, [r7, #10]
 800398a:	4613      	mov	r3, r2
 800398c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399a:	897b      	ldrh	r3, [r7, #10]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e009      	b.n	80039c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039b2:	897a      	ldrh	r2, [r7, #10]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039c6:	893b      	ldrh	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2200      	movs	r2, #0
 80039d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	80da      	strh	r2, [r3, #6]
 80039da:	e00b      	b.n	80039f4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2201      	movs	r2, #1
 80039e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f000 bef4 	b.w	8004806 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 816a 	beq.w	8003d02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a2e:	4bb3      	ldr	r3, [pc, #716]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a3a:	4bb0      	ldr	r3, [pc, #704]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d159      	bne.n	8003afa <HAL_RCC_OscConfig+0xf6>
 8003a46:	4bad      	ldr	r3, [pc, #692]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d152      	bne.n	8003afa <HAL_RCC_OscConfig+0xf6>
 8003a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	fab3 f383 	clz	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d102      	bne.n	8003a86 <HAL_RCC_OscConfig+0x82>
 8003a80:	4b9e      	ldr	r3, [pc, #632]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0xae>
 8003a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003aa2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003aae:	4b93      	ldr	r3, [pc, #588]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ab6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003aba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003abe:	fa92 f2a2 	rbit	r2, r2
 8003ac2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003ac6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f042 0220 	orr.w	r2, r2, #32
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f002 021f 	and.w	r2, r2, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 810c 	beq.w	8003d00 <HAL_RCC_OscConfig+0x2fc>
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 8106 	bne.w	8003d00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f000 be86 	b.w	8004806 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d106      	bne.n	8003b14 <HAL_RCC_OscConfig+0x110>
 8003b06:	4b7d      	ldr	r3, [pc, #500]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e030      	b.n	8003b76 <HAL_RCC_OscConfig+0x172>
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x134>
 8003b1e:	4b77      	ldr	r3, [pc, #476]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a76      	ldr	r2, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b74      	ldr	r3, [pc, #464]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01e      	b.n	8003b76 <HAL_RCC_OscConfig+0x172>
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCC_OscConfig+0x15a>
 8003b44:	4b6d      	ldr	r3, [pc, #436]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6c      	ldr	r2, [pc, #432]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a69      	ldr	r2, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e00b      	b.n	8003b76 <HAL_RCC_OscConfig+0x172>
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a66      	ldr	r2, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a63      	ldr	r2, [pc, #396]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b76:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f023 020f 	bic.w	r2, r3, #15
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	495d      	ldr	r1, [pc, #372]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8a:	1d3b      	adds	r3, r7, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d059      	beq.n	8003c48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd fc06 	bl	80013a4 <HAL_GetTick>
 8003b98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b9e:	f7fd fc01 	bl	80013a4 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d902      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	f000 be29 	b.w	8004806 <HAL_RCC_OscConfig+0xe02>
 8003bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003bc8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_OscConfig+0x1e2>
 8003be0:	4b46      	ldr	r3, [pc, #280]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x20e>
 8003be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bfe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c1e:	fa92 f2a2 	rbit	r2, r2
 8003c22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c2a:	fab2 f282 	clz	r2, r2
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f042 0220 	orr.w	r2, r2, #32
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f002 021f 	and.w	r2, r2, #31
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ab      	beq.n	8003b9e <HAL_RCC_OscConfig+0x19a>
 8003c46:	e05c      	b.n	8003d02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fd fbac 	bl	80013a4 <HAL_GetTick>
 8003c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c52:	f7fd fba7 	bl	80013a4 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d902      	bls.n	8003c68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	f000 bdcf 	b.w	8004806 <HAL_RCC_OscConfig+0xe02>
 8003c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003c7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_OscConfig+0x296>
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	e015      	b.n	8003cc6 <HAL_RCC_OscConfig+0x2c2>
 8003c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_RCC_OscConfig+0x2f8>)
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003cce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003cd2:	fa92 f2a2 	rbit	r2, r2
 8003cd6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003cda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003cde:	fab2 f282 	clz	r2, r2
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	f042 0220 	orr.w	r2, r2, #32
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f002 021f 	and.w	r2, r2, #31
 8003cee:	2101      	movs	r1, #1
 8003cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ab      	bne.n	8003c52 <HAL_RCC_OscConfig+0x24e>
 8003cfa:	e002      	b.n	8003d02 <HAL_RCC_OscConfig+0x2fe>
 8003cfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 816f 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d12:	4bd0      	ldr	r3, [pc, #832]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d1e:	4bcd      	ldr	r3, [pc, #820]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d16c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x400>
 8003d2a:	4bca      	ldr	r3, [pc, #808]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d166      	bne.n	8003e04 <HAL_RCC_OscConfig+0x400>
 8003d36:	2302      	movs	r3, #2
 8003d38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <HAL_RCC_OscConfig+0x362>
 8003d60:	4bbc      	ldr	r3, [pc, #752]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	e013      	b.n	8003d8e <HAL_RCC_OscConfig+0x38a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003d8a:	4bb2      	ldr	r3, [pc, #712]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003d94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003d98:	fa92 f2a2 	rbit	r2, r2
 8003d9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003da0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003da4:	fab2 f282 	clz	r2, r2
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	f042 0220 	orr.w	r2, r2, #32
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	f002 021f 	and.w	r2, r2, #31
 8003db4:	2101      	movs	r1, #1
 8003db6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x3cc>
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d002      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f000 bd1b 	b.w	8004806 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	4ba0      	ldr	r3, [pc, #640]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	21f8      	movs	r1, #248	; 0xf8
 8003de0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003de8:	fa91 f1a1 	rbit	r1, r1
 8003dec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003df0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003df4:	fab1 f181 	clz	r1, r1
 8003df8:	b2c9      	uxtb	r1, r1
 8003dfa:	408b      	lsls	r3, r1
 8003dfc:	4995      	ldr	r1, [pc, #596]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	e0f5      	b.n	8003ff0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8085 	beq.w	8003f1a <HAL_RCC_OscConfig+0x516>
 8003e10:	2301      	movs	r3, #1
 8003e12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	461a      	mov	r2, r3
 8003e38:	2301      	movs	r3, #1
 8003e3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fab2 	bl	80013a4 <HAL_GetTick>
 8003e40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e46:	f7fd faad 	bl	80013a4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d902      	bls.n	8003e5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	f000 bcd5 	b.w	8004806 <HAL_RCC_OscConfig+0xe02>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d102      	bne.n	8003e8c <HAL_RCC_OscConfig+0x488>
 8003e86:	4b73      	ldr	r3, [pc, #460]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	e013      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4b0>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ea4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003eb0:	4b68      	ldr	r3, [pc, #416]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003eba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003ebe:	fa92 f2a2 	rbit	r2, r2
 8003ec2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ec6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003eca:	fab2 f282 	clz	r2, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f042 0220 	orr.w	r2, r2, #32
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f002 021f 	and.w	r2, r2, #31
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0af      	beq.n	8003e46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	21f8      	movs	r1, #248	; 0xf8
 8003ef6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003efe:	fa91 f1a1 	rbit	r1, r1
 8003f02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f0a:	fab1 f181 	clz	r1, r1
 8003f0e:	b2c9      	uxtb	r1, r1
 8003f10:	408b      	lsls	r3, r1
 8003f12:	4950      	ldr	r1, [pc, #320]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	e06a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x5ec>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f24:	fa93 f3a3 	rbit	r3, r3
 8003f28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	461a      	mov	r2, r3
 8003f42:	2300      	movs	r3, #0
 8003f44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd fa2d 	bl	80013a4 <HAL_GetTick>
 8003f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fd fa28 	bl	80013a4 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d902      	bls.n	8003f66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	f000 bc50 	b.w	8004806 <HAL_RCC_OscConfig+0xe02>
 8003f66:	2302      	movs	r3, #2
 8003f68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d102      	bne.n	8003f96 <HAL_RCC_OscConfig+0x592>
 8003f90:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	e013      	b.n	8003fbe <HAL_RCC_OscConfig+0x5ba>
 8003f96:	2302      	movs	r3, #2
 8003f98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fba:	4b26      	ldr	r3, [pc, #152]	; (8004054 <HAL_RCC_OscConfig+0x650>)
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003fc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003fc8:	fa92 f2a2 	rbit	r2, r2
 8003fcc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003fd0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003fd4:	fab2 f282 	clz	r2, r2
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	f042 0220 	orr.w	r2, r2, #32
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f002 021f 	and.w	r2, r2, #31
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1af      	bne.n	8003f50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80da 	beq.w	80041b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d069      	beq.n	80040de <HAL_RCC_OscConfig+0x6da>
 800400a:	2301      	movs	r3, #1
 800400c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x654>)
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	461a      	mov	r2, r3
 8004030:	2301      	movs	r3, #1
 8004032:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004034:	f7fd f9b6 	bl	80013a4 <HAL_GetTick>
 8004038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403c:	e00e      	b.n	800405c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800403e:	f7fd f9b1 	bl	80013a4 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d906      	bls.n	800405c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e3d9      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	10908120 	.word	0x10908120
 800405c:	2302      	movs	r3, #2
 800405e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800406e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004072:	2202      	movs	r2, #2
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	fa93 f2a3 	rbit	r2, r3
 8004080:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800408a:	2202      	movs	r2, #2
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	fa93 f2a3 	rbit	r2, r3
 8004098:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800409c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	4ba5      	ldr	r3, [pc, #660]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80040a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040a6:	2102      	movs	r1, #2
 80040a8:	6019      	str	r1, [r3, #0]
 80040aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	fa93 f1a3 	rbit	r1, r3
 80040b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80040b8:	6019      	str	r1, [r3, #0]
  return result;
 80040ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fab3 f383 	clz	r3, r3
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0b0      	beq.n	800403e <HAL_RCC_OscConfig+0x63a>
 80040dc:	e06a      	b.n	80041b4 <HAL_RCC_OscConfig+0x7b0>
 80040de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	fa93 f2a3 	rbit	r2, r3
 80040f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80040f4:	601a      	str	r2, [r3, #0]
  return result;
 80040f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80040fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	4b8c      	ldr	r3, [pc, #560]	; (8004338 <HAL_RCC_OscConfig+0x934>)
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004110:	f7fd f948 	bl	80013a4 <HAL_GetTick>
 8004114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	e009      	b.n	800412e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411a:	f7fd f943 	bl	80013a4 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e36b      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
 800412e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004132:	2202      	movs	r2, #2
 8004134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fa93 f2a3 	rbit	r2, r3
 8004140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800414a:	2202      	movs	r2, #2
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	fa93 f2a3 	rbit	r2, r3
 8004158:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004162:	2202      	movs	r2, #2
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	fa93 f2a3 	rbit	r2, r3
 8004170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004174:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004176:	4b6f      	ldr	r3, [pc, #444]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 8004178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800417a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800417e:	2102      	movs	r1, #2
 8004180:	6019      	str	r1, [r3, #0]
 8004182:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f1a3 	rbit	r1, r3
 800418c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004190:	6019      	str	r1, [r3, #0]
  return result;
 8004192:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1b2      	bne.n	800411a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8158 	beq.w	8004474 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d112      	bne.n	80041fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4b57      	ldr	r3, [pc, #348]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	4a56      	ldr	r2, [pc, #344]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	61d3      	str	r3, [r2, #28]
 80041e2:	4b54      	ldr	r3, [pc, #336]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f107 0308 	add.w	r3, r7, #8
 80041f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b4f      	ldr	r3, [pc, #316]	; (800433c <HAL_RCC_OscConfig+0x938>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11a      	bne.n	800423e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004208:	4b4c      	ldr	r3, [pc, #304]	; (800433c <HAL_RCC_OscConfig+0x938>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a4b      	ldr	r2, [pc, #300]	; (800433c <HAL_RCC_OscConfig+0x938>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004212:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004214:	f7fd f8c6 	bl	80013a4 <HAL_GetTick>
 8004218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	e009      	b.n	8004232 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fd f8c1 	bl	80013a4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e2e9      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b42      	ldr	r3, [pc, #264]	; (800433c <HAL_RCC_OscConfig+0x938>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ef      	beq.n	800421e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x852>
 8004248:	4b3a      	ldr	r3, [pc, #232]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4a39      	ldr	r2, [pc, #228]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6213      	str	r3, [r2, #32]
 8004254:	e02f      	b.n	80042b6 <HAL_RCC_OscConfig+0x8b2>
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10c      	bne.n	800427a <HAL_RCC_OscConfig+0x876>
 8004260:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	4a33      	ldr	r2, [pc, #204]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	6213      	str	r3, [r2, #32]
 800426c:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4a30      	ldr	r2, [pc, #192]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 8004272:	f023 0304 	bic.w	r3, r3, #4
 8004276:	6213      	str	r3, [r2, #32]
 8004278:	e01d      	b.n	80042b6 <HAL_RCC_OscConfig+0x8b2>
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d10c      	bne.n	800429e <HAL_RCC_OscConfig+0x89a>
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6213      	str	r3, [r2, #32]
 800429c:	e00b      	b.n	80042b6 <HAL_RCC_OscConfig+0x8b2>
 800429e:	4b25      	ldr	r3, [pc, #148]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a24      	ldr	r2, [pc, #144]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6213      	str	r3, [r2, #32]
 80042aa:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a21      	ldr	r2, [pc, #132]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 80042b0:	f023 0304 	bic.w	r3, r3, #4
 80042b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d06b      	beq.n	8004398 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fd f870 	bl	80013a4 <HAL_GetTick>
 80042c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c8:	e00b      	b.n	80042e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fd f86b 	bl	80013a4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e291      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
 80042e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80042e6:	2202      	movs	r2, #2
 80042e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	fa93 f2a3 	rbit	r2, r3
 80042f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80042fe:	2202      	movs	r2, #2
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	fa93 f2a3 	rbit	r2, r3
 800430c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004310:	601a      	str	r2, [r3, #0]
  return result;
 8004312:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004316:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004318:	fab3 f383 	clz	r3, r3
 800431c:	b2db      	uxtb	r3, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f043 0302 	orr.w	r3, r3, #2
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d109      	bne.n	8004340 <HAL_RCC_OscConfig+0x93c>
 800432c:	4b01      	ldr	r3, [pc, #4]	; (8004334 <HAL_RCC_OscConfig+0x930>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x958>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	10908120 	.word	0x10908120
 800433c:	40007000 	.word	0x40007000
 8004340:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004344:	2202      	movs	r2, #2
 8004346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	fa93 f2a3 	rbit	r2, r3
 8004352:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	4bbb      	ldr	r3, [pc, #748]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004360:	2102      	movs	r1, #2
 8004362:	6011      	str	r1, [r2, #0]
 8004364:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	fa92 f1a2 	rbit	r1, r2
 800436e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004372:	6011      	str	r1, [r2, #0]
  return result;
 8004374:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	fab2 f282 	clz	r2, r2
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	f002 021f 	and.w	r2, r2, #31
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d099      	beq.n	80042ca <HAL_RCC_OscConfig+0x8c6>
 8004396:	e063      	b.n	8004460 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fd f804 	bl	80013a4 <HAL_GetTick>
 800439c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a0:	e00b      	b.n	80043ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fc ffff 	bl	80013a4 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e225      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
 80043ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043be:	2202      	movs	r2, #2
 80043c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fa93 f2a3 	rbit	r2, r3
 80043cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80043d6:	2202      	movs	r2, #2
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	fa93 f2a3 	rbit	r2, r3
 80043e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80043e8:	601a      	str	r2, [r3, #0]
  return result;
 80043ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80043ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d102      	bne.n	800440a <HAL_RCC_OscConfig+0xa06>
 8004404:	4b90      	ldr	r3, [pc, #576]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	e00d      	b.n	8004426 <HAL_RCC_OscConfig+0xa22>
 800440a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800440e:	2202      	movs	r2, #2
 8004410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	fa93 f2a3 	rbit	r2, r3
 800441c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	4b89      	ldr	r3, [pc, #548]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800442a:	2102      	movs	r1, #2
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	fa92 f1a2 	rbit	r1, r2
 8004438:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800443c:	6011      	str	r1, [r2, #0]
  return result;
 800443e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	fab2 f282 	clz	r2, r2
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	f002 021f 	and.w	r2, r2, #31
 8004454:	2101      	movs	r1, #1
 8004456:	fa01 f202 	lsl.w	r2, r1, r2
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1a0      	bne.n	80043a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004460:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004468:	4b77      	ldr	r3, [pc, #476]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4a76      	ldr	r2, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 800446e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004472:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 81c2 	beq.w	8004804 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004480:	4b71      	ldr	r3, [pc, #452]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b08      	cmp	r3, #8
 800448a:	f000 819c 	beq.w	80047c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800448e:	1d3b      	adds	r3, r7, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f040 8114 	bne.w	80046c2 <HAL_RCC_OscConfig+0xcbe>
 800449a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800449e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	fa93 f2a3 	rbit	r2, r3
 80044ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044b2:	601a      	str	r2, [r3, #0]
  return result;
 80044b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fc ff68 	bl	80013a4 <HAL_GetTick>
 80044d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d8:	e009      	b.n	80044ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7fc ff63 	bl	80013a4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e18b      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
 80044ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80044f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	fa93 f2a3 	rbit	r2, r3
 8004502:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004506:	601a      	str	r2, [r3, #0]
  return result;
 8004508:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800450c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d102      	bne.n	8004528 <HAL_RCC_OscConfig+0xb24>
 8004522:	4b49      	ldr	r3, [pc, #292]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	e01b      	b.n	8004560 <HAL_RCC_OscConfig+0xb5c>
 8004528:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800452c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	fa93 f2a3 	rbit	r2, r3
 800453c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	fa93 f2a3 	rbit	r2, r3
 8004556:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	4b3a      	ldr	r3, [pc, #232]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004564:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004568:	6011      	str	r1, [r2, #0]
 800456a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	fa92 f1a2 	rbit	r1, r2
 8004574:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004578:	6011      	str	r1, [r2, #0]
  return result;
 800457a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	f042 0220 	orr.w	r2, r2, #32
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	f002 021f 	and.w	r2, r2, #31
 8004590:	2101      	movs	r1, #1
 8004592:	fa01 f202 	lsl.w	r2, r1, r2
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d19e      	bne.n	80044da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800459c:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	4925      	ldr	r1, [pc, #148]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
 80045b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	fa93 f2a3 	rbit	r2, r3
 80045cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045d0:	601a      	str	r2, [r3, #0]
  return result;
 80045d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	461a      	mov	r2, r3
 80045ea:	2301      	movs	r3, #1
 80045ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fc fed9 	bl	80013a4 <HAL_GetTick>
 80045f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f6:	e009      	b.n	800460c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fc fed4 	bl	80013a4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e0fc      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
 800460c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	fa93 f2a3 	rbit	r2, r3
 8004620:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004624:	601a      	str	r2, [r3, #0]
  return result;
 8004626:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800462a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0xc48>
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <HAL_RCC_OscConfig+0xc44>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	e01e      	b.n	8004684 <HAL_RCC_OscConfig+0xc80>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fa93 f2a3 	rbit	r2, r3
 8004660:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800466a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	fa93 f2a3 	rbit	r2, r3
 800467a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	4b63      	ldr	r3, [pc, #396]	; (8004810 <HAL_RCC_OscConfig+0xe0c>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800468c:	6011      	str	r1, [r2, #0]
 800468e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	fa92 f1a2 	rbit	r1, r2
 8004698:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800469c:	6011      	str	r1, [r2, #0]
  return result;
 800469e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	fab2 f282 	clz	r2, r2
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	f042 0220 	orr.w	r2, r2, #32
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	f002 021f 	and.w	r2, r2, #31
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d09b      	beq.n	80045f8 <HAL_RCC_OscConfig+0xbf4>
 80046c0:	e0a0      	b.n	8004804 <HAL_RCC_OscConfig+0xe00>
 80046c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	fa93 f2a3 	rbit	r2, r3
 80046d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046da:	601a      	str	r2, [r3, #0]
  return result;
 80046dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fe54 	bl	80013a4 <HAL_GetTick>
 80046fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004700:	e009      	b.n	8004716 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004702:	f7fc fe4f 	bl	80013a4 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e077      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
 8004716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800471e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	fa93 f2a3 	rbit	r2, r3
 800472a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800472e:	601a      	str	r2, [r3, #0]
  return result;
 8004730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004734:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d102      	bne.n	8004750 <HAL_RCC_OscConfig+0xd4c>
 800474a:	4b31      	ldr	r3, [pc, #196]	; (8004810 <HAL_RCC_OscConfig+0xe0c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	e01b      	b.n	8004788 <HAL_RCC_OscConfig+0xd84>
 8004750:	f107 0320 	add.w	r3, r7, #32
 8004754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f107 0320 	add.w	r3, r7, #32
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	fa93 f2a3 	rbit	r2, r3
 8004764:	f107 031c 	add.w	r3, r7, #28
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f107 0318 	add.w	r3, r7, #24
 800476e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f107 0318 	add.w	r3, r7, #24
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	fa93 f2a3 	rbit	r2, r3
 800477e:	f107 0314 	add.w	r3, r7, #20
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_RCC_OscConfig+0xe0c>)
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	f107 0210 	add.w	r2, r7, #16
 800478c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	f107 0210 	add.w	r2, r7, #16
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	fa92 f1a2 	rbit	r1, r2
 800479c:	f107 020c 	add.w	r2, r7, #12
 80047a0:	6011      	str	r1, [r2, #0]
  return result;
 80047a2:	f107 020c 	add.w	r2, r7, #12
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	fab2 f282 	clz	r2, r2
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	f042 0220 	orr.w	r2, r2, #32
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	f002 021f 	and.w	r2, r2, #31
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f202 	lsl.w	r2, r1, r2
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d19e      	bne.n	8004702 <HAL_RCC_OscConfig+0xcfe>
 80047c4:	e01e      	b.n	8004804 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e018      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d4:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <HAL_RCC_OscConfig+0xe0c>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d108      	bne.n	8004800 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80047ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b09e      	sub	sp, #120	; 0x78
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e162      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800482c:	4b90      	ldr	r3, [pc, #576]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d910      	bls.n	800485c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 0207 	bic.w	r2, r3, #7
 8004842:	498b      	ldr	r1, [pc, #556]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b89      	ldr	r3, [pc, #548]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e14a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b82      	ldr	r3, [pc, #520]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	497f      	ldr	r1, [pc, #508]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80dc 	beq.w	8004a40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d13c      	bne.n	800490a <HAL_RCC_ClockConfig+0xf6>
 8004890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004894:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_ClockConfig+0xa6>
 80048b4:	4b6f      	ldr	r3, [pc, #444]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	e00f      	b.n	80048da <HAL_RCC_ClockConfig+0xc6>
 80048ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	667b      	str	r3, [r7, #100]	; 0x64
 80048c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048cc:	663b      	str	r3, [r7, #96]	; 0x60
 80048ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d6:	4b67      	ldr	r3, [pc, #412]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048de:	65ba      	str	r2, [r7, #88]	; 0x58
 80048e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e2:	fa92 f2a2 	rbit	r2, r2
 80048e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80048e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048ea:	fab2 f282 	clz	r2, r2
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	f042 0220 	orr.w	r2, r2, #32
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	f002 021f 	and.w	r2, r2, #31
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d17b      	bne.n	80049fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0f3      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d13c      	bne.n	800498c <HAL_RCC_ClockConfig+0x178>
 8004912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004916:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_RCC_ClockConfig+0x128>
 8004936:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	e00f      	b.n	800495c <HAL_RCC_ClockConfig+0x148>
 800493c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004940:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
 800494a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004958:	4b46      	ldr	r3, [pc, #280]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004960:	63ba      	str	r2, [r7, #56]	; 0x38
 8004962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004964:	fa92 f2a2 	rbit	r2, r2
 8004968:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800496a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496c:	fab2 f282 	clz	r2, r2
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	f002 021f 	and.w	r2, r2, #31
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f202 	lsl.w	r2, r1, r2
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d13a      	bne.n	80049fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b2      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2de>
 800498c:	2302      	movs	r3, #2
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d102      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x1a0>
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	e00d      	b.n	80049d0 <HAL_RCC_ClockConfig+0x1bc>
 80049b4:	2302      	movs	r3, #2
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
 80049c0:	2302      	movs	r3, #2
 80049c2:	623b      	str	r3, [r7, #32]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	2202      	movs	r2, #2
 80049d2:	61ba      	str	r2, [r7, #24]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	fa92 f2a2 	rbit	r2, r2
 80049da:	617a      	str	r2, [r7, #20]
  return result;
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	fab2 f282 	clz	r2, r2
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	f042 0220 	orr.w	r2, r2, #32
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	f002 021f 	and.w	r2, r2, #31
 80049ee:	2101      	movs	r1, #1
 80049f0:	fa01 f202 	lsl.w	r2, r1, r2
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e079      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	491a      	ldr	r1, [pc, #104]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a10:	f7fc fcc8 	bl	80013a4 <HAL_GetTick>
 8004a14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fc fcc4 	bl	80013a4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e061      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_RCC_ClockConfig+0x260>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 020c 	and.w	r2, r3, #12
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1eb      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d214      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 0207 	bic.w	r2, r3, #7
 8004a56:	4906      	ldr	r1, [pc, #24]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <HAL_RCC_ClockConfig+0x25c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e040      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2de>
 8004a70:	40022000 	.word	0x40022000
 8004a74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <HAL_RCC_ClockConfig+0x2e8>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	491a      	ldr	r1, [pc, #104]	; (8004afc <HAL_RCC_ClockConfig+0x2e8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa2:	4b16      	ldr	r3, [pc, #88]	; (8004afc <HAL_RCC_ClockConfig+0x2e8>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4912      	ldr	r1, [pc, #72]	; (8004afc <HAL_RCC_ClockConfig+0x2e8>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ab6:	f000 f829 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004aba:	4601      	mov	r1, r0
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_RCC_ClockConfig+0x2e8>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac4:	22f0      	movs	r2, #240	; 0xf0
 8004ac6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	fa92 f2a2 	rbit	r2, r2
 8004ace:	60fa      	str	r2, [r7, #12]
  return result;
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	fab2 f282 	clz	r2, r2
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	40d3      	lsrs	r3, r2
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x2ec>)
 8004adc:	5cd3      	ldrb	r3, [r2, r3]
 8004ade:	fa21 f303 	lsr.w	r3, r1, r3
 8004ae2:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <HAL_RCC_ClockConfig+0x2f0>)
 8004ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_RCC_ClockConfig+0x2f4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc fc16 	bl	800131c <HAL_InitTick>
  
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3778      	adds	r7, #120	; 0x78
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	0800b36c 	.word	0x0800b36c
 8004b04:	20000000 	.word	0x20000000
 8004b08:	20000004 	.word	0x20000004

08004b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b08b      	sub	sp, #44	; 0x2c
 8004b10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b26:	4b29      	ldr	r3, [pc, #164]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d002      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x30>
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d003      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x36>
 8004b3a:	e03c      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b3c:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b3e:	623b      	str	r3, [r7, #32]
      break;
 8004b40:	e03c      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	fa92 f2a2 	rbit	r2, r2
 8004b54:	607a      	str	r2, [r7, #4]
  return result;
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	fab2 f282 	clz	r2, r2
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	40d3      	lsrs	r3, r2
 8004b60:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b62:	5cd3      	ldrb	r3, [r2, r3]
 8004b64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b66:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	220f      	movs	r2, #15
 8004b70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	fa92 f2a2 	rbit	r2, r2
 8004b78:	60fa      	str	r2, [r7, #12]
  return result;
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	fab2 f282 	clz	r2, r2
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	40d3      	lsrs	r3, r2
 8004b84:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b86:	5cd3      	ldrb	r3, [r2, r3]
 8004b88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b94:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	623b      	str	r3, [r7, #32]
      break;
 8004bb4:	e002      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bb8:	623b      	str	r3, [r7, #32]
      break;
 8004bba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	372c      	adds	r7, #44	; 0x2c
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	007a1200 	.word	0x007a1200
 8004bd4:	0800b37c 	.word	0x0800b37c
 8004bd8:	0800b38c 	.word	0x0800b38c
 8004bdc:	003d0900 	.word	0x003d0900

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b092      	sub	sp, #72	; 0x48
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80d4 	beq.w	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c04:	4b4e      	ldr	r3, [pc, #312]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10e      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c10:	4b4b      	ldr	r3, [pc, #300]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	4a4a      	ldr	r2, [pc, #296]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	61d3      	str	r3, [r2, #28]
 8004c1c:	4b48      	ldr	r3, [pc, #288]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2e:	4b45      	ldr	r3, [pc, #276]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d118      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c3a:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a41      	ldr	r2, [pc, #260]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c46:	f7fc fbad 	bl	80013a4 <HAL_GetTick>
 8004c4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	e008      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4e:	f7fc fba9 	bl	80013a4 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b64      	cmp	r3, #100	; 0x64
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e169      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c6c:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8084 	beq.w	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d07c      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8c:	4b2c      	ldr	r3, [pc, #176]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cde:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d04b      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fc fb59 	bl	80013a4 <HAL_GetTick>
 8004cf2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fc fb55 	bl	80013a4 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e113      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	2302      	movs	r3, #2
 8004d1a:	623b      	str	r3, [r7, #32]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	61fb      	str	r3, [r7, #28]
  return result;
 8004d24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d108      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d3a:	4b01      	ldr	r3, [pc, #4]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	e00d      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40007000 	.word	0x40007000
 8004d48:	10908100 	.word	0x10908100
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	4b78      	ldr	r3, [pc, #480]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	613a      	str	r2, [r7, #16]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	fa92 f2a2 	rbit	r2, r2
 8004d66:	60fa      	str	r2, [r7, #12]
  return result;
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	fab2 f282 	clz	r2, r2
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	f002 021f 	and.w	r2, r2, #31
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0b7      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d86:	4b6d      	ldr	r3, [pc, #436]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	496a      	ldr	r1, [pc, #424]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4a65      	ldr	r2, [pc, #404]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004daa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db8:	4b60      	ldr	r3, [pc, #384]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	f023 0203 	bic.w	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	495d      	ldr	r1, [pc, #372]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dd6:	4b59      	ldr	r3, [pc, #356]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4956      	ldr	r1, [pc, #344]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004df4:	4b51      	ldr	r3, [pc, #324]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	494e      	ldr	r1, [pc, #312]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e12:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f023 0210 	bic.w	r2, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4947      	ldr	r1, [pc, #284]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e30:	4b42      	ldr	r3, [pc, #264]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	493f      	ldr	r1, [pc, #252]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	f023 0220 	bic.w	r2, r3, #32
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4938      	ldr	r1, [pc, #224]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e6c:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	4930      	ldr	r1, [pc, #192]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e8a:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	4929      	ldr	r1, [pc, #164]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	4921      	ldr	r1, [pc, #132]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	491a      	ldr	r1, [pc, #104]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ee4:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	4912      	ldr	r1, [pc, #72]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	490b      	ldr	r1, [pc, #44]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	4903      	ldr	r1, [pc, #12]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3748      	adds	r7, #72	; 0x48
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000

08004f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e09d      	b.n	800508e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d108      	bne.n	8004f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f62:	d009      	beq.n	8004f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	61da      	str	r2, [r3, #28]
 8004f6a:	e005      	b.n	8004f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc f8c0 	bl	8001118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb8:	d902      	bls.n	8004fc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e002      	b.n	8004fc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004fce:	d007      	beq.n	8004fe0 <HAL_SPI_Init+0xa0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	ea42 0103 	orr.w	r1, r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	f003 0204 	and.w	r2, r3, #4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800505c:	ea42 0103 	orr.w	r1, r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800507c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4013      	ands	r3, r2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050fa:	b084      	sub	sp, #16
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	f107 0014 	add.w	r0, r7, #20
 8005108:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	b004      	add	sp, #16
 800513a:	4770      	bx	lr

0800513c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800513c:	b480      	push	{r7}
 800513e:	b09b      	sub	sp, #108	; 0x6c
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d81f      	bhi.n	80051ae <USB_ActivateEndpoint+0x72>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <USB_ActivateEndpoint+0x38>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005185 	.word	0x08005185
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051b7 	.word	0x080051b7
 8005180:	08005193 	.word	0x08005193
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005184:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800518c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005190:	e012      	b.n	80051b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005192:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005196:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800519a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800519e:	e00b      	b.n	80051b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051ac:	e004      	b.n	80051b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80051b4:	e000      	b.n	80051b8 <USB_ActivateEndpoint+0x7c>
      break;
 80051b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	b21b      	sxth	r3, r3
 80051ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	b21a      	sxth	r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	4313      	orrs	r3, r2
 80051fc:	b21b      	sxth	r3, r3
 80051fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	7b1b      	ldrb	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f040 8149 	bne.w	80054c0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8084 	beq.w	8005340 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	011a      	lsls	r2, r3, #4
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	88db      	ldrh	r3, [r3, #6]
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	b29b      	uxth	r3, r3
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	81fb      	strh	r3, [r7, #14]
 800527a:	89fb      	ldrh	r3, [r7, #14]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <USB_ActivateEndpoint+0x180>
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	81bb      	strh	r3, [r7, #12]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	89bb      	ldrh	r3, [r7, #12]
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	78db      	ldrb	r3, [r3, #3]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d020      	beq.n	8005306 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	813b      	strh	r3, [r7, #8]
 80052dc:	893b      	ldrh	r3, [r7, #8]
 80052de:	f083 0320 	eor.w	r3, r3, #32
 80052e2:	813b      	strh	r3, [r7, #8]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]
 8005304:	e27f      	b.n	8005806 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531c:	817b      	strh	r3, [r7, #10]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	441a      	add	r2, r3
 8005328:	897b      	ldrh	r3, [r7, #10]
 800532a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]
 800533e:	e262      	b.n	8005806 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534a:	b29b      	uxth	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	4413      	add	r3, r2
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	011a      	lsls	r2, r3, #4
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	4413      	add	r3, r2
 800535e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	88db      	ldrh	r3, [r3, #6]
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	b29b      	uxth	r3, r3
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537e:	b29b      	uxth	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	4413      	add	r3, r2
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	011a      	lsls	r2, r3, #4
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	4413      	add	r3, r2
 8005392:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d112      	bne.n	80053c6 <USB_ActivateEndpoint+0x28a>
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	e02f      	b.n	8005426 <USB_ActivateEndpoint+0x2ea>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b3e      	cmp	r3, #62	; 0x3e
 80053cc:	d813      	bhi.n	80053f6 <USB_ActivateEndpoint+0x2ba>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	663b      	str	r3, [r7, #96]	; 0x60
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <USB_ActivateEndpoint+0x2ac>
 80053e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053e4:	3301      	adds	r3, #1
 80053e6:	663b      	str	r3, [r7, #96]	; 0x60
 80053e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e017      	b.n	8005426 <USB_ActivateEndpoint+0x2ea>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	663b      	str	r3, [r7, #96]	; 0x60
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <USB_ActivateEndpoint+0x2d4>
 800540a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800540c:	3b01      	subs	r3, #1
 800540e:	663b      	str	r3, [r7, #96]	; 0x60
 8005410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29b      	uxth	r3, r3
 8005418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005420:	b29a      	uxth	r2, r3
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	83fb      	strh	r3, [r7, #30]
 8005434:	8bfb      	ldrh	r3, [r7, #30]
 8005436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01b      	beq.n	8005476 <USB_ActivateEndpoint+0x33a>
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	83bb      	strh	r3, [r7, #28]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	8bbb      	ldrh	r3, [r7, #28]
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	837b      	strh	r3, [r7, #26]
 800548e:	8b7b      	ldrh	r3, [r7, #26]
 8005490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005494:	837b      	strh	r3, [r7, #26]
 8005496:	8b7b      	ldrh	r3, [r7, #26]
 8005498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800549c:	837b      	strh	r3, [r7, #26]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	441a      	add	r2, r3
 80054a8:	8b7b      	ldrh	r3, [r7, #26]
 80054aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	8013      	strh	r3, [r2, #0]
 80054be:	e1a2      	b.n	8005806 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80054e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005506:	b29b      	uxth	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800550c:	4413      	add	r3, r2
 800550e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	011a      	lsls	r2, r3, #4
 8005516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005518:	4413      	add	r3, r2
 800551a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800551e:	657b      	str	r3, [r7, #84]	; 0x54
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	891b      	ldrh	r3, [r3, #8]
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	b29b      	uxth	r3, r3
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	653b      	str	r3, [r7, #80]	; 0x50
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005540:	4413      	add	r3, r2
 8005542:	653b      	str	r3, [r7, #80]	; 0x50
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	011a      	lsls	r2, r3, #4
 800554a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554c:	4413      	add	r3, r2
 800554e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	895b      	ldrh	r3, [r3, #10]
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005562:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 8091 	bne.w	8005690 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800557c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800557e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01b      	beq.n	80055be <USB_ActivateEndpoint+0x482>
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	441a      	add	r2, r3
 80055a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80055aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80055cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01b      	beq.n	800560e <USB_ActivateEndpoint+0x4d2>
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	441a      	add	r2, r3
 80055f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800560a:	b29b      	uxth	r3, r3
 800560c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005626:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800562c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800562e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005634:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005652:	b29b      	uxth	r3, r3
 8005654:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566c:	867b      	strh	r3, [r7, #50]	; 0x32
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800567a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568a:	b29b      	uxth	r3, r3
 800568c:	8013      	strh	r3, [r2, #0]
 800568e:	e0ba      	b.n	8005806 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01d      	beq.n	80056e8 <USB_ActivateEndpoint+0x5ac>
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01d      	beq.n	8005740 <USB_ActivateEndpoint+0x604>
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800572c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d024      	beq.n	8005792 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005766:	f083 0320 	eor.w	r3, r3, #32
 800576a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
 8005790:	e01d      	b.n	80057ce <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	441a      	add	r2, r3
 80057b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80057f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800580a:	4618      	mov	r0, r3
 800580c:	376c      	adds	r7, #108	; 0x6c
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005818:	b480      	push	{r7}
 800581a:	b08d      	sub	sp, #52	; 0x34
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	7b1b      	ldrb	r3, [r3, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 808e 	bne.w	8005948 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d044      	beq.n	80058be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	81bb      	strh	r3, [r7, #12]
 8005842:	89bb      	ldrh	r3, [r7, #12]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01b      	beq.n	8005884 <USB_DeactivateEndpoint+0x6c>
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	817b      	strh	r3, [r7, #10]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	441a      	add	r2, r3
 800586e:	897b      	ldrh	r3, [r7, #10]
 8005870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005880:	b29b      	uxth	r3, r3
 8005882:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800589a:	813b      	strh	r3, [r7, #8]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	441a      	add	r2, r3
 80058a6:	893b      	ldrh	r3, [r7, #8]
 80058a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	8013      	strh	r3, [r2, #0]
 80058bc:	e192      	b.n	8005be4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	827b      	strh	r3, [r7, #18]
 80058cc:	8a7b      	ldrh	r3, [r7, #18]
 80058ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01b      	beq.n	800590e <USB_DeactivateEndpoint+0xf6>
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ec:	823b      	strh	r3, [r7, #16]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	441a      	add	r2, r3
 80058f8:	8a3b      	ldrh	r3, [r7, #16]
 80058fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590a:	b29b      	uxth	r3, r3
 800590c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005924:	81fb      	strh	r3, [r7, #14]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
 8005946:	e14d      	b.n	8005be4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 80a5 	bne.w	8005a9c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	843b      	strh	r3, [r7, #32]
 8005960:	8c3b      	ldrh	r3, [r7, #32]
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01b      	beq.n	80059a2 <USB_DeactivateEndpoint+0x18a>
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	83fb      	strh	r3, [r7, #30]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8bfb      	ldrh	r3, [r7, #30]
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	83bb      	strh	r3, [r7, #28]
 80059b0:	8bbb      	ldrh	r3, [r7, #28]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01b      	beq.n	80059f2 <USB_DeactivateEndpoint+0x1da>
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d0:	837b      	strh	r3, [r7, #26]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	441a      	add	r2, r3
 80059dc:	8b7b      	ldrh	r3, [r7, #26]
 80059de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a08:	833b      	strh	r3, [r7, #24]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	8b3b      	ldrh	r3, [r7, #24]
 8005a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	82fb      	strh	r3, [r7, #22]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
 8005a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a78:	82bb      	strh	r3, [r7, #20]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	8abb      	ldrh	r3, [r7, #20]
 8005a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8013      	strh	r3, [r2, #0]
 8005a9a:	e0a3      	b.n	8005be4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005aaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01b      	beq.n	8005aec <USB_DeactivateEndpoint+0x2d4>
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005afa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01b      	beq.n	8005b3c <USB_DeactivateEndpoint+0x324>
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	441a      	add	r2, r3
 8005b26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3734      	adds	r7, #52	; 0x34
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b0c4      	sub	sp, #272	; 0x110
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	1d3b      	adds	r3, r7, #4
 8005bfa:	6018      	str	r0, [r3, #0]
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c00:	463b      	mov	r3, r7
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	f040 8557 	bne.w	80066ba <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d905      	bls.n	8005c28 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c26:	e004      	b.n	8005c32 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	7b1b      	ldrb	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d12c      	bne.n	8005c96 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	88da      	ldrh	r2, [r3, #6]
 8005c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	1d38      	adds	r0, r7, #4
 8005c50:	6800      	ldr	r0, [r0, #0]
 8005c52:	f001 fa1c 	bl	800708e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c7e:	f107 0310 	add.w	r3, r7, #16
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f107 0310 	add.w	r3, r7, #16
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	f000 bcdd 	b.w	8006650 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	78db      	ldrb	r3, [r3, #3]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	f040 8347 	bne.w	8006330 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a1a      	ldr	r2, [r3, #32]
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	f240 82eb 	bls.w	800628a <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6a1a      	ldr	r2, [r3, #32]
 8005cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d0a:	1d3b      	adds	r3, r7, #4
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	463b      	mov	r3, r7
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8159 	beq.w	8005fd8 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d164      	bne.n	8005e00 <USB_EPStartXfer+0x20e>
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3c:	1d3b      	adds	r3, r7, #4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	4413      	add	r3, r2
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	011a      	lsls	r2, r3, #4
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	4413      	add	r3, r2
 8005d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d112      	bne.n	8005d8e <USB_EPStartXfer+0x19c>
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	e054      	b.n	8005e38 <USB_EPStartXfer+0x246>
 8005d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d92:	2b3e      	cmp	r3, #62	; 0x3e
 8005d94:	d817      	bhi.n	8005dc6 <USB_EPStartXfer+0x1d4>
 8005d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <USB_EPStartXfer+0x1c4>
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db0:	3301      	adds	r3, #1
 8005db2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e038      	b.n	8005e38 <USB_EPStartXfer+0x246>
 8005dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <USB_EPStartXfer+0x1f4>
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de0:	3b01      	subs	r3, #1
 8005de2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	029b      	lsls	r3, r3, #10
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	e01b      	b.n	8005e38 <USB_EPStartXfer+0x246>
 8005e00:	463b      	mov	r3, r7
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d116      	bne.n	8005e38 <USB_EPStartXfer+0x246>
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	4413      	add	r3, r2
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	011a      	lsls	r2, r3, #4
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	4413      	add	r3, r2
 8005e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	895b      	ldrh	r3, [r3, #10]
 8005e3e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e42:	463b      	mov	r3, r7
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6959      	ldr	r1, [r3, #20]
 8005e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e52:	1d38      	adds	r0, r7, #4
 8005e54:	6800      	ldr	r0, [r0, #0]
 8005e56:	f001 f91a 	bl	800708e <USB_WritePMA>
            ep->xfer_buff += len;
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e64:	441a      	add	r2, r3
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	463b      	mov	r3, r7
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d909      	bls.n	8005e90 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e86:	1ad2      	subs	r2, r2, r3
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	621a      	str	r2, [r3, #32]
 8005e8e:	e008      	b.n	8005ea2 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e90:	463b      	mov	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d164      	bne.n	8005f76 <USB_EPStartXfer+0x384>
 8005eac:	1d3b      	adds	r3, r7, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d112      	bne.n	8005f04 <USB_EPStartXfer+0x312>
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	801a      	strh	r2, [r3, #0]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e057      	b.n	8005fb4 <USB_EPStartXfer+0x3c2>
 8005f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f08:	2b3e      	cmp	r3, #62	; 0x3e
 8005f0a:	d817      	bhi.n	8005f3c <USB_EPStartXfer+0x34a>
 8005f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <USB_EPStartXfer+0x33a>
 8005f22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f26:	3301      	adds	r3, #1
 8005f28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	029b      	lsls	r3, r3, #10
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	e03b      	b.n	8005fb4 <USB_EPStartXfer+0x3c2>
 8005f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4a:	f003 031f 	and.w	r3, r3, #31
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <USB_EPStartXfer+0x36a>
 8005f52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f56:	3b01      	subs	r3, #1
 8005f58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	029b      	lsls	r3, r3, #10
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e01e      	b.n	8005fb4 <USB_EPStartXfer+0x3c2>
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d119      	bne.n	8005fb4 <USB_EPStartXfer+0x3c2>
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	1d3b      	adds	r3, r7, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	4413      	add	r3, r2
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
 8005f98:	463b      	mov	r3, r7
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	011a      	lsls	r2, r3, #4
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa8:	623b      	str	r3, [r7, #32]
 8005faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	891b      	ldrh	r3, [r3, #8]
 8005fba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6959      	ldr	r1, [r3, #20]
 8005fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005fce:	1d38      	adds	r0, r7, #4
 8005fd0:	6800      	ldr	r0, [r0, #0]
 8005fd2:	f001 f85c 	bl	800708e <USB_WritePMA>
 8005fd6:	e33b      	b.n	8006650 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d164      	bne.n	80060ac <USB_EPStartXfer+0x4ba>
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe8:	1d3b      	adds	r3, r7, #4
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff6:	4413      	add	r3, r2
 8005ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	011a      	lsls	r2, r3, #4
 8006002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006004:	4413      	add	r3, r2
 8006006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800600a:	64bb      	str	r3, [r7, #72]	; 0x48
 800600c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d112      	bne.n	800603a <USB_EPStartXfer+0x448>
 8006014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800601e:	b29a      	uxth	r2, r3
 8006020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e057      	b.n	80060ea <USB_EPStartXfer+0x4f8>
 800603a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603e:	2b3e      	cmp	r3, #62	; 0x3e
 8006040:	d817      	bhi.n	8006072 <USB_EPStartXfer+0x480>
 8006042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800604c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <USB_EPStartXfer+0x470>
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605c:	3301      	adds	r3, #1
 800605e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006066:	b29b      	uxth	r3, r3
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	b29a      	uxth	r2, r3
 800606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e03b      	b.n	80060ea <USB_EPStartXfer+0x4f8>
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800607c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <USB_EPStartXfer+0x4a0>
 8006088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608c:	3b01      	subs	r3, #1
 800608e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006096:	b29b      	uxth	r3, r3
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e01e      	b.n	80060ea <USB_EPStartXfer+0x4f8>
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d119      	bne.n	80060ea <USB_EPStartXfer+0x4f8>
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	657b      	str	r3, [r7, #84]	; 0x54
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ca:	4413      	add	r3, r2
 80060cc:	657b      	str	r3, [r7, #84]	; 0x54
 80060ce:	463b      	mov	r3, r7
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	011a      	lsls	r2, r3, #4
 80060d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d8:	4413      	add	r3, r2
 80060da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060de:	653b      	str	r3, [r7, #80]	; 0x50
 80060e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060ea:	463b      	mov	r3, r7
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	891b      	ldrh	r3, [r3, #8]
 80060f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6959      	ldr	r1, [r3, #20]
 80060fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006104:	1d38      	adds	r0, r7, #4
 8006106:	6800      	ldr	r0, [r0, #0]
 8006108:	f000 ffc1 	bl	800708e <USB_WritePMA>
            ep->xfer_buff += len;
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006116:	441a      	add	r2, r3
 8006118:	463b      	mov	r3, r7
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a1a      	ldr	r2, [r3, #32]
 8006124:	463b      	mov	r3, r7
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	d909      	bls.n	8006142 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006138:	1ad2      	subs	r2, r2, r3
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	e008      	b.n	8006154 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006154:	1d3b      	adds	r3, r7, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d164      	bne.n	800622e <USB_EPStartXfer+0x63c>
 8006164:	1d3b      	adds	r3, r7, #4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006172:	b29b      	uxth	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006178:	4413      	add	r3, r2
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	011a      	lsls	r2, r3, #4
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	4413      	add	r3, r2
 8006188:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
 800618e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d112      	bne.n	80061bc <USB_EPStartXfer+0x5ca>
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	e054      	b.n	8006266 <USB_EPStartXfer+0x674>
 80061bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c0:	2b3e      	cmp	r3, #62	; 0x3e
 80061c2:	d817      	bhi.n	80061f4 <USB_EPStartXfer+0x602>
 80061c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <USB_EPStartXfer+0x5f2>
 80061da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061de:	3301      	adds	r3, #1
 80061e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e038      	b.n	8006266 <USB_EPStartXfer+0x674>
 80061f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <USB_EPStartXfer+0x622>
 800620a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800620e:	3b01      	subs	r3, #1
 8006210:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006214:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29b      	uxth	r3, r3
 800621e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006226:	b29a      	uxth	r2, r3
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	e01b      	b.n	8006266 <USB_EPStartXfer+0x674>
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d116      	bne.n	8006266 <USB_EPStartXfer+0x674>
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006240:	b29b      	uxth	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006246:	4413      	add	r3, r2
 8006248:	647b      	str	r3, [r7, #68]	; 0x44
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	011a      	lsls	r2, r3, #4
 8006252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006254:	4413      	add	r3, r2
 8006256:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800625a:	643b      	str	r3, [r7, #64]	; 0x40
 800625c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006260:	b29a      	uxth	r2, r3
 8006262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006264:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	895b      	ldrh	r3, [r3, #10]
 800626c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006270:	463b      	mov	r3, r7
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6959      	ldr	r1, [r3, #20]
 8006276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627a:	b29b      	uxth	r3, r3
 800627c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006280:	1d38      	adds	r0, r7, #4
 8006282:	6800      	ldr	r0, [r0, #0]
 8006284:	f000 ff03 	bl	800708e <USB_WritePMA>
 8006288:	e1e2      	b.n	8006650 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006294:	1d3b      	adds	r3, r7, #4
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	463b      	mov	r3, r7
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062b2:	1d3b      	adds	r3, r7, #4
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	663b      	str	r3, [r7, #96]	; 0x60
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ec:	4413      	add	r3, r2
 80062ee:	663b      	str	r3, [r7, #96]	; 0x60
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	011a      	lsls	r2, r3, #4
 80062f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006306:	b29a      	uxth	r2, r3
 8006308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800630a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800630c:	463b      	mov	r3, r7
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	891b      	ldrh	r3, [r3, #8]
 8006312:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006316:	463b      	mov	r3, r7
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6959      	ldr	r1, [r3, #20]
 800631c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006320:	b29b      	uxth	r3, r3
 8006322:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006326:	1d38      	adds	r0, r7, #4
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f000 feb0 	bl	800708e <USB_WritePMA>
 800632e:	e18f      	b.n	8006650 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006330:	1d3b      	adds	r3, r7, #4
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 808f 	beq.w	800646a <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	67bb      	str	r3, [r7, #120]	; 0x78
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d164      	bne.n	8006426 <USB_EPStartXfer+0x834>
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	673b      	str	r3, [r7, #112]	; 0x70
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006370:	4413      	add	r3, r2
 8006372:	673b      	str	r3, [r7, #112]	; 0x70
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	011a      	lsls	r2, r3, #4
 800637c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800637e:	4413      	add	r3, r2
 8006380:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d112      	bne.n	80063b4 <USB_EPStartXfer+0x7c2>
 800638e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006398:	b29a      	uxth	r2, r3
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e054      	b.n	800645e <USB_EPStartXfer+0x86c>
 80063b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b8:	2b3e      	cmp	r3, #62	; 0x3e
 80063ba:	d817      	bhi.n	80063ec <USB_EPStartXfer+0x7fa>
 80063bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <USB_EPStartXfer+0x7ea>
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	3301      	adds	r3, #1
 80063d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	029b      	lsls	r3, r3, #10
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e038      	b.n	800645e <USB_EPStartXfer+0x86c>
 80063ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <USB_EPStartXfer+0x81a>
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	3b01      	subs	r3, #1
 8006408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	b29b      	uxth	r3, r3
 8006412:	029b      	lsls	r3, r3, #10
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e01b      	b.n	800645e <USB_EPStartXfer+0x86c>
 8006426:	463b      	mov	r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d116      	bne.n	800645e <USB_EPStartXfer+0x86c>
 8006430:	1d3b      	adds	r3, r7, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643e:	4413      	add	r3, r2
 8006440:	67bb      	str	r3, [r7, #120]	; 0x78
 8006442:	463b      	mov	r3, r7
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800644c:	4413      	add	r3, r2
 800644e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006452:	677b      	str	r3, [r7, #116]	; 0x74
 8006454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006458:	b29a      	uxth	r2, r3
 800645a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800645c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	895b      	ldrh	r3, [r3, #10]
 8006464:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006468:	e097      	b.n	800659a <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d168      	bne.n	8006546 <USB_EPStartXfer+0x954>
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800648c:	4413      	add	r3, r2
 800648e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	011a      	lsls	r2, r3, #4
 800649a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800649e:	4413      	add	r3, r2
 80064a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d112      	bne.n	80064d4 <USB_EPStartXfer+0x8e2>
 80064ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e05d      	b.n	8006590 <USB_EPStartXfer+0x99e>
 80064d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d8:	2b3e      	cmp	r3, #62	; 0x3e
 80064da:	d817      	bhi.n	800650c <USB_EPStartXfer+0x91a>
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <USB_EPStartXfer+0x90a>
 80064f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064f6:	3301      	adds	r3, #1
 80064f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006500:	b29b      	uxth	r3, r3
 8006502:	029b      	lsls	r3, r3, #10
 8006504:	b29a      	uxth	r2, r3
 8006506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e041      	b.n	8006590 <USB_EPStartXfer+0x99e>
 800650c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <USB_EPStartXfer+0x93a>
 8006522:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006526:	3b01      	subs	r3, #1
 8006528:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800652c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29b      	uxth	r3, r3
 8006536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653e:	b29a      	uxth	r2, r3
 8006540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e024      	b.n	8006590 <USB_EPStartXfer+0x99e>
 8006546:	463b      	mov	r3, r7
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d11f      	bne.n	8006590 <USB_EPStartXfer+0x99e>
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006568:	4413      	add	r3, r2
 800656a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	011a      	lsls	r2, r3, #4
 8006576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800657a:	4413      	add	r3, r2
 800657c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006590:	463b      	mov	r3, r7
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	891b      	ldrh	r3, [r3, #8]
 8006596:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800659a:	463b      	mov	r3, r7
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6959      	ldr	r1, [r3, #20]
 80065a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065aa:	1d38      	adds	r0, r7, #4
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f000 fd6e 	bl	800708e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80065b2:	463b      	mov	r3, r7
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d122      	bne.n	8006602 <USB_EPStartXfer+0xa10>
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80065da:	1d3b      	adds	r3, r7, #4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80065ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	8013      	strh	r3, [r2, #0]
 8006600:	e026      	b.n	8006650 <USB_EPStartXfer+0xa5e>
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d121      	bne.n	8006650 <USB_EPStartXfer+0xa5e>
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006626:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006650:	1d3b      	adds	r3, r7, #4
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	463b      	mov	r3, r7
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f107 020e 	add.w	r2, r7, #14
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666e:	8013      	strh	r3, [r2, #0]
 8006670:	f107 030e 	add.w	r3, r7, #14
 8006674:	f107 020e 	add.w	r2, r7, #14
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	f082 0210 	eor.w	r2, r2, #16
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	f107 030e 	add.w	r3, r7, #14
 8006684:	f107 020e 	add.w	r2, r7, #14
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	f082 0220 	eor.w	r2, r2, #32
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	463b      	mov	r3, r7
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	f107 030e 	add.w	r3, r7, #14
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]
 80066b8:	e3b5      	b.n	8006e26 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	7b1b      	ldrb	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 8090 	bne.w	80067e6 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	463b      	mov	r3, r7
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d90e      	bls.n	80066f4 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80066d6:	463b      	mov	r3, r7
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	619a      	str	r2, [r3, #24]
 80066f2:	e008      	b.n	8006706 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006706:	1d3b      	adds	r3, r7, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006716:	b29b      	uxth	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800671e:	4413      	add	r3, r2
 8006720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	011a      	lsls	r2, r3, #4
 800672c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006730:	4413      	add	r3, r2
 8006732:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800673a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d116      	bne.n	8006770 <USB_EPStartXfer+0xb7e>
 8006742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800674e:	b29a      	uxth	r2, r3
 8006750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	e32c      	b.n	8006dca <USB_EPStartXfer+0x11d8>
 8006770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006774:	2b3e      	cmp	r3, #62	; 0x3e
 8006776:	d818      	bhi.n	80067aa <USB_EPStartXfer+0xbb8>
 8006778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <USB_EPStartXfer+0xba6>
 800678e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006792:	3301      	adds	r3, #1
 8006794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006798:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800679c:	b29b      	uxth	r3, r3
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e30f      	b.n	8006dca <USB_EPStartXfer+0x11d8>
 80067aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <USB_EPStartXfer+0xbd8>
 80067c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067c4:	3b01      	subs	r3, #1
 80067c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	e2f1      	b.n	8006dca <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067e6:	463b      	mov	r3, r7
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	78db      	ldrb	r3, [r3, #3]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	f040 818f 	bne.w	8006b10 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d175      	bne.n	80068e8 <USB_EPStartXfer+0xcf6>
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006804:	1d3b      	adds	r3, r7, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680c:	b29b      	uxth	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006814:	4413      	add	r3, r2
 8006816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800681a:	463b      	mov	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	011a      	lsls	r2, r3, #4
 8006822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006826:	4413      	add	r3, r2
 8006828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800682c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006830:	463b      	mov	r3, r7
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d116      	bne.n	8006868 <USB_EPStartXfer+0xc76>
 800683a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685e:	b29a      	uxth	r2, r3
 8006860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006864:	801a      	strh	r2, [r3, #0]
 8006866:	e065      	b.n	8006934 <USB_EPStartXfer+0xd42>
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b3e      	cmp	r3, #62	; 0x3e
 8006870:	d81a      	bhi.n	80068a8 <USB_EPStartXfer+0xcb6>
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800687e:	463b      	mov	r3, r7
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <USB_EPStartXfer+0xca4>
 800688c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006890:	3301      	adds	r3, #1
 8006892:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006896:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800689a:	b29b      	uxth	r3, r3
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	b29a      	uxth	r2, r3
 80068a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	e045      	b.n	8006934 <USB_EPStartXfer+0xd42>
 80068a8:	463b      	mov	r3, r7
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068b4:	463b      	mov	r3, r7
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <USB_EPStartXfer+0xcda>
 80068c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068c6:	3b01      	subs	r3, #1
 80068c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	029b      	lsls	r3, r3, #10
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	e025      	b.n	8006934 <USB_EPStartXfer+0xd42>
 80068e8:	463b      	mov	r3, r7
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d120      	bne.n	8006934 <USB_EPStartXfer+0xd42>
 80068f2:	1d3b      	adds	r3, r7, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006902:	b29b      	uxth	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800690a:	4413      	add	r3, r2
 800690c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006910:	463b      	mov	r3, r7
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	011a      	lsls	r2, r3, #4
 8006918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800691c:	4413      	add	r3, r2
 800691e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	b29a      	uxth	r2, r3
 800692e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006932:	801a      	strh	r2, [r3, #0]
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d175      	bne.n	8006a32 <USB_EPStartXfer+0xe40>
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800694e:	1d3b      	adds	r3, r7, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800695e:	4413      	add	r3, r2
 8006960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	011a      	lsls	r2, r3, #4
 800696c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006970:	4413      	add	r3, r2
 8006972:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d116      	bne.n	80069b2 <USB_EPStartXfer+0xdc0>
 8006984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	e061      	b.n	8006a76 <USB_EPStartXfer+0xe84>
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b3e      	cmp	r3, #62	; 0x3e
 80069ba:	d81a      	bhi.n	80069f2 <USB_EPStartXfer+0xe00>
 80069bc:	463b      	mov	r3, r7
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069c8:	463b      	mov	r3, r7
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <USB_EPStartXfer+0xdee>
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	3301      	adds	r3, #1
 80069dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	029b      	lsls	r3, r3, #10
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	e041      	b.n	8006a76 <USB_EPStartXfer+0xe84>
 80069f2:	463b      	mov	r3, r7
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069fe:	463b      	mov	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <USB_EPStartXfer+0xe24>
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a10:	3b01      	subs	r3, #1
 8006a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	e021      	b.n	8006a76 <USB_EPStartXfer+0xe84>
 8006a32:	463b      	mov	r3, r7
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d11c      	bne.n	8006a76 <USB_EPStartXfer+0xe84>
 8006a3c:	1d3b      	adds	r3, r7, #4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a52:	463b      	mov	r3, r7
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	011a      	lsls	r2, r3, #4
 8006a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a5e:	4413      	add	r3, r2
 8006a60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a68:	463b      	mov	r3, r7
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 81a4 	beq.w	8006dca <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	463b      	mov	r3, r7
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <USB_EPStartXfer+0xebc>
 8006aa2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10d      	bne.n	8006aca <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 8187 	bne.w	8006dca <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006abc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f040 8180 	bne.w	8006dca <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006ae8:	1d3b      	adds	r3, r7, #4
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	463b      	mov	r3, r7
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	8013      	strh	r3, [r2, #0]
 8006b0e:	e15c      	b.n	8006dca <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	78db      	ldrb	r3, [r3, #3]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	f040 8155 	bne.w	8006dc6 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	463b      	mov	r3, r7
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d90e      	bls.n	8006b4a <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006b36:	463b      	mov	r3, r7
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	463b      	mov	r3, r7
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	619a      	str	r2, [r3, #24]
 8006b48:	e008      	b.n	8006b5c <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006b54:	463b      	mov	r3, r7
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d16f      	bne.n	8006c46 <USB_EPStartXfer+0x1054>
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b7e:	4413      	add	r3, r2
 8006b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	011a      	lsls	r2, r3, #4
 8006b8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d116      	bne.n	8006bd0 <USB_EPStartXfer+0xfde>
 8006ba2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bb4:	801a      	strh	r2, [r3, #0]
 8006bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	e05f      	b.n	8006c90 <USB_EPStartXfer+0x109e>
 8006bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd6:	d818      	bhi.n	8006c0a <USB_EPStartXfer+0x1018>
 8006bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <USB_EPStartXfer+0x1006>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	029b      	lsls	r3, r3, #10
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e042      	b.n	8006c90 <USB_EPStartXfer+0x109e>
 8006c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <USB_EPStartXfer+0x1038>
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c24:	3b01      	subs	r3, #1
 8006c26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	029b      	lsls	r3, r3, #10
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	e024      	b.n	8006c90 <USB_EPStartXfer+0x109e>
 8006c46:	463b      	mov	r3, r7
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d11f      	bne.n	8006c90 <USB_EPStartXfer+0x109e>
 8006c50:	1d3b      	adds	r3, r7, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c58:	1d3b      	adds	r3, r7, #4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c68:	4413      	add	r3, r2
 8006c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c6e:	463b      	mov	r3, r7
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	011a      	lsls	r2, r3, #4
 8006c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	1d3b      	adds	r3, r7, #4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d16f      	bne.n	8006d82 <USB_EPStartXfer+0x1190>
 8006ca2:	1d3b      	adds	r3, r7, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cba:	4413      	add	r3, r2
 8006cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	011a      	lsls	r2, r3, #4
 8006cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ccc:	4413      	add	r3, r2
 8006cce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d116      	bne.n	8006d0c <USB_EPStartXfer+0x111a>
 8006cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e05e      	b.n	8006dca <USB_EPStartXfer+0x11d8>
 8006d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d10:	2b3e      	cmp	r3, #62	; 0x3e
 8006d12:	d818      	bhi.n	8006d46 <USB_EPStartXfer+0x1154>
 8006d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <USB_EPStartXfer+0x1142>
 8006d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	029b      	lsls	r3, r3, #10
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	e041      	b.n	8006dca <USB_EPStartXfer+0x11d8>
 8006d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4a:	095b      	lsrs	r3, r3, #5
 8006d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <USB_EPStartXfer+0x1174>
 8006d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d60:	3b01      	subs	r3, #1
 8006d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	029b      	lsls	r3, r3, #10
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	e023      	b.n	8006dca <USB_EPStartXfer+0x11d8>
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d11e      	bne.n	8006dca <USB_EPStartXfer+0x11d8>
 8006d8c:	1d3b      	adds	r3, r7, #4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da2:	463b      	mov	r3, r7
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	011a      	lsls	r2, r3, #4
 8006daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dae:	4413      	add	r3, r2
 8006db0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	e001      	b.n	8006dca <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e02e      	b.n	8006e28 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	463b      	mov	r3, r7
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006de8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006df0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006df4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dfc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	463b      	mov	r3, r7
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	441a      	add	r2, r3
 8006e0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d020      	beq.n	8006e86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5a:	81bb      	strh	r3, [r7, #12]
 8006e5c:	89bb      	ldrh	r3, [r7, #12]
 8006e5e:	f083 0310 	eor.w	r3, r3, #16
 8006e62:	81bb      	strh	r3, [r7, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	89bb      	ldrh	r3, [r7, #12]
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
 8006e84:	e01f      	b.n	8006ec6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9c:	81fb      	strh	r3, [r7, #14]
 8006e9e:	89fb      	ldrh	r3, [r7, #14]
 8006ea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ea4:	81fb      	strh	r3, [r7, #14]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	441a      	add	r2, r3
 8006eb0:	89fb      	ldrh	r3, [r7, #14]
 8006eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	7b1b      	ldrb	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 809d 	bne.w	8007022 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d04c      	beq.n	8006f8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	823b      	strh	r3, [r7, #16]
 8006efe:	8a3b      	ldrh	r3, [r7, #16]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <USB_EPClearStall+0x6c>
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	81fb      	strh	r3, [r7, #14]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	441a      	add	r2, r3
 8006f2a:	89fb      	ldrh	r3, [r7, #14]
 8006f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d06c      	beq.n	8007022 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	81bb      	strh	r3, [r7, #12]
 8006f60:	89bb      	ldrh	r3, [r7, #12]
 8006f62:	f083 0320 	eor.w	r3, r3, #32
 8006f66:	81bb      	strh	r3, [r7, #12]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	89bb      	ldrh	r3, [r7, #12]
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
 8006f88:	e04b      	b.n	8007022 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	82fb      	strh	r3, [r7, #22]
 8006f98:	8afb      	ldrh	r3, [r7, #22]
 8006f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01b      	beq.n	8006fda <USB_EPClearStall+0x106>
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb8:	82bb      	strh	r3, [r7, #20]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	441a      	add	r2, r3
 8006fc4:	8abb      	ldrh	r3, [r7, #20]
 8006fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	827b      	strh	r3, [r7, #18]
 8006ff2:	8a7b      	ldrh	r3, [r7, #18]
 8006ff4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ff8:	827b      	strh	r3, [r7, #18]
 8006ffa:	8a7b      	ldrh	r3, [r7, #18]
 8006ffc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007000:	827b      	strh	r3, [r7, #18]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	441a      	add	r2, r3
 800700c:	8a7b      	ldrh	r3, [r7, #18]
 800700e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701e:	b29b      	uxth	r3, r3
 8007020:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2280      	movs	r2, #128	; 0x80
 8007046:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800707c:	b29b      	uxth	r3, r3
 800707e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007080:	68fb      	ldr	r3, [r7, #12]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800708e:	b480      	push	{r7}
 8007090:	b08d      	sub	sp, #52	; 0x34
 8007092:	af00      	add	r7, sp, #0
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	4611      	mov	r1, r2
 800709a:	461a      	mov	r2, r3
 800709c:	460b      	mov	r3, r1
 800709e:	80fb      	strh	r3, [r7, #6]
 80070a0:	4613      	mov	r3, r2
 80070a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070a4:	88bb      	ldrh	r3, [r7, #4]
 80070a6:	3301      	adds	r3, #1
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070b4:	88fb      	ldrh	r3, [r7, #6]
 80070b6:	005a      	lsls	r2, r3, #1
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c6:	e01e      	b.n	8007106 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	3301      	adds	r3, #1
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	b29b      	uxth	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	3302      	adds	r3, #2
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	3302      	adds	r3, #2
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	3301      	adds	r3, #1
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	3b01      	subs	r3, #1
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1dd      	bne.n	80070c8 <USB_WritePMA+0x3a>
  }
}
 800710c:	bf00      	nop
 800710e:	3734      	adds	r7, #52	; 0x34
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007118:	b480      	push	{r7}
 800711a:	b08b      	sub	sp, #44	; 0x2c
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	80fb      	strh	r3, [r7, #6]
 800712a:	4613      	mov	r3, r2
 800712c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800712e:	88bb      	ldrh	r3, [r7, #4]
 8007130:	085b      	lsrs	r3, r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	005a      	lsls	r2, r3, #1
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800714a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
 8007150:	e01b      	b.n	800718a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	3302      	adds	r3, #2
 800715e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	b2da      	uxtb	r2, r3
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	0a1b      	lsrs	r3, r3, #8
 8007172:	b2da      	uxtb	r2, r3
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	3301      	adds	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	3302      	adds	r3, #2
 8007182:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	3b01      	subs	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e0      	bne.n	8007152 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007190:	88bb      	ldrh	r3, [r7, #4]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	701a      	strb	r2, [r3, #0]
  }
}
 80071ac:	bf00      	nop
 80071ae:	372c      	adds	r7, #44	; 0x2c
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7c1b      	ldrb	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d115      	bne.n	80071fc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d4:	2202      	movs	r2, #2
 80071d6:	2181      	movs	r1, #129	; 0x81
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 fea6 	bl	8008f2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e8:	2202      	movs	r2, #2
 80071ea:	2101      	movs	r1, #1
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fe9c 	bl	8008f2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80071fa:	e012      	b.n	8007222 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	2202      	movs	r2, #2
 8007200:	2181      	movs	r1, #129	; 0x81
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fe91 	bl	8008f2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800720e:	2340      	movs	r3, #64	; 0x40
 8007210:	2202      	movs	r2, #2
 8007212:	2101      	movs	r1, #1
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fe88 	bl	8008f2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007222:	2308      	movs	r3, #8
 8007224:	2203      	movs	r2, #3
 8007226:	2182      	movs	r1, #130	; 0x82
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fe7e 	bl	8008f2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007234:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007238:	f001 ffa0 	bl	800917c <USBD_static_malloc>
 800723c:	4602      	mov	r2, r0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800724e:	2301      	movs	r3, #1
 8007250:	73fb      	strb	r3, [r7, #15]
 8007252:	e026      	b.n	80072a2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	7c1b      	ldrb	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007288:	2101      	movs	r1, #1
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 ff3f 	bl	800910e <USBD_LL_PrepareReceive>
 8007290:	e007      	b.n	80072a2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	2101      	movs	r1, #1
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 ff36 	bl	800910e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072bc:	2181      	movs	r1, #129	; 0x81
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fe59 	bl	8008f76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072ca:	2101      	movs	r1, #1
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fe52 	bl	8008f76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80072da:	2182      	movs	r1, #130	; 0x82
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 fe4a 	bl	8008f76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007302:	4618      	mov	r0, r3
 8007304:	f001 ff48 	bl	8009198 <USBD_static_free>
    pdev->pClassData = NULL;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b086      	sub	sp, #24
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007340:	2b00      	cmp	r3, #0
 8007342:	d039      	beq.n	80073b8 <USBD_CDC_Setup+0x9e>
 8007344:	2b20      	cmp	r3, #32
 8007346:	d17c      	bne.n	8007442 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	88db      	ldrh	r3, [r3, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d029      	beq.n	80073a4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b25b      	sxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	da11      	bge.n	800737e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007366:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	88d2      	ldrh	r2, [r2, #6]
 800736c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800736e:	6939      	ldr	r1, [r7, #16]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	88db      	ldrh	r3, [r3, #6]
 8007374:	461a      	mov	r2, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 fa04 	bl	8008784 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800737c:	e068      	b.n	8007450 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	785a      	ldrb	r2, [r3, #1]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	88db      	ldrh	r3, [r3, #6]
 800738c:	b2da      	uxtb	r2, r3
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007394:	6939      	ldr	r1, [r7, #16]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	88db      	ldrh	r3, [r3, #6]
 800739a:	461a      	mov	r2, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 fa1f 	bl	80087e0 <USBD_CtlPrepareRx>
      break;
 80073a2:	e055      	b.n	8007450 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	7850      	ldrb	r0, [r2, #1]
 80073b0:	2200      	movs	r2, #0
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	4798      	blx	r3
      break;
 80073b6:	e04b      	b.n	8007450 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b0a      	cmp	r3, #10
 80073be:	d017      	beq.n	80073f0 <USBD_CDC_Setup+0xd6>
 80073c0:	2b0b      	cmp	r3, #11
 80073c2:	d029      	beq.n	8007418 <USBD_CDC_Setup+0xfe>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d133      	bne.n	8007430 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d107      	bne.n	80073e2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80073d2:	f107 030c 	add.w	r3, r7, #12
 80073d6:	2202      	movs	r2, #2
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 f9d2 	bl	8008784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073e0:	e02e      	b.n	8007440 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f962 	bl	80086ae <USBD_CtlError>
            ret = USBD_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	75fb      	strb	r3, [r7, #23]
          break;
 80073ee:	e027      	b.n	8007440 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d107      	bne.n	800740a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80073fa:	f107 030f 	add.w	r3, r7, #15
 80073fe:	2201      	movs	r2, #1
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 f9be 	bl	8008784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007408:	e01a      	b.n	8007440 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 f94e 	bl	80086ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007412:	2302      	movs	r3, #2
 8007414:	75fb      	strb	r3, [r7, #23]
          break;
 8007416:	e013      	b.n	8007440 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741e:	2b03      	cmp	r3, #3
 8007420:	d00d      	beq.n	800743e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f942 	bl	80086ae <USBD_CtlError>
            ret = USBD_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800742e:	e006      	b.n	800743e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f93b 	bl	80086ae <USBD_CtlError>
          ret = USBD_FAIL;
 8007438:	2302      	movs	r3, #2
 800743a:	75fb      	strb	r3, [r7, #23]
          break;
 800743c:	e000      	b.n	8007440 <USBD_CDC_Setup+0x126>
          break;
 800743e:	bf00      	nop
      }
      break;
 8007440:	e006      	b.n	8007450 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f932 	bl	80086ae <USBD_CtlError>
      ret = USBD_FAIL;
 800744a:	2302      	movs	r3, #2
 800744c:	75fb      	strb	r3, [r7, #23]
      break;
 800744e:	bf00      	nop
  }

  return ret;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	460b      	mov	r3, r1
 8007464:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007474:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d03a      	beq.n	80074f6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	331c      	adds	r3, #28
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d029      	beq.n	80074ea <USBD_CDC_DataIn+0x90>
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	331c      	adds	r3, #28
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	78f9      	ldrb	r1, [r7, #3]
 80074aa:	68b8      	ldr	r0, [r7, #8]
 80074ac:	460b      	mov	r3, r1
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4403      	add	r3, r0
 80074b6:	3338      	adds	r3, #56	; 0x38
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	fbb2 f1f3 	udiv	r1, r2, r3
 80074be:	fb03 f301 	mul.w	r3, r3, r1
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d110      	bne.n	80074ea <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	331c      	adds	r3, #28
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074dc:	78f9      	ldrb	r1, [r7, #3]
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fdf0 	bl	80090c8 <USBD_LL_Transmit>
 80074e8:	e003      	b.n	80074f2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e000      	b.n	80074f8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80074f6:	2302      	movs	r3, #2
  }
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007512:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 fe1b 	bl	8009154 <USBD_LL_GetRxDataSize>
 800751e:	4602      	mov	r2, r0
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00d      	beq.n	800754c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007544:	4611      	mov	r1, r2
 8007546:	4798      	blx	r3

    return USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800754c:	2302      	movs	r3, #2
  }
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007564:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800756c:	2b00      	cmp	r3, #0
 800756e:	d015      	beq.n	800759c <USBD_CDC_EP0_RxReady+0x46>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007576:	2bff      	cmp	r3, #255	; 0xff
 8007578:	d010      	beq.n	800759c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007588:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007590:	b292      	uxth	r2, r2
 8007592:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	22ff      	movs	r2, #255	; 0xff
 8007598:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2243      	movs	r2, #67	; 0x43
 80075b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80075b6:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20000094 	.word	0x20000094

080075c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2243      	movs	r2, #67	; 0x43
 80075d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80075d6:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	20000050 	.word	0x20000050

080075e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2243      	movs	r2, #67	; 0x43
 80075f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80075f6:	4b03      	ldr	r3, [pc, #12]	; (8007604 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	200000d8 	.word	0x200000d8

08007608 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	220a      	movs	r2, #10
 8007614:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007616:	4b03      	ldr	r3, [pc, #12]	; (8007624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	2000000c 	.word	0x2000000c

08007628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007632:	2302      	movs	r3, #2
 8007634:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007656:	b480      	push	{r7}
 8007658:	b087      	sub	sp, #28
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	4613      	mov	r3, r2
 8007662:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01c      	beq.n	8007706 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d115      	bne.n	8007702 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2181      	movs	r1, #129	; 0x81
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fce5 	bl	80090c8 <USBD_LL_Transmit>

      return USBD_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	e002      	b.n	8007708 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007702:	2301      	movs	r3, #1
 8007704:	e000      	b.n	8007708 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d017      	beq.n	800775a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c1b      	ldrb	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800773c:	2101      	movs	r1, #1
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 fce5 	bl	800910e <USBD_LL_PrepareReceive>
 8007744:	e007      	b.n	8007756 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	2101      	movs	r1, #1
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fcdc 	bl	800910e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	e000      	b.n	800775c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800775a:	2302      	movs	r3, #2
  }
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007778:	2302      	movs	r3, #2
 800777a:	e01a      	b.n	80077b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	79fa      	ldrb	r2, [r7, #7]
 80077a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f001 fb48 	bl	8008e40 <USBD_LL_Init>

  return USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d006      	beq.n	80077dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
 80077da:	e001      	b.n	80077e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80077dc:	2302      	movs	r3, #2
 80077de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 fb7c 	bl	8008ef4 <USBD_LL_Start>

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007828:	2302      	movs	r3, #2
 800782a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00c      	beq.n	8007850 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	4611      	mov	r1, r2
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	4611      	mov	r1, r2
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3

  return USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fece 	bl	8008634 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078a6:	461a      	mov	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078b4:	f003 031f 	and.w	r3, r3, #31
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d00c      	beq.n	80078d6 <USBD_LL_SetupStage+0x56>
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d302      	bcc.n	80078c6 <USBD_LL_SetupStage+0x46>
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d010      	beq.n	80078e6 <USBD_LL_SetupStage+0x66>
 80078c4:	e017      	b.n	80078f6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9ce 	bl	8007c70 <USBD_StdDevReq>
      break;
 80078d4:	e01a      	b.n	800790c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa30 	bl	8007d44 <USBD_StdItfReq>
      break;
 80078e4:	e012      	b.n	800790c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa6e 	bl	8007dd0 <USBD_StdEPReq>
      break;
 80078f4:	e00a      	b.n	800790c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007900:	b2db      	uxtb	r3, r3
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fb55 	bl	8008fb4 <USBD_LL_StallEP>
      break;
 800790a:	bf00      	nop
  }

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	460b      	mov	r3, r1
 8007920:	607a      	str	r2, [r7, #4]
 8007922:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d14b      	bne.n	80079c2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007930:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007938:	2b03      	cmp	r3, #3
 800793a:	d134      	bne.n	80079a6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	429a      	cmp	r2, r3
 8007946:	d919      	bls.n	800797c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	1ad2      	subs	r2, r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800795e:	429a      	cmp	r2, r3
 8007960:	d203      	bcs.n	800796a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007966:	b29b      	uxth	r3, r3
 8007968:	e002      	b.n	8007970 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800796e:	b29b      	uxth	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 ff51 	bl	800881c <USBD_CtlContinueRx>
 800797a:	e038      	b.n	80079ee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800798e:	2b03      	cmp	r3, #3
 8007990:	d105      	bne.n	800799e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 ff4e 	bl	8008840 <USBD_CtlSendStatus>
 80079a4:	e023      	b.n	80079ee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	d11e      	bne.n	80079ee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80079b8:	2100      	movs	r1, #0
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f001 fafa 	bl	8008fb4 <USBD_LL_StallEP>
 80079c0:	e015      	b.n	80079ee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d108      	bne.n	80079ea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	7afa      	ldrb	r2, [r7, #11]
 80079e2:	4611      	mov	r1, r2
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	4798      	blx	r3
 80079e8:	e001      	b.n	80079ee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079ea:	2302      	movs	r3, #2
 80079ec:	e000      	b.n	80079f0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	460b      	mov	r3, r1
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d17f      	bne.n	8007b0c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d15c      	bne.n	8007ad6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d915      	bls.n	8007a54 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	1ad2      	subs	r2, r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 febb 	bl	80087bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a46:	2300      	movs	r3, #0
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f001 fb5e 	bl	800910e <USBD_LL_PrepareReceive>
 8007a52:	e04e      	b.n	8007af2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	6912      	ldr	r2, [r2, #16]
 8007a5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a60:	fb02 f201 	mul.w	r2, r2, r1
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d11c      	bne.n	8007aa4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d316      	bcc.n	8007aa4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d20f      	bcs.n	8007aa4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a84:	2200      	movs	r2, #0
 8007a86:	2100      	movs	r1, #0
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fe97 	bl	80087bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a96:	2300      	movs	r3, #0
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f001 fb36 	bl	800910e <USBD_LL_PrepareReceive>
 8007aa2:	e026      	b.n	8007af2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d105      	bne.n	8007ac6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ac6:	2180      	movs	r1, #128	; 0x80
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f001 fa73 	bl	8008fb4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fec9 	bl	8008866 <USBD_CtlReceiveStatus>
 8007ad4:	e00d      	b.n	8007af2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d004      	beq.n	8007aea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d103      	bne.n	8007af2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007aea:	2180      	movs	r1, #128	; 0x80
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f001 fa61 	bl	8008fb4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d11d      	bne.n	8007b38 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff fe82 	bl	8007806 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b0a:	e015      	b.n	8007b38 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00d      	beq.n	8007b34 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d108      	bne.n	8007b34 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	7afa      	ldrb	r2, [r7, #11]
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	4798      	blx	r3
 8007b32:	e001      	b.n	8007b38 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b34:	2302      	movs	r3, #2
 8007b36:	e000      	b.n	8007b3a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b4a:	2340      	movs	r3, #64	; 0x40
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f9ea 	bl	8008f2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b66:	2340      	movs	r3, #64	; 0x40
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2180      	movs	r1, #128	; 0x80
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f9dc 	bl	8008f2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2240      	movs	r2, #64	; 0x40
 8007b7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6852      	ldr	r2, [r2, #4]
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
  }

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d105      	bne.n	8007c2c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d10b      	bne.n	8007c64 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d004      	beq.n	8007c94 <USBD_StdDevReq+0x24>
 8007c8a:	2b40      	cmp	r3, #64	; 0x40
 8007c8c:	d002      	beq.n	8007c94 <USBD_StdDevReq+0x24>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d008      	beq.n	8007ca4 <USBD_StdDevReq+0x34>
 8007c92:	e04c      	b.n	8007d2e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
      break;
 8007ca2:	e049      	b.n	8007d38 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	2b09      	cmp	r3, #9
 8007caa:	d83a      	bhi.n	8007d22 <USBD_StdDevReq+0xb2>
 8007cac:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <USBD_StdDevReq+0x44>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007d19 	.word	0x08007d19
 8007cbc:	08007d23 	.word	0x08007d23
 8007cc0:	08007d0f 	.word	0x08007d0f
 8007cc4:	08007d23 	.word	0x08007d23
 8007cc8:	08007ce7 	.word	0x08007ce7
 8007ccc:	08007cdd 	.word	0x08007cdd
 8007cd0:	08007d23 	.word	0x08007d23
 8007cd4:	08007cfb 	.word	0x08007cfb
 8007cd8:	08007cf1 	.word	0x08007cf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f9d4 	bl	800808c <USBD_GetDescriptor>
          break;
 8007ce4:	e022      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fb37 	bl	800835c <USBD_SetAddress>
          break;
 8007cee:	e01d      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fb74 	bl	80083e0 <USBD_SetConfig>
          break;
 8007cf8:	e018      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fbfd 	bl	80084fc <USBD_GetConfig>
          break;
 8007d02:	e013      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fc2c 	bl	8008564 <USBD_GetStatus>
          break;
 8007d0c:	e00e      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fc5a 	bl	80085ca <USBD_SetFeature>
          break;
 8007d16:	e009      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc69 	bl	80085f2 <USBD_ClrFeature>
          break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fcc2 	bl	80086ae <USBD_CtlError>
          break;
 8007d2a:	bf00      	nop
      }
      break;
 8007d2c:	e004      	b.n	8007d38 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fcbc 	bl	80086ae <USBD_CtlError>
      break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d003      	beq.n	8007d66 <USBD_StdItfReq+0x22>
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d001      	beq.n	8007d66 <USBD_StdItfReq+0x22>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d12a      	bne.n	8007dbc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d81d      	bhi.n	8007dae <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	889b      	ldrh	r3, [r3, #4]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d813      	bhi.n	8007da4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88db      	ldrh	r3, [r3, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d110      	bne.n	8007db8 <USBD_StdItfReq+0x74>
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fd4f 	bl	8008840 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007da2:	e009      	b.n	8007db8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fc81 	bl	80086ae <USBD_CtlError>
          break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fc7c 	bl	80086ae <USBD_CtlError>
          break;
 8007db6:	e000      	b.n	8007dba <USBD_StdItfReq+0x76>
          break;
 8007db8:	bf00      	nop
      }
      break;
 8007dba:	e004      	b.n	8007dc6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fc75 	bl	80086ae <USBD_CtlError>
      break;
 8007dc4:	bf00      	nop
  }

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	889b      	ldrh	r3, [r3, #4]
 8007de2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d004      	beq.n	8007dfa <USBD_StdEPReq+0x2a>
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d002      	beq.n	8007dfa <USBD_StdEPReq+0x2a>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <USBD_StdEPReq+0x3a>
 8007df8:	e13d      	b.n	8008076 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
      break;
 8007e08:	e13a      	b.n	8008080 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d10a      	bne.n	8007e2c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	e12a      	b.n	8008082 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d03e      	beq.n	8007eb2 <USBD_StdEPReq+0xe2>
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d002      	beq.n	8007e3e <USBD_StdEPReq+0x6e>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d070      	beq.n	8007f1e <USBD_StdEPReq+0x14e>
 8007e3c:	e115      	b.n	800806a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d002      	beq.n	8007e4e <USBD_StdEPReq+0x7e>
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d015      	beq.n	8007e78 <USBD_StdEPReq+0xa8>
 8007e4c:	e02b      	b.n	8007ea6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00c      	beq.n	8007e6e <USBD_StdEPReq+0x9e>
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	2b80      	cmp	r3, #128	; 0x80
 8007e58:	d009      	beq.n	8007e6e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 f8a8 	bl	8008fb4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e64:	2180      	movs	r1, #128	; 0x80
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 f8a4 	bl	8008fb4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e6c:	e020      	b.n	8007eb0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc1c 	bl	80086ae <USBD_CtlError>
              break;
 8007e76:	e01b      	b.n	8007eb0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	885b      	ldrh	r3, [r3, #2]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10e      	bne.n	8007e9e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <USBD_StdEPReq+0xce>
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d008      	beq.n	8007e9e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f88b 	bl	8008fb4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fcce 	bl	8008840 <USBD_CtlSendStatus>

              break;
 8007ea4:	e004      	b.n	8007eb0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc00 	bl	80086ae <USBD_CtlError>
              break;
 8007eae:	bf00      	nop
          }
          break;
 8007eb0:	e0e0      	b.n	8008074 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d002      	beq.n	8007ec2 <USBD_StdEPReq+0xf2>
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d015      	beq.n	8007eec <USBD_StdEPReq+0x11c>
 8007ec0:	e026      	b.n	8007f10 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00c      	beq.n	8007ee2 <USBD_StdEPReq+0x112>
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b80      	cmp	r3, #128	; 0x80
 8007ecc:	d009      	beq.n	8007ee2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 f86e 	bl	8008fb4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ed8:	2180      	movs	r1, #128	; 0x80
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f001 f86a 	bl	8008fb4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ee0:	e01c      	b.n	8007f1c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fbe2 	bl	80086ae <USBD_CtlError>
              break;
 8007eea:	e017      	b.n	8007f1c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	885b      	ldrh	r3, [r3, #2]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d112      	bne.n	8007f1a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f875 	bl	8008ff2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fc99 	bl	8008840 <USBD_CtlSendStatus>
              }
              break;
 8007f0e:	e004      	b.n	8007f1a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fbcb 	bl	80086ae <USBD_CtlError>
              break;
 8007f18:	e000      	b.n	8007f1c <USBD_StdEPReq+0x14c>
              break;
 8007f1a:	bf00      	nop
          }
          break;
 8007f1c:	e0aa      	b.n	8008074 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d002      	beq.n	8007f2e <USBD_StdEPReq+0x15e>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d032      	beq.n	8007f92 <USBD_StdEPReq+0x1c2>
 8007f2c:	e097      	b.n	800805e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d007      	beq.n	8007f44 <USBD_StdEPReq+0x174>
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b80      	cmp	r3, #128	; 0x80
 8007f38:	d004      	beq.n	8007f44 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fbb6 	bl	80086ae <USBD_CtlError>
                break;
 8007f42:	e091      	b.n	8008068 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da0b      	bge.n	8007f64 <USBD_StdEPReq+0x194>
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	3310      	adds	r3, #16
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3304      	adds	r3, #4
 8007f62:	e00b      	b.n	8007f7c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	4413      	add	r3, r2
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2202      	movs	r2, #2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fbfa 	bl	8008784 <USBD_CtlSendData>
              break;
 8007f90:	e06a      	b.n	8008068 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da11      	bge.n	8007fbe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	3318      	adds	r3, #24
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d117      	bne.n	8007fe4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fb79 	bl	80086ae <USBD_CtlError>
                  break;
 8007fbc:	e054      	b.n	8008068 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	f003 020f 	and.w	r2, r3, #15
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fb66 	bl	80086ae <USBD_CtlError>
                  break;
 8007fe2:	e041      	b.n	8008068 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	da0b      	bge.n	8008004 <USBD_StdEPReq+0x234>
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	3310      	adds	r3, #16
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4413      	add	r3, r2
 8008000:	3304      	adds	r3, #4
 8008002:	e00b      	b.n	800801c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	3304      	adds	r3, #4
 800801c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <USBD_StdEPReq+0x25a>
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b80      	cmp	r3, #128	; 0x80
 8008028:	d103      	bne.n	8008032 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	e00e      	b.n	8008050 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fffa 	bl	8009030 <USBD_LL_IsStallEP>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2201      	movs	r2, #1
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	e002      	b.n	8008050 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2202      	movs	r2, #2
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb94 	bl	8008784 <USBD_CtlSendData>
              break;
 800805c:	e004      	b.n	8008068 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fb24 	bl	80086ae <USBD_CtlError>
              break;
 8008066:	bf00      	nop
          }
          break;
 8008068:	e004      	b.n	8008074 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fb1e 	bl	80086ae <USBD_CtlError>
          break;
 8008072:	bf00      	nop
      }
      break;
 8008074:	e004      	b.n	8008080 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fb18 	bl	80086ae <USBD_CtlError>
      break;
 800807e:	bf00      	nop
  }

  return ret;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	885b      	ldrh	r3, [r3, #2]
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	2b06      	cmp	r3, #6
 80080ae:	f200 8128 	bhi.w	8008302 <USBD_GetDescriptor+0x276>
 80080b2:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <USBD_GetDescriptor+0x2c>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	080080ed 	.word	0x080080ed
 80080c0:	0800812d 	.word	0x0800812d
 80080c4:	08008303 	.word	0x08008303
 80080c8:	08008303 	.word	0x08008303
 80080cc:	080082a3 	.word	0x080082a3
 80080d0:	080082cf 	.word	0x080082cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	7c12      	ldrb	r2, [r2, #16]
 80080e0:	f107 0108 	add.w	r1, r7, #8
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
 80080e8:	60f8      	str	r0, [r7, #12]
      break;
 80080ea:	e112      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7c1b      	ldrb	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10d      	bne.n	8008110 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	f107 0208 	add.w	r2, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	2202      	movs	r2, #2
 800810c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800810e:	e100      	b.n	8008312 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	f107 0208 	add.w	r2, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	2202      	movs	r2, #2
 8008128:	701a      	strb	r2, [r3, #0]
      break;
 800812a:	e0f2      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	885b      	ldrh	r3, [r3, #2]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b05      	cmp	r3, #5
 8008134:	f200 80ac 	bhi.w	8008290 <USBD_GetDescriptor+0x204>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USBD_GetDescriptor+0xb4>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008159 	.word	0x08008159
 8008144:	0800818d 	.word	0x0800818d
 8008148:	080081c1 	.word	0x080081c1
 800814c:	080081f5 	.word	0x080081f5
 8008150:	08008229 	.word	0x08008229
 8008154:	0800825d 	.word	0x0800825d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	7c12      	ldrb	r2, [r2, #16]
 8008170:	f107 0108 	add.w	r1, r7, #8
 8008174:	4610      	mov	r0, r2
 8008176:	4798      	blx	r3
 8008178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817a:	e091      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa95 	bl	80086ae <USBD_CtlError>
            err++;
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	3301      	adds	r3, #1
 8008188:	72fb      	strb	r3, [r7, #11]
          break;
 800818a:	e089      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7c12      	ldrb	r2, [r2, #16]
 80081a4:	f107 0108 	add.w	r1, r7, #8
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ae:	e077      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa7b 	bl	80086ae <USBD_CtlError>
            err++;
 80081b8:	7afb      	ldrb	r3, [r7, #11]
 80081ba:	3301      	adds	r3, #1
 80081bc:	72fb      	strb	r3, [r7, #11]
          break;
 80081be:	e06f      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7c12      	ldrb	r2, [r2, #16]
 80081d8:	f107 0108 	add.w	r1, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081e2:	e05d      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa61 	bl	80086ae <USBD_CtlError>
            err++;
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	3301      	adds	r3, #1
 80081f0:	72fb      	strb	r3, [r7, #11]
          break;
 80081f2:	e055      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00b      	beq.n	8008218 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	7c12      	ldrb	r2, [r2, #16]
 800820c:	f107 0108 	add.w	r1, r7, #8
 8008210:	4610      	mov	r0, r2
 8008212:	4798      	blx	r3
 8008214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008216:	e043      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa47 	bl	80086ae <USBD_CtlError>
            err++;
 8008220:	7afb      	ldrb	r3, [r7, #11]
 8008222:	3301      	adds	r3, #1
 8008224:	72fb      	strb	r3, [r7, #11]
          break;
 8008226:	e03b      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	7c12      	ldrb	r2, [r2, #16]
 8008240:	f107 0108 	add.w	r1, r7, #8
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
 8008248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800824a:	e029      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa2d 	bl	80086ae <USBD_CtlError>
            err++;
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	3301      	adds	r3, #1
 8008258:	72fb      	strb	r3, [r7, #11]
          break;
 800825a:	e021      	b.n	80082a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	7c12      	ldrb	r2, [r2, #16]
 8008274:	f107 0108 	add.w	r1, r7, #8
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
 800827c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827e:	e00f      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fa13 	bl	80086ae <USBD_CtlError>
            err++;
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	3301      	adds	r3, #1
 800828c:	72fb      	strb	r3, [r7, #11]
          break;
 800828e:	e007      	b.n	80082a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa0b 	bl	80086ae <USBD_CtlError>
          err++;
 8008298:	7afb      	ldrb	r3, [r7, #11]
 800829a:	3301      	adds	r3, #1
 800829c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800829e:	e038      	b.n	8008312 <USBD_GetDescriptor+0x286>
 80082a0:	e037      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7c1b      	ldrb	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b2:	f107 0208 	add.w	r2, r7, #8
 80082b6:	4610      	mov	r0, r2
 80082b8:	4798      	blx	r3
 80082ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082bc:	e029      	b.n	8008312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f9f4 	bl	80086ae <USBD_CtlError>
        err++;
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	3301      	adds	r3, #1
 80082ca:	72fb      	strb	r3, [r7, #11]
      break;
 80082cc:	e021      	b.n	8008312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7c1b      	ldrb	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	f107 0208 	add.w	r2, r7, #8
 80082e2:	4610      	mov	r0, r2
 80082e4:	4798      	blx	r3
 80082e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	2207      	movs	r2, #7
 80082ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082f0:	e00f      	b.n	8008312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9da 	bl	80086ae <USBD_CtlError>
        err++;
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	3301      	adds	r3, #1
 80082fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008300:	e007      	b.n	8008312 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f9d2 	bl	80086ae <USBD_CtlError>
      err++;
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	3301      	adds	r3, #1
 800830e:	72fb      	strb	r3, [r7, #11]
      break;
 8008310:	bf00      	nop
  }

  if (err != 0U)
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11c      	bne.n	8008352 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008318:	893b      	ldrh	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d011      	beq.n	8008342 <USBD_GetDescriptor+0x2b6>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00d      	beq.n	8008342 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88da      	ldrh	r2, [r3, #6]
 800832a:	893b      	ldrh	r3, [r7, #8]
 800832c:	4293      	cmp	r3, r2
 800832e:	bf28      	it	cs
 8008330:	4613      	movcs	r3, r2
 8008332:	b29b      	uxth	r3, r3
 8008334:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008336:	893b      	ldrh	r3, [r7, #8]
 8008338:	461a      	mov	r2, r3
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fa21 	bl	8008784 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	88db      	ldrh	r3, [r3, #6]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d104      	bne.n	8008354 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa78 	bl	8008840 <USBD_CtlSendStatus>
 8008350:	e000      	b.n	8008354 <USBD_GetDescriptor+0x2c8>
    return;
 8008352:	bf00      	nop
    }
  }
}
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop

0800835c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	889b      	ldrh	r3, [r3, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d130      	bne.n	80083d0 <USBD_SetAddress+0x74>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	88db      	ldrh	r3, [r3, #6]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12c      	bne.n	80083d0 <USBD_SetAddress+0x74>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	2b7f      	cmp	r3, #127	; 0x7f
 800837c:	d828      	bhi.n	80083d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	885b      	ldrh	r3, [r3, #2]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008390:	2b03      	cmp	r3, #3
 8008392:	d104      	bne.n	800839e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f989 	bl	80086ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839c:	e01c      	b.n	80083d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7bfa      	ldrb	r2, [r7, #15]
 80083a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fe6d 	bl	800908a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa45 	bl	8008840 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c4:	e008      	b.n	80083d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ce:	e003      	b.n	80083d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f96b 	bl	80086ae <USBD_CtlError>
  }
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	885b      	ldrh	r3, [r3, #2]
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	4b41      	ldr	r3, [pc, #260]	; (80084f8 <USBD_SetConfig+0x118>)
 80083f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083f4:	4b40      	ldr	r3, [pc, #256]	; (80084f8 <USBD_SetConfig+0x118>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d904      	bls.n	8008406 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f955 	bl	80086ae <USBD_CtlError>
 8008404:	e075      	b.n	80084f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840c:	2b02      	cmp	r3, #2
 800840e:	d002      	beq.n	8008416 <USBD_SetConfig+0x36>
 8008410:	2b03      	cmp	r3, #3
 8008412:	d023      	beq.n	800845c <USBD_SetConfig+0x7c>
 8008414:	e062      	b.n	80084dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008416:	4b38      	ldr	r3, [pc, #224]	; (80084f8 <USBD_SetConfig+0x118>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01a      	beq.n	8008454 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800841e:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <USBD_SetConfig+0x118>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2203      	movs	r2, #3
 800842c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008430:	4b31      	ldr	r3, [pc, #196]	; (80084f8 <USBD_SetConfig+0x118>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff f9f0 	bl	800781c <USBD_SetClassConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	2b02      	cmp	r3, #2
 8008440:	d104      	bne.n	800844c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f932 	bl	80086ae <USBD_CtlError>
            return;
 800844a:	e052      	b.n	80084f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f9f7 	bl	8008840 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008452:	e04e      	b.n	80084f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f9f3 	bl	8008840 <USBD_CtlSendStatus>
        break;
 800845a:	e04a      	b.n	80084f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800845c:	4b26      	ldr	r3, [pc, #152]	; (80084f8 <USBD_SetConfig+0x118>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d112      	bne.n	800848a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800846c:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <USBD_SetConfig+0x118>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008476:	4b20      	ldr	r3, [pc, #128]	; (80084f8 <USBD_SetConfig+0x118>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff f9ec 	bl	800785a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f9dc 	bl	8008840 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008488:	e033      	b.n	80084f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800848a:	4b1b      	ldr	r3, [pc, #108]	; (80084f8 <USBD_SetConfig+0x118>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	d01d      	beq.n	80084d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff f9da 	bl	800785a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80084a6:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <USBD_SetConfig+0x118>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <USBD_SetConfig+0x118>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff f9b0 	bl	800781c <USBD_SetClassConfig>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d104      	bne.n	80084cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f8f2 	bl	80086ae <USBD_CtlError>
            return;
 80084ca:	e012      	b.n	80084f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9b7 	bl	8008840 <USBD_CtlSendStatus>
        break;
 80084d2:	e00e      	b.n	80084f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f9b3 	bl	8008840 <USBD_CtlSendStatus>
        break;
 80084da:	e00a      	b.n	80084f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8e5 	bl	80086ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <USBD_SetConfig+0x118>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff f9b5 	bl	800785a <USBD_ClrClassConfig>
        break;
 80084f0:	bf00      	nop
    }
  }
}
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	2000036c 	.word	0x2000036c

080084fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d004      	beq.n	8008518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f8cc 	bl	80086ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008516:	e021      	b.n	800855c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851e:	2b01      	cmp	r3, #1
 8008520:	db17      	blt.n	8008552 <USBD_GetConfig+0x56>
 8008522:	2b02      	cmp	r3, #2
 8008524:	dd02      	ble.n	800852c <USBD_GetConfig+0x30>
 8008526:	2b03      	cmp	r3, #3
 8008528:	d00b      	beq.n	8008542 <USBD_GetConfig+0x46>
 800852a:	e012      	b.n	8008552 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3308      	adds	r3, #8
 8008536:	2201      	movs	r2, #1
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f922 	bl	8008784 <USBD_CtlSendData>
        break;
 8008540:	e00c      	b.n	800855c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3304      	adds	r3, #4
 8008546:	2201      	movs	r2, #1
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f91a 	bl	8008784 <USBD_CtlSendData>
        break;
 8008550:	e004      	b.n	800855c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8aa 	bl	80086ae <USBD_CtlError>
        break;
 800855a:	bf00      	nop
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008574:	3b01      	subs	r3, #1
 8008576:	2b02      	cmp	r3, #2
 8008578:	d81e      	bhi.n	80085b8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	88db      	ldrh	r3, [r3, #6]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d004      	beq.n	800858c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f892 	bl	80086ae <USBD_CtlError>
        break;
 800858a:	e01a      	b.n	80085c2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f043 0202 	orr.w	r2, r3, #2
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	330c      	adds	r3, #12
 80085ac:	2202      	movs	r2, #2
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f8e7 	bl	8008784 <USBD_CtlSendData>
      break;
 80085b6:	e004      	b.n	80085c2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f877 	bl	80086ae <USBD_CtlError>
      break;
 80085c0:	bf00      	nop
  }
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	885b      	ldrh	r3, [r3, #2]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d106      	bne.n	80085ea <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f92b 	bl	8008840 <USBD_CtlSendStatus>
  }
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008602:	3b01      	subs	r3, #1
 8008604:	2b02      	cmp	r3, #2
 8008606:	d80b      	bhi.n	8008620 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	885b      	ldrh	r3, [r3, #2]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d10c      	bne.n	800862a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f911 	bl	8008840 <USBD_CtlSendStatus>
      }
      break;
 800861e:	e004      	b.n	800862a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f843 	bl	80086ae <USBD_CtlError>
      break;
 8008628:	e000      	b.n	800862c <USBD_ClrFeature+0x3a>
      break;
 800862a:	bf00      	nop
  }
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781a      	ldrb	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	785a      	ldrb	r2, [r3, #1]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	3302      	adds	r3, #2
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	b29a      	uxth	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	3303      	adds	r3, #3
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	b29b      	uxth	r3, r3
 8008662:	4413      	add	r3, r2
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	3304      	adds	r3, #4
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	b29a      	uxth	r2, r3
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	3305      	adds	r3, #5
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	b29b      	uxth	r3, r3
 800867e:	4413      	add	r3, r2
 8008680:	b29a      	uxth	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	3306      	adds	r3, #6
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b29a      	uxth	r2, r3
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	3307      	adds	r3, #7
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	b29b      	uxth	r3, r3
 800869a:	4413      	add	r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	80da      	strh	r2, [r3, #6]

}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086b8:	2180      	movs	r1, #128	; 0x80
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fc7a 	bl	8008fb4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086c0:	2100      	movs	r1, #0
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fc76 	bl	8008fb4 <USBD_LL_StallEP>
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d032      	beq.n	800874c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f000 f834 	bl	8008754 <USBD_GetLen>
 80086ec:	4603      	mov	r3, r0
 80086ee:	3301      	adds	r3, #1
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	75fa      	strb	r2, [r7, #23]
 8008700:	461a      	mov	r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	4413      	add	r3, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	75fa      	strb	r2, [r7, #23]
 8008712:	461a      	mov	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4413      	add	r3, r2
 8008718:	2203      	movs	r2, #3
 800871a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800871c:	e012      	b.n	8008744 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	60fa      	str	r2, [r7, #12]
 8008724:	7dfa      	ldrb	r2, [r7, #23]
 8008726:	1c51      	adds	r1, r2, #1
 8008728:	75f9      	strb	r1, [r7, #23]
 800872a:	4611      	mov	r1, r2
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	440a      	add	r2, r1
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	75fa      	strb	r2, [r7, #23]
 800873a:	461a      	mov	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4413      	add	r3, r2
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e8      	bne.n	800871e <USBD_GetString+0x4e>
    }
  }
}
 800874c:	bf00      	nop
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008760:	e005      	b.n	800876e <USBD_GetLen+0x1a>
  {
    len++;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	3301      	adds	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3301      	adds	r3, #1
 800876c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f5      	bne.n	8008762 <USBD_GetLen+0xe>
  }

  return len;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2202      	movs	r2, #2
 8008796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800879a:	88fa      	ldrh	r2, [r7, #6]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80087a0:	88fa      	ldrh	r2, [r7, #6]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	2100      	movs	r1, #0
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fc8b 	bl	80090c8 <USBD_LL_Transmit>

  return USBD_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	2100      	movs	r1, #0
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 fc79 	bl	80090c8 <USBD_LL_Transmit>

  return USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2203      	movs	r2, #3
 80087f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087f6:	88fa      	ldrh	r2, [r7, #6]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	2100      	movs	r1, #0
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 fc7e 	bl	800910e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	2100      	movs	r1, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fc6c 	bl	800910e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2204      	movs	r2, #4
 800884c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008850:	2300      	movs	r3, #0
 8008852:	2200      	movs	r2, #0
 8008854:	2100      	movs	r1, #0
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fc36 	bl	80090c8 <USBD_LL_Transmit>

  return USBD_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2205      	movs	r2, #5
 8008872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	2100      	movs	r1, #0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fc46 	bl	800910e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008890:	2200      	movs	r2, #0
 8008892:	4912      	ldr	r1, [pc, #72]	; (80088dc <MX_USB_DEVICE_Init+0x50>)
 8008894:	4812      	ldr	r0, [pc, #72]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 8008896:	f7fe ff65 	bl	8007764 <USBD_Init>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088a0:	f7f8 fbca 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088a4:	490f      	ldr	r1, [pc, #60]	; (80088e4 <MX_USB_DEVICE_Init+0x58>)
 80088a6:	480e      	ldr	r0, [pc, #56]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 80088a8:	f7fe ff87 	bl	80077ba <USBD_RegisterClass>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088b2:	f7f8 fbc1 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088b6:	490c      	ldr	r1, [pc, #48]	; (80088e8 <MX_USB_DEVICE_Init+0x5c>)
 80088b8:	4809      	ldr	r0, [pc, #36]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 80088ba:	f7fe feb5 	bl	8007628 <USBD_CDC_RegisterInterface>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088c4:	f7f8 fbb8 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088c8:	4805      	ldr	r0, [pc, #20]	; (80088e0 <MX_USB_DEVICE_Init+0x54>)
 80088ca:	f7fe ff90 	bl	80077ee <USBD_Start>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088d4:	f7f8 fbb0 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088d8:	bf00      	nop
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	2000012c 	.word	0x2000012c
 80088e0:	2000064c 	.word	0x2000064c
 80088e4:	20000018 	.word	0x20000018
 80088e8:	2000011c 	.word	0x2000011c

080088ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088f0:	2200      	movs	r2, #0
 80088f2:	4905      	ldr	r1, [pc, #20]	; (8008908 <CDC_Init_FS+0x1c>)
 80088f4:	4805      	ldr	r0, [pc, #20]	; (800890c <CDC_Init_FS+0x20>)
 80088f6:	f7fe feae 	bl	8007656 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088fa:	4905      	ldr	r1, [pc, #20]	; (8008910 <CDC_Init_FS+0x24>)
 80088fc:	4803      	ldr	r0, [pc, #12]	; (800890c <CDC_Init_FS+0x20>)
 80088fe:	f7fe fec4 	bl	800768a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008902:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008904:	4618      	mov	r0, r3
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000cf8 	.word	0x20000cf8
 800890c:	2000064c 	.word	0x2000064c
 8008910:	20000910 	.word	0x20000910

08008914 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008914:	b480      	push	{r7}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008918:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800891a:	4618      	mov	r0, r3
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	6039      	str	r1, [r7, #0]
 800892e:	71fb      	strb	r3, [r7, #7]
 8008930:	4613      	mov	r3, r2
 8008932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	2b23      	cmp	r3, #35	; 0x23
 8008938:	d84a      	bhi.n	80089d0 <CDC_Control_FS+0xac>
 800893a:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <CDC_Control_FS+0x1c>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	080089d1 	.word	0x080089d1
 8008944:	080089d1 	.word	0x080089d1
 8008948:	080089d1 	.word	0x080089d1
 800894c:	080089d1 	.word	0x080089d1
 8008950:	080089d1 	.word	0x080089d1
 8008954:	080089d1 	.word	0x080089d1
 8008958:	080089d1 	.word	0x080089d1
 800895c:	080089d1 	.word	0x080089d1
 8008960:	080089d1 	.word	0x080089d1
 8008964:	080089d1 	.word	0x080089d1
 8008968:	080089d1 	.word	0x080089d1
 800896c:	080089d1 	.word	0x080089d1
 8008970:	080089d1 	.word	0x080089d1
 8008974:	080089d1 	.word	0x080089d1
 8008978:	080089d1 	.word	0x080089d1
 800897c:	080089d1 	.word	0x080089d1
 8008980:	080089d1 	.word	0x080089d1
 8008984:	080089d1 	.word	0x080089d1
 8008988:	080089d1 	.word	0x080089d1
 800898c:	080089d1 	.word	0x080089d1
 8008990:	080089d1 	.word	0x080089d1
 8008994:	080089d1 	.word	0x080089d1
 8008998:	080089d1 	.word	0x080089d1
 800899c:	080089d1 	.word	0x080089d1
 80089a0:	080089d1 	.word	0x080089d1
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	080089d1 	.word	0x080089d1
 80089ac:	080089d1 	.word	0x080089d1
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089d1 	.word	0x080089d1
 80089b8:	080089d1 	.word	0x080089d1
 80089bc:	080089d1 	.word	0x080089d1
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	080089d1 	.word	0x080089d1
 80089c8:	080089d1 	.word	0x080089d1
 80089cc:	080089d1 	.word	0x080089d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089d0:	bf00      	nop
  }

  return (USBD_OK);
 80089d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	4805      	ldr	r0, [pc, #20]	; (8008a04 <CDC_Receive_FS+0x24>)
 80089ee:	f7fe fe4c 	bl	800768a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089f2:	4804      	ldr	r0, [pc, #16]	; (8008a04 <CDC_Receive_FS+0x24>)
 80089f4:	f7fe fe8c 	bl	8007710 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	2000064c 	.word	0x2000064c

08008a08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a18:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <CDC_Transmit_FS+0x48>)
 8008a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e00b      	b.n	8008a46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a2e:	887b      	ldrh	r3, [r7, #2]
 8008a30:	461a      	mov	r2, r3
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4806      	ldr	r0, [pc, #24]	; (8008a50 <CDC_Transmit_FS+0x48>)
 8008a36:	f7fe fe0e 	bl	8007656 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a3a:	4805      	ldr	r0, [pc, #20]	; (8008a50 <CDC_Transmit_FS+0x48>)
 8008a3c:	f7fe fe39 	bl	80076b2 <USBD_CDC_TransmitPacket>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	2000064c 	.word	0x2000064c

08008a54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6039      	str	r1, [r7, #0]
 8008a5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2212      	movs	r2, #18
 8008a64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a66:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	20000148 	.word	0x20000148

08008a78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	6039      	str	r1, [r7, #0]
 8008a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2204      	movs	r2, #4
 8008a88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a8a:	4b03      	ldr	r3, [pc, #12]	; (8008a98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	2000015c 	.word	0x2000015c

08008a9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	4907      	ldr	r1, [pc, #28]	; (8008ad0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ab2:	4808      	ldr	r0, [pc, #32]	; (8008ad4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ab4:	f7ff fe0c 	bl	80086d0 <USBD_GetString>
 8008ab8:	e004      	b.n	8008ac4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4904      	ldr	r1, [pc, #16]	; (8008ad0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008abe:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac0:	f7ff fe06 	bl	80086d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200010e0 	.word	0x200010e0
 8008ad4:	0800b324 	.word	0x0800b324

08008ad8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	6039      	str	r1, [r7, #0]
 8008ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	4904      	ldr	r1, [pc, #16]	; (8008af8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ae8:	4804      	ldr	r0, [pc, #16]	; (8008afc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008aea:	f7ff fdf1 	bl	80086d0 <USBD_GetString>
  return USBD_StrDesc;
 8008aee:	4b02      	ldr	r3, [pc, #8]	; (8008af8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	200010e0 	.word	0x200010e0
 8008afc:	0800b33c 	.word	0x0800b33c

08008b00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	6039      	str	r1, [r7, #0]
 8008b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	221a      	movs	r2, #26
 8008b10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b12:	f000 f843 	bl	8008b9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b16:	4b02      	ldr	r3, [pc, #8]	; (8008b20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000160 	.word	0x20000160

08008b24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	6039      	str	r1, [r7, #0]
 8008b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d105      	bne.n	8008b42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4907      	ldr	r1, [pc, #28]	; (8008b58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b3a:	4808      	ldr	r0, [pc, #32]	; (8008b5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b3c:	f7ff fdc8 	bl	80086d0 <USBD_GetString>
 8008b40:	e004      	b.n	8008b4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4904      	ldr	r1, [pc, #16]	; (8008b58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b46:	4805      	ldr	r0, [pc, #20]	; (8008b5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b48:	f7ff fdc2 	bl	80086d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200010e0 	.word	0x200010e0
 8008b5c:	0800b350 	.word	0x0800b350

08008b60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d105      	bne.n	8008b7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4907      	ldr	r1, [pc, #28]	; (8008b94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b76:	4808      	ldr	r0, [pc, #32]	; (8008b98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b78:	f7ff fdaa 	bl	80086d0 <USBD_GetString>
 8008b7c:	e004      	b.n	8008b88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	4904      	ldr	r1, [pc, #16]	; (8008b94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b82:	4805      	ldr	r0, [pc, #20]	; (8008b98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b84:	f7ff fda4 	bl	80086d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b88:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	200010e0 	.word	0x200010e0
 8008b98:	0800b35c 	.word	0x0800b35c

08008b9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ba2:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <Get_SerialNum+0x44>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ba8:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <Get_SerialNum+0x48>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bae:	4b0e      	ldr	r3, [pc, #56]	; (8008be8 <Get_SerialNum+0x4c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4413      	add	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bc2:	2208      	movs	r2, #8
 8008bc4:	4909      	ldr	r1, [pc, #36]	; (8008bec <Get_SerialNum+0x50>)
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 f814 	bl	8008bf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bcc:	2204      	movs	r2, #4
 8008bce:	4908      	ldr	r1, [pc, #32]	; (8008bf0 <Get_SerialNum+0x54>)
 8008bd0:	68b8      	ldr	r0, [r7, #8]
 8008bd2:	f000 f80f 	bl	8008bf4 <IntToUnicode>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	1ffff7ac 	.word	0x1ffff7ac
 8008be4:	1ffff7b0 	.word	0x1ffff7b0
 8008be8:	1ffff7b4 	.word	0x1ffff7b4
 8008bec:	20000162 	.word	0x20000162
 8008bf0:	20000172 	.word	0x20000172

08008bf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c06:	2300      	movs	r3, #0
 8008c08:	75fb      	strb	r3, [r7, #23]
 8008c0a:	e027      	b.n	8008c5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	0f1b      	lsrs	r3, r3, #28
 8008c10:	2b09      	cmp	r3, #9
 8008c12:	d80b      	bhi.n	8008c2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	0f1b      	lsrs	r3, r3, #28
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	4619      	mov	r1, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	440b      	add	r3, r1
 8008c24:	3230      	adds	r2, #48	; 0x30
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	e00a      	b.n	8008c42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	0f1b      	lsrs	r3, r3, #28
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	4619      	mov	r1, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	440b      	add	r3, r1
 8008c3c:	3237      	adds	r2, #55	; 0x37
 8008c3e:	b2d2      	uxtb	r2, r2
 8008c40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	75fb      	strb	r3, [r7, #23]
 8008c5c:	7dfa      	ldrb	r2, [r7, #23]
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d3d3      	bcc.n	8008c0c <IntToUnicode+0x18>
  }
}
 8008c64:	bf00      	nop
 8008c66:	371c      	adds	r7, #28
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	; 0x28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	605a      	str	r2, [r3, #4]
 8008c82:	609a      	str	r2, [r3, #8]
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a1c      	ldr	r2, [pc, #112]	; (8008d00 <HAL_PCD_MspInit+0x90>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d131      	bne.n	8008cf6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c92:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <HAL_PCD_MspInit+0x94>)
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	4a1b      	ldr	r2, [pc, #108]	; (8008d04 <HAL_PCD_MspInit+0x94>)
 8008c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9c:	6153      	str	r3, [r2, #20]
 8008c9e:	4b19      	ldr	r3, [pc, #100]	; (8008d04 <HAL_PCD_MspInit+0x94>)
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca6:	613b      	str	r3, [r7, #16]
 8008ca8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8008caa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008cbc:	230e      	movs	r3, #14
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc0:	f107 0314 	add.w	r3, r7, #20
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008cca:	f7f8 fcab 	bl	8001624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <HAL_PCD_MspInit+0x94>)
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	4a0c      	ldr	r2, [pc, #48]	; (8008d04 <HAL_PCD_MspInit+0x94>)
 8008cd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cd8:	61d3      	str	r3, [r2, #28]
 8008cda:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <HAL_PCD_MspInit+0x94>)
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	2014      	movs	r0, #20
 8008cec:	f7f8 fc63 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008cf0:	2014      	movs	r0, #20
 8008cf2:	f7f8 fc7c 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008cf6:	bf00      	nop
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	40005c00 	.word	0x40005c00
 8008d04:	40021000 	.word	0x40021000

08008d08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7fe fdae 	bl	8007880 <USBD_LL_SetupStage>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	440b      	add	r3, r1
 8008d4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	4619      	mov	r1, r3
 8008d56:	f7fe fdde 	bl	8007916 <USBD_LL_DataOutStage>
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	440b      	add	r3, r1
 8008d82:	333c      	adds	r3, #60	; 0x3c
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	f7fe fe35 	bl	80079f8 <USBD_LL_DataInStage>
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe ff48 	bl	8007c3a <USBD_LL_SOF>
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d001      	beq.n	8008dca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008dc6:	f7f8 f937 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008dd0:	7bfa      	ldrb	r2, [r7, #15]
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe fef5 	bl	8007bc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe feae 	bl	8007b42 <USBD_LL_Reset>
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fef0 	bl	8007be4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e0c:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <HAL_PCD_SuspendCallback+0x30>)
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	4a03      	ldr	r2, [pc, #12]	; (8008e20 <HAL_PCD_SuspendCallback+0x30>)
 8008e12:	f043 0306 	orr.w	r3, r3, #6
 8008e16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	e000ed00 	.word	0xe000ed00

08008e24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe feeb 	bl	8007c0e <USBD_LL_Resume>
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e48:	4a28      	ldr	r2, [pc, #160]	; (8008eec <USBD_LL_Init+0xac>)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a26      	ldr	r2, [pc, #152]	; (8008eec <USBD_LL_Init+0xac>)
 8008e54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e58:	4b24      	ldr	r3, [pc, #144]	; (8008eec <USBD_LL_Init+0xac>)
 8008e5a:	4a25      	ldr	r2, [pc, #148]	; (8008ef0 <USBD_LL_Init+0xb0>)
 8008e5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e5e:	4b23      	ldr	r3, [pc, #140]	; (8008eec <USBD_LL_Init+0xac>)
 8008e60:	2208      	movs	r2, #8
 8008e62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e64:	4b21      	ldr	r3, [pc, #132]	; (8008eec <USBD_LL_Init+0xac>)
 8008e66:	2202      	movs	r2, #2
 8008e68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e6a:	4b20      	ldr	r3, [pc, #128]	; (8008eec <USBD_LL_Init+0xac>)
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e70:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <USBD_LL_Init+0xac>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e76:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <USBD_LL_Init+0xac>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e7c:	481b      	ldr	r0, [pc, #108]	; (8008eec <USBD_LL_Init+0xac>)
 8008e7e:	f7f9 fad4 	bl	800242a <HAL_PCD_Init>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e88:	f7f8 f8d6 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e92:	2318      	movs	r3, #24
 8008e94:	2200      	movs	r2, #0
 8008e96:	2100      	movs	r1, #0
 8008e98:	f7fa fd70 	bl	800397c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ea2:	2358      	movs	r3, #88	; 0x58
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2180      	movs	r1, #128	; 0x80
 8008ea8:	f7fa fd68 	bl	800397c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008eb2:	23c0      	movs	r3, #192	; 0xc0
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2181      	movs	r1, #129	; 0x81
 8008eb8:	f7fa fd60 	bl	800397c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ec2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2101      	movs	r1, #1
 8008eca:	f7fa fd57 	bl	800397c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2182      	movs	r1, #130	; 0x82
 8008edc:	f7fa fd4e 	bl	800397c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	200012e0 	.word	0x200012e0
 8008ef0:	40005c00 	.word	0x40005c00

08008ef4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7f9 fb6b 	bl	80025e6 <HAL_PCD_Start>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f954 	bl	80091c4 <USBD_Get_USB_Status>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	461a      	mov	r2, r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	70fb      	strb	r3, [r7, #3]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70bb      	strb	r3, [r7, #2]
 8008f40:	4613      	mov	r3, r2
 8008f42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f52:	78bb      	ldrb	r3, [r7, #2]
 8008f54:	883a      	ldrh	r2, [r7, #0]
 8008f56:	78f9      	ldrb	r1, [r7, #3]
 8008f58:	f7f9 fc87 	bl	800286a <HAL_PCD_EP_Open>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 f92e 	bl	80091c4 <USBD_Get_USB_Status>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7f9 fcce 	bl	8002936 <HAL_PCD_EP_Close>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f90f 	bl	80091c4 <USBD_Get_USB_Status>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7f9 fd8f 	bl	8002af6 <HAL_PCD_EP_SetStall>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f8f0 	bl	80091c4 <USBD_Get_USB_Status>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800900c:	78fa      	ldrb	r2, [r7, #3]
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f7f9 fdc2 	bl	8002b9a <HAL_PCD_EP_ClrStall>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f8d1 	bl	80091c4 <USBD_Get_USB_Status>
 8009022:	4603      	mov	r3, r0
 8009024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009026:	7bbb      	ldrb	r3, [r7, #14]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009042:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009048:	2b00      	cmp	r3, #0
 800904a:	da0c      	bge.n	8009066 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	440b      	add	r3, r1
 8009060:	3302      	adds	r3, #2
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	e00b      	b.n	800907e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009066:	78fb      	ldrb	r3, [r7, #3]
 8009068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800906c:	68f9      	ldr	r1, [r7, #12]
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	440b      	add	r3, r1
 8009078:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800907c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f9 fbb9 	bl	8002820 <HAL_PCD_SetAddress>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f885 	bl	80091c4 <USBD_Get_USB_Status>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090be:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	461a      	mov	r2, r3
 80090d4:	460b      	mov	r3, r1
 80090d6:	72fb      	strb	r3, [r7, #11]
 80090d8:	4613      	mov	r3, r2
 80090da:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090ea:	893b      	ldrh	r3, [r7, #8]
 80090ec:	7af9      	ldrb	r1, [r7, #11]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	f7f9 fcbe 	bl	8002a70 <HAL_PCD_EP_Transmit>
 80090f4:	4603      	mov	r3, r0
 80090f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f862 	bl	80091c4 <USBD_Get_USB_Status>
 8009100:	4603      	mov	r3, r0
 8009102:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009104:	7dbb      	ldrb	r3, [r7, #22]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b086      	sub	sp, #24
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	461a      	mov	r2, r3
 800911a:	460b      	mov	r3, r1
 800911c:	72fb      	strb	r3, [r7, #11]
 800911e:	4613      	mov	r3, r2
 8009120:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009130:	893b      	ldrh	r3, [r7, #8]
 8009132:	7af9      	ldrb	r1, [r7, #11]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	f7f9 fc46 	bl	80029c6 <HAL_PCD_EP_Receive>
 800913a:	4603      	mov	r3, r0
 800913c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f83f 	bl	80091c4 <USBD_Get_USB_Status>
 8009146:	4603      	mov	r3, r0
 8009148:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800914a:	7dbb      	ldrb	r3, [r7, #22]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009166:	78fa      	ldrb	r2, [r7, #3]
 8009168:	4611      	mov	r1, r2
 800916a:	4618      	mov	r0, r3
 800916c:	f7f9 fc68 	bl	8002a40 <HAL_PCD_EP_GetRxCount>
 8009170:	4603      	mov	r3, r0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009184:	4b03      	ldr	r3, [pc, #12]	; (8009194 <USBD_static_malloc+0x18>)
}
 8009186:	4618      	mov	r0, r3
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20000370 	.word	0x20000370

08009198 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]

}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d817      	bhi.n	8009208 <USBD_Get_USB_Status+0x44>
 80091d8:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <USBD_Get_USB_Status+0x1c>)
 80091da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091de:	bf00      	nop
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	080091f7 	.word	0x080091f7
 80091e8:	080091fd 	.word	0x080091fd
 80091ec:	08009203 	.word	0x08009203
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
    break;
 80091f4:	e00b      	b.n	800920e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091f6:	2302      	movs	r3, #2
 80091f8:	73fb      	strb	r3, [r7, #15]
    break;
 80091fa:	e008      	b.n	800920e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009200:	e005      	b.n	800920e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009202:	2302      	movs	r3, #2
 8009204:	73fb      	strb	r3, [r7, #15]
    break;
 8009206:	e002      	b.n	800920e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009208:	2302      	movs	r3, #2
 800920a:	73fb      	strb	r3, [r7, #15]
    break;
 800920c:	bf00      	nop
  }
  return usb_status;
 800920e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <__errno>:
 800921c:	4b01      	ldr	r3, [pc, #4]	; (8009224 <__errno+0x8>)
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	2000017c 	.word	0x2000017c

08009228 <__libc_init_array>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4e0d      	ldr	r6, [pc, #52]	; (8009260 <__libc_init_array+0x38>)
 800922c:	4c0d      	ldr	r4, [pc, #52]	; (8009264 <__libc_init_array+0x3c>)
 800922e:	1ba4      	subs	r4, r4, r6
 8009230:	10a4      	asrs	r4, r4, #2
 8009232:	2500      	movs	r5, #0
 8009234:	42a5      	cmp	r5, r4
 8009236:	d109      	bne.n	800924c <__libc_init_array+0x24>
 8009238:	4e0b      	ldr	r6, [pc, #44]	; (8009268 <__libc_init_array+0x40>)
 800923a:	4c0c      	ldr	r4, [pc, #48]	; (800926c <__libc_init_array+0x44>)
 800923c:	f002 f85c 	bl	800b2f8 <_init>
 8009240:	1ba4      	subs	r4, r4, r6
 8009242:	10a4      	asrs	r4, r4, #2
 8009244:	2500      	movs	r5, #0
 8009246:	42a5      	cmp	r5, r4
 8009248:	d105      	bne.n	8009256 <__libc_init_array+0x2e>
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009250:	4798      	blx	r3
 8009252:	3501      	adds	r5, #1
 8009254:	e7ee      	b.n	8009234 <__libc_init_array+0xc>
 8009256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800925a:	4798      	blx	r3
 800925c:	3501      	adds	r5, #1
 800925e:	e7f2      	b.n	8009246 <__libc_init_array+0x1e>
 8009260:	0800b5f8 	.word	0x0800b5f8
 8009264:	0800b5f8 	.word	0x0800b5f8
 8009268:	0800b5f8 	.word	0x0800b5f8
 800926c:	0800b5fc 	.word	0x0800b5fc

08009270 <memset>:
 8009270:	4402      	add	r2, r0
 8009272:	4603      	mov	r3, r0
 8009274:	4293      	cmp	r3, r2
 8009276:	d100      	bne.n	800927a <memset+0xa>
 8009278:	4770      	bx	lr
 800927a:	f803 1b01 	strb.w	r1, [r3], #1
 800927e:	e7f9      	b.n	8009274 <memset+0x4>

08009280 <__cvt>:
 8009280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	ec55 4b10 	vmov	r4, r5, d0
 8009288:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800928a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800928e:	2d00      	cmp	r5, #0
 8009290:	460e      	mov	r6, r1
 8009292:	4691      	mov	r9, r2
 8009294:	4619      	mov	r1, r3
 8009296:	bfb8      	it	lt
 8009298:	4622      	movlt	r2, r4
 800929a:	462b      	mov	r3, r5
 800929c:	f027 0720 	bic.w	r7, r7, #32
 80092a0:	bfbb      	ittet	lt
 80092a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092a6:	461d      	movlt	r5, r3
 80092a8:	2300      	movge	r3, #0
 80092aa:	232d      	movlt	r3, #45	; 0x2d
 80092ac:	bfb8      	it	lt
 80092ae:	4614      	movlt	r4, r2
 80092b0:	2f46      	cmp	r7, #70	; 0x46
 80092b2:	700b      	strb	r3, [r1, #0]
 80092b4:	d004      	beq.n	80092c0 <__cvt+0x40>
 80092b6:	2f45      	cmp	r7, #69	; 0x45
 80092b8:	d100      	bne.n	80092bc <__cvt+0x3c>
 80092ba:	3601      	adds	r6, #1
 80092bc:	2102      	movs	r1, #2
 80092be:	e000      	b.n	80092c2 <__cvt+0x42>
 80092c0:	2103      	movs	r1, #3
 80092c2:	ab03      	add	r3, sp, #12
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	ab02      	add	r3, sp, #8
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4632      	mov	r2, r6
 80092cc:	4653      	mov	r3, sl
 80092ce:	ec45 4b10 	vmov	d0, r4, r5
 80092d2:	f000 fcdd 	bl	8009c90 <_dtoa_r>
 80092d6:	2f47      	cmp	r7, #71	; 0x47
 80092d8:	4680      	mov	r8, r0
 80092da:	d102      	bne.n	80092e2 <__cvt+0x62>
 80092dc:	f019 0f01 	tst.w	r9, #1
 80092e0:	d026      	beq.n	8009330 <__cvt+0xb0>
 80092e2:	2f46      	cmp	r7, #70	; 0x46
 80092e4:	eb08 0906 	add.w	r9, r8, r6
 80092e8:	d111      	bne.n	800930e <__cvt+0x8e>
 80092ea:	f898 3000 	ldrb.w	r3, [r8]
 80092ee:	2b30      	cmp	r3, #48	; 0x30
 80092f0:	d10a      	bne.n	8009308 <__cvt+0x88>
 80092f2:	2200      	movs	r2, #0
 80092f4:	2300      	movs	r3, #0
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f7 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80092fe:	b918      	cbnz	r0, 8009308 <__cvt+0x88>
 8009300:	f1c6 0601 	rsb	r6, r6, #1
 8009304:	f8ca 6000 	str.w	r6, [sl]
 8009308:	f8da 3000 	ldr.w	r3, [sl]
 800930c:	4499      	add	r9, r3
 800930e:	2200      	movs	r2, #0
 8009310:	2300      	movs	r3, #0
 8009312:	4620      	mov	r0, r4
 8009314:	4629      	mov	r1, r5
 8009316:	f7f7 fbd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800931a:	b938      	cbnz	r0, 800932c <__cvt+0xac>
 800931c:	2230      	movs	r2, #48	; 0x30
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	454b      	cmp	r3, r9
 8009322:	d205      	bcs.n	8009330 <__cvt+0xb0>
 8009324:	1c59      	adds	r1, r3, #1
 8009326:	9103      	str	r1, [sp, #12]
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	e7f8      	b.n	800931e <__cvt+0x9e>
 800932c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009334:	eba3 0308 	sub.w	r3, r3, r8
 8009338:	4640      	mov	r0, r8
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	b004      	add	sp, #16
 800933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009342 <__exponent>:
 8009342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009344:	2900      	cmp	r1, #0
 8009346:	4604      	mov	r4, r0
 8009348:	bfba      	itte	lt
 800934a:	4249      	neglt	r1, r1
 800934c:	232d      	movlt	r3, #45	; 0x2d
 800934e:	232b      	movge	r3, #43	; 0x2b
 8009350:	2909      	cmp	r1, #9
 8009352:	f804 2b02 	strb.w	r2, [r4], #2
 8009356:	7043      	strb	r3, [r0, #1]
 8009358:	dd20      	ble.n	800939c <__exponent+0x5a>
 800935a:	f10d 0307 	add.w	r3, sp, #7
 800935e:	461f      	mov	r7, r3
 8009360:	260a      	movs	r6, #10
 8009362:	fb91 f5f6 	sdiv	r5, r1, r6
 8009366:	fb06 1115 	mls	r1, r6, r5, r1
 800936a:	3130      	adds	r1, #48	; 0x30
 800936c:	2d09      	cmp	r5, #9
 800936e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009372:	f103 32ff 	add.w	r2, r3, #4294967295
 8009376:	4629      	mov	r1, r5
 8009378:	dc09      	bgt.n	800938e <__exponent+0x4c>
 800937a:	3130      	adds	r1, #48	; 0x30
 800937c:	3b02      	subs	r3, #2
 800937e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009382:	42bb      	cmp	r3, r7
 8009384:	4622      	mov	r2, r4
 8009386:	d304      	bcc.n	8009392 <__exponent+0x50>
 8009388:	1a10      	subs	r0, r2, r0
 800938a:	b003      	add	sp, #12
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938e:	4613      	mov	r3, r2
 8009390:	e7e7      	b.n	8009362 <__exponent+0x20>
 8009392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009396:	f804 2b01 	strb.w	r2, [r4], #1
 800939a:	e7f2      	b.n	8009382 <__exponent+0x40>
 800939c:	2330      	movs	r3, #48	; 0x30
 800939e:	4419      	add	r1, r3
 80093a0:	7083      	strb	r3, [r0, #2]
 80093a2:	1d02      	adds	r2, r0, #4
 80093a4:	70c1      	strb	r1, [r0, #3]
 80093a6:	e7ef      	b.n	8009388 <__exponent+0x46>

080093a8 <_printf_float>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	b08d      	sub	sp, #52	; 0x34
 80093ae:	460c      	mov	r4, r1
 80093b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80093b4:	4616      	mov	r6, r2
 80093b6:	461f      	mov	r7, r3
 80093b8:	4605      	mov	r5, r0
 80093ba:	f001 fa21 	bl	800a800 <_localeconv_r>
 80093be:	6803      	ldr	r3, [r0, #0]
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f6 ff04 	bl	80001d0 <strlen>
 80093c8:	2300      	movs	r3, #0
 80093ca:	930a      	str	r3, [sp, #40]	; 0x28
 80093cc:	f8d8 3000 	ldr.w	r3, [r8]
 80093d0:	9005      	str	r0, [sp, #20]
 80093d2:	3307      	adds	r3, #7
 80093d4:	f023 0307 	bic.w	r3, r3, #7
 80093d8:	f103 0208 	add.w	r2, r3, #8
 80093dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80093e0:	f8d4 b000 	ldr.w	fp, [r4]
 80093e4:	f8c8 2000 	str.w	r2, [r8]
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80093fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009402:	4ba7      	ldr	r3, [pc, #668]	; (80096a0 <_printf_float+0x2f8>)
 8009404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009408:	f7f7 fb90 	bl	8000b2c <__aeabi_dcmpun>
 800940c:	bb70      	cbnz	r0, 800946c <_printf_float+0xc4>
 800940e:	f04f 32ff 	mov.w	r2, #4294967295
 8009412:	4ba3      	ldr	r3, [pc, #652]	; (80096a0 <_printf_float+0x2f8>)
 8009414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009418:	f7f7 fb6a 	bl	8000af0 <__aeabi_dcmple>
 800941c:	bb30      	cbnz	r0, 800946c <_printf_float+0xc4>
 800941e:	2200      	movs	r2, #0
 8009420:	2300      	movs	r3, #0
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f7 fb59 	bl	8000adc <__aeabi_dcmplt>
 800942a:	b110      	cbz	r0, 8009432 <_printf_float+0x8a>
 800942c:	232d      	movs	r3, #45	; 0x2d
 800942e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009432:	4a9c      	ldr	r2, [pc, #624]	; (80096a4 <_printf_float+0x2fc>)
 8009434:	4b9c      	ldr	r3, [pc, #624]	; (80096a8 <_printf_float+0x300>)
 8009436:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800943a:	bf8c      	ite	hi
 800943c:	4690      	movhi	r8, r2
 800943e:	4698      	movls	r8, r3
 8009440:	2303      	movs	r3, #3
 8009442:	f02b 0204 	bic.w	r2, fp, #4
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	f04f 0900 	mov.w	r9, #0
 800944e:	9700      	str	r7, [sp, #0]
 8009450:	4633      	mov	r3, r6
 8009452:	aa0b      	add	r2, sp, #44	; 0x2c
 8009454:	4621      	mov	r1, r4
 8009456:	4628      	mov	r0, r5
 8009458:	f000 f9e6 	bl	8009828 <_printf_common>
 800945c:	3001      	adds	r0, #1
 800945e:	f040 808d 	bne.w	800957c <_printf_float+0x1d4>
 8009462:	f04f 30ff 	mov.w	r0, #4294967295
 8009466:	b00d      	add	sp, #52	; 0x34
 8009468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946c:	4642      	mov	r2, r8
 800946e:	464b      	mov	r3, r9
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f7 fb5a 	bl	8000b2c <__aeabi_dcmpun>
 8009478:	b110      	cbz	r0, 8009480 <_printf_float+0xd8>
 800947a:	4a8c      	ldr	r2, [pc, #560]	; (80096ac <_printf_float+0x304>)
 800947c:	4b8c      	ldr	r3, [pc, #560]	; (80096b0 <_printf_float+0x308>)
 800947e:	e7da      	b.n	8009436 <_printf_float+0x8e>
 8009480:	6861      	ldr	r1, [r4, #4]
 8009482:	1c4b      	adds	r3, r1, #1
 8009484:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009488:	a80a      	add	r0, sp, #40	; 0x28
 800948a:	d13e      	bne.n	800950a <_printf_float+0x162>
 800948c:	2306      	movs	r3, #6
 800948e:	6063      	str	r3, [r4, #4]
 8009490:	2300      	movs	r3, #0
 8009492:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009496:	ab09      	add	r3, sp, #36	; 0x24
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	ec49 8b10 	vmov	d0, r8, r9
 800949e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	f8cd a004 	str.w	sl, [sp, #4]
 80094a8:	6861      	ldr	r1, [r4, #4]
 80094aa:	4628      	mov	r0, r5
 80094ac:	f7ff fee8 	bl	8009280 <__cvt>
 80094b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80094b4:	2b47      	cmp	r3, #71	; 0x47
 80094b6:	4680      	mov	r8, r0
 80094b8:	d109      	bne.n	80094ce <_printf_float+0x126>
 80094ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094bc:	1cd8      	adds	r0, r3, #3
 80094be:	db02      	blt.n	80094c6 <_printf_float+0x11e>
 80094c0:	6862      	ldr	r2, [r4, #4]
 80094c2:	4293      	cmp	r3, r2
 80094c4:	dd47      	ble.n	8009556 <_printf_float+0x1ae>
 80094c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80094ca:	fa5f fa8a 	uxtb.w	sl, sl
 80094ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80094d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094d4:	d824      	bhi.n	8009520 <_printf_float+0x178>
 80094d6:	3901      	subs	r1, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094de:	9109      	str	r1, [sp, #36]	; 0x24
 80094e0:	f7ff ff2f 	bl	8009342 <__exponent>
 80094e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094e6:	1813      	adds	r3, r2, r0
 80094e8:	2a01      	cmp	r2, #1
 80094ea:	4681      	mov	r9, r0
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	dc02      	bgt.n	80094f6 <_printf_float+0x14e>
 80094f0:	6822      	ldr	r2, [r4, #0]
 80094f2:	07d1      	lsls	r1, r2, #31
 80094f4:	d501      	bpl.n	80094fa <_printf_float+0x152>
 80094f6:	3301      	adds	r3, #1
 80094f8:	6123      	str	r3, [r4, #16]
 80094fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0a5      	beq.n	800944e <_printf_float+0xa6>
 8009502:	232d      	movs	r3, #45	; 0x2d
 8009504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009508:	e7a1      	b.n	800944e <_printf_float+0xa6>
 800950a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800950e:	f000 8177 	beq.w	8009800 <_printf_float+0x458>
 8009512:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009516:	d1bb      	bne.n	8009490 <_printf_float+0xe8>
 8009518:	2900      	cmp	r1, #0
 800951a:	d1b9      	bne.n	8009490 <_printf_float+0xe8>
 800951c:	2301      	movs	r3, #1
 800951e:	e7b6      	b.n	800948e <_printf_float+0xe6>
 8009520:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009524:	d119      	bne.n	800955a <_printf_float+0x1b2>
 8009526:	2900      	cmp	r1, #0
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	dd0c      	ble.n	8009546 <_printf_float+0x19e>
 800952c:	6121      	str	r1, [r4, #16]
 800952e:	b913      	cbnz	r3, 8009536 <_printf_float+0x18e>
 8009530:	6822      	ldr	r2, [r4, #0]
 8009532:	07d2      	lsls	r2, r2, #31
 8009534:	d502      	bpl.n	800953c <_printf_float+0x194>
 8009536:	3301      	adds	r3, #1
 8009538:	440b      	add	r3, r1
 800953a:	6123      	str	r3, [r4, #16]
 800953c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009540:	f04f 0900 	mov.w	r9, #0
 8009544:	e7d9      	b.n	80094fa <_printf_float+0x152>
 8009546:	b913      	cbnz	r3, 800954e <_printf_float+0x1a6>
 8009548:	6822      	ldr	r2, [r4, #0]
 800954a:	07d0      	lsls	r0, r2, #31
 800954c:	d501      	bpl.n	8009552 <_printf_float+0x1aa>
 800954e:	3302      	adds	r3, #2
 8009550:	e7f3      	b.n	800953a <_printf_float+0x192>
 8009552:	2301      	movs	r3, #1
 8009554:	e7f1      	b.n	800953a <_printf_float+0x192>
 8009556:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800955a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800955e:	4293      	cmp	r3, r2
 8009560:	db05      	blt.n	800956e <_printf_float+0x1c6>
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	07d1      	lsls	r1, r2, #31
 8009568:	d5e8      	bpl.n	800953c <_printf_float+0x194>
 800956a:	3301      	adds	r3, #1
 800956c:	e7e5      	b.n	800953a <_printf_float+0x192>
 800956e:	2b00      	cmp	r3, #0
 8009570:	bfd4      	ite	le
 8009572:	f1c3 0302 	rsble	r3, r3, #2
 8009576:	2301      	movgt	r3, #1
 8009578:	4413      	add	r3, r2
 800957a:	e7de      	b.n	800953a <_printf_float+0x192>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	055a      	lsls	r2, r3, #21
 8009580:	d407      	bmi.n	8009592 <_printf_float+0x1ea>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	4642      	mov	r2, r8
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	d12b      	bne.n	80095e8 <_printf_float+0x240>
 8009590:	e767      	b.n	8009462 <_printf_float+0xba>
 8009592:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009596:	f240 80dc 	bls.w	8009752 <_printf_float+0x3aa>
 800959a:	2200      	movs	r2, #0
 800959c:	2300      	movs	r3, #0
 800959e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095a2:	f7f7 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d033      	beq.n	8009612 <_printf_float+0x26a>
 80095aa:	2301      	movs	r3, #1
 80095ac:	4a41      	ldr	r2, [pc, #260]	; (80096b4 <_printf_float+0x30c>)
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	f43f af54 	beq.w	8009462 <_printf_float+0xba>
 80095ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095be:	429a      	cmp	r2, r3
 80095c0:	db02      	blt.n	80095c8 <_printf_float+0x220>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	07d8      	lsls	r0, r3, #31
 80095c6:	d50f      	bpl.n	80095e8 <_printf_float+0x240>
 80095c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095cc:	4631      	mov	r1, r6
 80095ce:	4628      	mov	r0, r5
 80095d0:	47b8      	blx	r7
 80095d2:	3001      	adds	r0, #1
 80095d4:	f43f af45 	beq.w	8009462 <_printf_float+0xba>
 80095d8:	f04f 0800 	mov.w	r8, #0
 80095dc:	f104 091a 	add.w	r9, r4, #26
 80095e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e2:	3b01      	subs	r3, #1
 80095e4:	4543      	cmp	r3, r8
 80095e6:	dc09      	bgt.n	80095fc <_printf_float+0x254>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	079b      	lsls	r3, r3, #30
 80095ec:	f100 8103 	bmi.w	80097f6 <_printf_float+0x44e>
 80095f0:	68e0      	ldr	r0, [r4, #12]
 80095f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f4:	4298      	cmp	r0, r3
 80095f6:	bfb8      	it	lt
 80095f8:	4618      	movlt	r0, r3
 80095fa:	e734      	b.n	8009466 <_printf_float+0xbe>
 80095fc:	2301      	movs	r3, #1
 80095fe:	464a      	mov	r2, r9
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af2b 	beq.w	8009462 <_printf_float+0xba>
 800960c:	f108 0801 	add.w	r8, r8, #1
 8009610:	e7e6      	b.n	80095e0 <_printf_float+0x238>
 8009612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	dc2b      	bgt.n	8009670 <_printf_float+0x2c8>
 8009618:	2301      	movs	r3, #1
 800961a:	4a26      	ldr	r2, [pc, #152]	; (80096b4 <_printf_float+0x30c>)
 800961c:	4631      	mov	r1, r6
 800961e:	4628      	mov	r0, r5
 8009620:	47b8      	blx	r7
 8009622:	3001      	adds	r0, #1
 8009624:	f43f af1d 	beq.w	8009462 <_printf_float+0xba>
 8009628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800962a:	b923      	cbnz	r3, 8009636 <_printf_float+0x28e>
 800962c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962e:	b913      	cbnz	r3, 8009636 <_printf_float+0x28e>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	d5d8      	bpl.n	80095e8 <_printf_float+0x240>
 8009636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	f43f af0e 	beq.w	8009462 <_printf_float+0xba>
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	f104 0a1a 	add.w	sl, r4, #26
 800964e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009650:	425b      	negs	r3, r3
 8009652:	454b      	cmp	r3, r9
 8009654:	dc01      	bgt.n	800965a <_printf_float+0x2b2>
 8009656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009658:	e794      	b.n	8009584 <_printf_float+0x1dc>
 800965a:	2301      	movs	r3, #1
 800965c:	4652      	mov	r2, sl
 800965e:	4631      	mov	r1, r6
 8009660:	4628      	mov	r0, r5
 8009662:	47b8      	blx	r7
 8009664:	3001      	adds	r0, #1
 8009666:	f43f aefc 	beq.w	8009462 <_printf_float+0xba>
 800966a:	f109 0901 	add.w	r9, r9, #1
 800966e:	e7ee      	b.n	800964e <_printf_float+0x2a6>
 8009670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009674:	429a      	cmp	r2, r3
 8009676:	bfa8      	it	ge
 8009678:	461a      	movge	r2, r3
 800967a:	2a00      	cmp	r2, #0
 800967c:	4691      	mov	r9, r2
 800967e:	dd07      	ble.n	8009690 <_printf_float+0x2e8>
 8009680:	4613      	mov	r3, r2
 8009682:	4631      	mov	r1, r6
 8009684:	4642      	mov	r2, r8
 8009686:	4628      	mov	r0, r5
 8009688:	47b8      	blx	r7
 800968a:	3001      	adds	r0, #1
 800968c:	f43f aee9 	beq.w	8009462 <_printf_float+0xba>
 8009690:	f104 031a 	add.w	r3, r4, #26
 8009694:	f04f 0b00 	mov.w	fp, #0
 8009698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800969c:	9306      	str	r3, [sp, #24]
 800969e:	e015      	b.n	80096cc <_printf_float+0x324>
 80096a0:	7fefffff 	.word	0x7fefffff
 80096a4:	0800b3a0 	.word	0x0800b3a0
 80096a8:	0800b39c 	.word	0x0800b39c
 80096ac:	0800b3a8 	.word	0x0800b3a8
 80096b0:	0800b3a4 	.word	0x0800b3a4
 80096b4:	0800b3ac 	.word	0x0800b3ac
 80096b8:	2301      	movs	r3, #1
 80096ba:	9a06      	ldr	r2, [sp, #24]
 80096bc:	4631      	mov	r1, r6
 80096be:	4628      	mov	r0, r5
 80096c0:	47b8      	blx	r7
 80096c2:	3001      	adds	r0, #1
 80096c4:	f43f aecd 	beq.w	8009462 <_printf_float+0xba>
 80096c8:	f10b 0b01 	add.w	fp, fp, #1
 80096cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80096d0:	ebaa 0309 	sub.w	r3, sl, r9
 80096d4:	455b      	cmp	r3, fp
 80096d6:	dcef      	bgt.n	80096b8 <_printf_float+0x310>
 80096d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096dc:	429a      	cmp	r2, r3
 80096de:	44d0      	add	r8, sl
 80096e0:	db15      	blt.n	800970e <_printf_float+0x366>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	07da      	lsls	r2, r3, #31
 80096e6:	d412      	bmi.n	800970e <_printf_float+0x366>
 80096e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096ec:	eba3 020a 	sub.w	r2, r3, sl
 80096f0:	eba3 0a01 	sub.w	sl, r3, r1
 80096f4:	4592      	cmp	sl, r2
 80096f6:	bfa8      	it	ge
 80096f8:	4692      	movge	sl, r2
 80096fa:	f1ba 0f00 	cmp.w	sl, #0
 80096fe:	dc0e      	bgt.n	800971e <_printf_float+0x376>
 8009700:	f04f 0800 	mov.w	r8, #0
 8009704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009708:	f104 091a 	add.w	r9, r4, #26
 800970c:	e019      	b.n	8009742 <_printf_float+0x39a>
 800970e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	47b8      	blx	r7
 8009718:	3001      	adds	r0, #1
 800971a:	d1e5      	bne.n	80096e8 <_printf_float+0x340>
 800971c:	e6a1      	b.n	8009462 <_printf_float+0xba>
 800971e:	4653      	mov	r3, sl
 8009720:	4642      	mov	r2, r8
 8009722:	4631      	mov	r1, r6
 8009724:	4628      	mov	r0, r5
 8009726:	47b8      	blx	r7
 8009728:	3001      	adds	r0, #1
 800972a:	d1e9      	bne.n	8009700 <_printf_float+0x358>
 800972c:	e699      	b.n	8009462 <_printf_float+0xba>
 800972e:	2301      	movs	r3, #1
 8009730:	464a      	mov	r2, r9
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	47b8      	blx	r7
 8009738:	3001      	adds	r0, #1
 800973a:	f43f ae92 	beq.w	8009462 <_printf_float+0xba>
 800973e:	f108 0801 	add.w	r8, r8, #1
 8009742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	eba3 030a 	sub.w	r3, r3, sl
 800974c:	4543      	cmp	r3, r8
 800974e:	dcee      	bgt.n	800972e <_printf_float+0x386>
 8009750:	e74a      	b.n	80095e8 <_printf_float+0x240>
 8009752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009754:	2a01      	cmp	r2, #1
 8009756:	dc01      	bgt.n	800975c <_printf_float+0x3b4>
 8009758:	07db      	lsls	r3, r3, #31
 800975a:	d53a      	bpl.n	80097d2 <_printf_float+0x42a>
 800975c:	2301      	movs	r3, #1
 800975e:	4642      	mov	r2, r8
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	f43f ae7b 	beq.w	8009462 <_printf_float+0xba>
 800976c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009770:	4631      	mov	r1, r6
 8009772:	4628      	mov	r0, r5
 8009774:	47b8      	blx	r7
 8009776:	3001      	adds	r0, #1
 8009778:	f108 0801 	add.w	r8, r8, #1
 800977c:	f43f ae71 	beq.w	8009462 <_printf_float+0xba>
 8009780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009782:	2200      	movs	r2, #0
 8009784:	f103 3aff 	add.w	sl, r3, #4294967295
 8009788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800978c:	2300      	movs	r3, #0
 800978e:	f7f7 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009792:	b9c8      	cbnz	r0, 80097c8 <_printf_float+0x420>
 8009794:	4653      	mov	r3, sl
 8009796:	4642      	mov	r2, r8
 8009798:	4631      	mov	r1, r6
 800979a:	4628      	mov	r0, r5
 800979c:	47b8      	blx	r7
 800979e:	3001      	adds	r0, #1
 80097a0:	d10e      	bne.n	80097c0 <_printf_float+0x418>
 80097a2:	e65e      	b.n	8009462 <_printf_float+0xba>
 80097a4:	2301      	movs	r3, #1
 80097a6:	4652      	mov	r2, sl
 80097a8:	4631      	mov	r1, r6
 80097aa:	4628      	mov	r0, r5
 80097ac:	47b8      	blx	r7
 80097ae:	3001      	adds	r0, #1
 80097b0:	f43f ae57 	beq.w	8009462 <_printf_float+0xba>
 80097b4:	f108 0801 	add.w	r8, r8, #1
 80097b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ba:	3b01      	subs	r3, #1
 80097bc:	4543      	cmp	r3, r8
 80097be:	dcf1      	bgt.n	80097a4 <_printf_float+0x3fc>
 80097c0:	464b      	mov	r3, r9
 80097c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097c6:	e6de      	b.n	8009586 <_printf_float+0x1de>
 80097c8:	f04f 0800 	mov.w	r8, #0
 80097cc:	f104 0a1a 	add.w	sl, r4, #26
 80097d0:	e7f2      	b.n	80097b8 <_printf_float+0x410>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e7df      	b.n	8009796 <_printf_float+0x3ee>
 80097d6:	2301      	movs	r3, #1
 80097d8:	464a      	mov	r2, r9
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	f43f ae3e 	beq.w	8009462 <_printf_float+0xba>
 80097e6:	f108 0801 	add.w	r8, r8, #1
 80097ea:	68e3      	ldr	r3, [r4, #12]
 80097ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097ee:	1a9b      	subs	r3, r3, r2
 80097f0:	4543      	cmp	r3, r8
 80097f2:	dcf0      	bgt.n	80097d6 <_printf_float+0x42e>
 80097f4:	e6fc      	b.n	80095f0 <_printf_float+0x248>
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	f104 0919 	add.w	r9, r4, #25
 80097fe:	e7f4      	b.n	80097ea <_printf_float+0x442>
 8009800:	2900      	cmp	r1, #0
 8009802:	f43f ae8b 	beq.w	800951c <_printf_float+0x174>
 8009806:	2300      	movs	r3, #0
 8009808:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800980c:	ab09      	add	r3, sp, #36	; 0x24
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	ec49 8b10 	vmov	d0, r8, r9
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	f8cd a004 	str.w	sl, [sp, #4]
 800981a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800981e:	4628      	mov	r0, r5
 8009820:	f7ff fd2e 	bl	8009280 <__cvt>
 8009824:	4680      	mov	r8, r0
 8009826:	e648      	b.n	80094ba <_printf_float+0x112>

08009828 <_printf_common>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	4691      	mov	r9, r2
 800982e:	461f      	mov	r7, r3
 8009830:	688a      	ldr	r2, [r1, #8]
 8009832:	690b      	ldr	r3, [r1, #16]
 8009834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009838:	4293      	cmp	r3, r2
 800983a:	bfb8      	it	lt
 800983c:	4613      	movlt	r3, r2
 800983e:	f8c9 3000 	str.w	r3, [r9]
 8009842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009846:	4606      	mov	r6, r0
 8009848:	460c      	mov	r4, r1
 800984a:	b112      	cbz	r2, 8009852 <_printf_common+0x2a>
 800984c:	3301      	adds	r3, #1
 800984e:	f8c9 3000 	str.w	r3, [r9]
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	0699      	lsls	r1, r3, #26
 8009856:	bf42      	ittt	mi
 8009858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800985c:	3302      	addmi	r3, #2
 800985e:	f8c9 3000 	strmi.w	r3, [r9]
 8009862:	6825      	ldr	r5, [r4, #0]
 8009864:	f015 0506 	ands.w	r5, r5, #6
 8009868:	d107      	bne.n	800987a <_printf_common+0x52>
 800986a:	f104 0a19 	add.w	sl, r4, #25
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	f8d9 2000 	ldr.w	r2, [r9]
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	42ab      	cmp	r3, r5
 8009878:	dc28      	bgt.n	80098cc <_printf_common+0xa4>
 800987a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	3300      	adds	r3, #0
 8009882:	bf18      	it	ne
 8009884:	2301      	movne	r3, #1
 8009886:	0692      	lsls	r2, r2, #26
 8009888:	d42d      	bmi.n	80098e6 <_printf_common+0xbe>
 800988a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800988e:	4639      	mov	r1, r7
 8009890:	4630      	mov	r0, r6
 8009892:	47c0      	blx	r8
 8009894:	3001      	adds	r0, #1
 8009896:	d020      	beq.n	80098da <_printf_common+0xb2>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	68e5      	ldr	r5, [r4, #12]
 800989c:	f8d9 2000 	ldr.w	r2, [r9]
 80098a0:	f003 0306 	and.w	r3, r3, #6
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	bf08      	it	eq
 80098a8:	1aad      	subeq	r5, r5, r2
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	6922      	ldr	r2, [r4, #16]
 80098ae:	bf0c      	ite	eq
 80098b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098b4:	2500      	movne	r5, #0
 80098b6:	4293      	cmp	r3, r2
 80098b8:	bfc4      	itt	gt
 80098ba:	1a9b      	subgt	r3, r3, r2
 80098bc:	18ed      	addgt	r5, r5, r3
 80098be:	f04f 0900 	mov.w	r9, #0
 80098c2:	341a      	adds	r4, #26
 80098c4:	454d      	cmp	r5, r9
 80098c6:	d11a      	bne.n	80098fe <_printf_common+0xd6>
 80098c8:	2000      	movs	r0, #0
 80098ca:	e008      	b.n	80098de <_printf_common+0xb6>
 80098cc:	2301      	movs	r3, #1
 80098ce:	4652      	mov	r2, sl
 80098d0:	4639      	mov	r1, r7
 80098d2:	4630      	mov	r0, r6
 80098d4:	47c0      	blx	r8
 80098d6:	3001      	adds	r0, #1
 80098d8:	d103      	bne.n	80098e2 <_printf_common+0xba>
 80098da:	f04f 30ff 	mov.w	r0, #4294967295
 80098de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e2:	3501      	adds	r5, #1
 80098e4:	e7c3      	b.n	800986e <_printf_common+0x46>
 80098e6:	18e1      	adds	r1, r4, r3
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	2030      	movs	r0, #48	; 0x30
 80098ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098f0:	4422      	add	r2, r4
 80098f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098fa:	3302      	adds	r3, #2
 80098fc:	e7c5      	b.n	800988a <_printf_common+0x62>
 80098fe:	2301      	movs	r3, #1
 8009900:	4622      	mov	r2, r4
 8009902:	4639      	mov	r1, r7
 8009904:	4630      	mov	r0, r6
 8009906:	47c0      	blx	r8
 8009908:	3001      	adds	r0, #1
 800990a:	d0e6      	beq.n	80098da <_printf_common+0xb2>
 800990c:	f109 0901 	add.w	r9, r9, #1
 8009910:	e7d8      	b.n	80098c4 <_printf_common+0x9c>
	...

08009914 <_printf_i>:
 8009914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800991c:	460c      	mov	r4, r1
 800991e:	7e09      	ldrb	r1, [r1, #24]
 8009920:	b085      	sub	sp, #20
 8009922:	296e      	cmp	r1, #110	; 0x6e
 8009924:	4617      	mov	r7, r2
 8009926:	4606      	mov	r6, r0
 8009928:	4698      	mov	r8, r3
 800992a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800992c:	f000 80b3 	beq.w	8009a96 <_printf_i+0x182>
 8009930:	d822      	bhi.n	8009978 <_printf_i+0x64>
 8009932:	2963      	cmp	r1, #99	; 0x63
 8009934:	d036      	beq.n	80099a4 <_printf_i+0x90>
 8009936:	d80a      	bhi.n	800994e <_printf_i+0x3a>
 8009938:	2900      	cmp	r1, #0
 800993a:	f000 80b9 	beq.w	8009ab0 <_printf_i+0x19c>
 800993e:	2958      	cmp	r1, #88	; 0x58
 8009940:	f000 8083 	beq.w	8009a4a <_printf_i+0x136>
 8009944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800994c:	e032      	b.n	80099b4 <_printf_i+0xa0>
 800994e:	2964      	cmp	r1, #100	; 0x64
 8009950:	d001      	beq.n	8009956 <_printf_i+0x42>
 8009952:	2969      	cmp	r1, #105	; 0x69
 8009954:	d1f6      	bne.n	8009944 <_printf_i+0x30>
 8009956:	6820      	ldr	r0, [r4, #0]
 8009958:	6813      	ldr	r3, [r2, #0]
 800995a:	0605      	lsls	r5, r0, #24
 800995c:	f103 0104 	add.w	r1, r3, #4
 8009960:	d52a      	bpl.n	80099b8 <_printf_i+0xa4>
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6011      	str	r1, [r2, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	da03      	bge.n	8009972 <_printf_i+0x5e>
 800996a:	222d      	movs	r2, #45	; 0x2d
 800996c:	425b      	negs	r3, r3
 800996e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009972:	486f      	ldr	r0, [pc, #444]	; (8009b30 <_printf_i+0x21c>)
 8009974:	220a      	movs	r2, #10
 8009976:	e039      	b.n	80099ec <_printf_i+0xd8>
 8009978:	2973      	cmp	r1, #115	; 0x73
 800997a:	f000 809d 	beq.w	8009ab8 <_printf_i+0x1a4>
 800997e:	d808      	bhi.n	8009992 <_printf_i+0x7e>
 8009980:	296f      	cmp	r1, #111	; 0x6f
 8009982:	d020      	beq.n	80099c6 <_printf_i+0xb2>
 8009984:	2970      	cmp	r1, #112	; 0x70
 8009986:	d1dd      	bne.n	8009944 <_printf_i+0x30>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	f043 0320 	orr.w	r3, r3, #32
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	e003      	b.n	800999a <_printf_i+0x86>
 8009992:	2975      	cmp	r1, #117	; 0x75
 8009994:	d017      	beq.n	80099c6 <_printf_i+0xb2>
 8009996:	2978      	cmp	r1, #120	; 0x78
 8009998:	d1d4      	bne.n	8009944 <_printf_i+0x30>
 800999a:	2378      	movs	r3, #120	; 0x78
 800999c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099a0:	4864      	ldr	r0, [pc, #400]	; (8009b34 <_printf_i+0x220>)
 80099a2:	e055      	b.n	8009a50 <_printf_i+0x13c>
 80099a4:	6813      	ldr	r3, [r2, #0]
 80099a6:	1d19      	adds	r1, r3, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6011      	str	r1, [r2, #0]
 80099ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b4:	2301      	movs	r3, #1
 80099b6:	e08c      	b.n	8009ad2 <_printf_i+0x1be>
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6011      	str	r1, [r2, #0]
 80099bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099c0:	bf18      	it	ne
 80099c2:	b21b      	sxthne	r3, r3
 80099c4:	e7cf      	b.n	8009966 <_printf_i+0x52>
 80099c6:	6813      	ldr	r3, [r2, #0]
 80099c8:	6825      	ldr	r5, [r4, #0]
 80099ca:	1d18      	adds	r0, r3, #4
 80099cc:	6010      	str	r0, [r2, #0]
 80099ce:	0628      	lsls	r0, r5, #24
 80099d0:	d501      	bpl.n	80099d6 <_printf_i+0xc2>
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	e002      	b.n	80099dc <_printf_i+0xc8>
 80099d6:	0668      	lsls	r0, r5, #25
 80099d8:	d5fb      	bpl.n	80099d2 <_printf_i+0xbe>
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	4854      	ldr	r0, [pc, #336]	; (8009b30 <_printf_i+0x21c>)
 80099de:	296f      	cmp	r1, #111	; 0x6f
 80099e0:	bf14      	ite	ne
 80099e2:	220a      	movne	r2, #10
 80099e4:	2208      	moveq	r2, #8
 80099e6:	2100      	movs	r1, #0
 80099e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099ec:	6865      	ldr	r5, [r4, #4]
 80099ee:	60a5      	str	r5, [r4, #8]
 80099f0:	2d00      	cmp	r5, #0
 80099f2:	f2c0 8095 	blt.w	8009b20 <_printf_i+0x20c>
 80099f6:	6821      	ldr	r1, [r4, #0]
 80099f8:	f021 0104 	bic.w	r1, r1, #4
 80099fc:	6021      	str	r1, [r4, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d13d      	bne.n	8009a7e <_printf_i+0x16a>
 8009a02:	2d00      	cmp	r5, #0
 8009a04:	f040 808e 	bne.w	8009b24 <_printf_i+0x210>
 8009a08:	4665      	mov	r5, ip
 8009a0a:	2a08      	cmp	r2, #8
 8009a0c:	d10b      	bne.n	8009a26 <_printf_i+0x112>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	07db      	lsls	r3, r3, #31
 8009a12:	d508      	bpl.n	8009a26 <_printf_i+0x112>
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	6862      	ldr	r2, [r4, #4]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	bfde      	ittt	le
 8009a1c:	2330      	movle	r3, #48	; 0x30
 8009a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a26:	ebac 0305 	sub.w	r3, ip, r5
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	f8cd 8000 	str.w	r8, [sp]
 8009a30:	463b      	mov	r3, r7
 8009a32:	aa03      	add	r2, sp, #12
 8009a34:	4621      	mov	r1, r4
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7ff fef6 	bl	8009828 <_printf_common>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d14d      	bne.n	8009adc <_printf_i+0x1c8>
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295
 8009a44:	b005      	add	sp, #20
 8009a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a4a:	4839      	ldr	r0, [pc, #228]	; (8009b30 <_printf_i+0x21c>)
 8009a4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009a50:	6813      	ldr	r3, [r2, #0]
 8009a52:	6821      	ldr	r1, [r4, #0]
 8009a54:	1d1d      	adds	r5, r3, #4
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6015      	str	r5, [r2, #0]
 8009a5a:	060a      	lsls	r2, r1, #24
 8009a5c:	d50b      	bpl.n	8009a76 <_printf_i+0x162>
 8009a5e:	07ca      	lsls	r2, r1, #31
 8009a60:	bf44      	itt	mi
 8009a62:	f041 0120 	orrmi.w	r1, r1, #32
 8009a66:	6021      	strmi	r1, [r4, #0]
 8009a68:	b91b      	cbnz	r3, 8009a72 <_printf_i+0x15e>
 8009a6a:	6822      	ldr	r2, [r4, #0]
 8009a6c:	f022 0220 	bic.w	r2, r2, #32
 8009a70:	6022      	str	r2, [r4, #0]
 8009a72:	2210      	movs	r2, #16
 8009a74:	e7b7      	b.n	80099e6 <_printf_i+0xd2>
 8009a76:	064d      	lsls	r5, r1, #25
 8009a78:	bf48      	it	mi
 8009a7a:	b29b      	uxthmi	r3, r3
 8009a7c:	e7ef      	b.n	8009a5e <_printf_i+0x14a>
 8009a7e:	4665      	mov	r5, ip
 8009a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a84:	fb02 3311 	mls	r3, r2, r1, r3
 8009a88:	5cc3      	ldrb	r3, [r0, r3]
 8009a8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a8e:	460b      	mov	r3, r1
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d1f5      	bne.n	8009a80 <_printf_i+0x16c>
 8009a94:	e7b9      	b.n	8009a0a <_printf_i+0xf6>
 8009a96:	6813      	ldr	r3, [r2, #0]
 8009a98:	6825      	ldr	r5, [r4, #0]
 8009a9a:	6961      	ldr	r1, [r4, #20]
 8009a9c:	1d18      	adds	r0, r3, #4
 8009a9e:	6010      	str	r0, [r2, #0]
 8009aa0:	0628      	lsls	r0, r5, #24
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	d501      	bpl.n	8009aaa <_printf_i+0x196>
 8009aa6:	6019      	str	r1, [r3, #0]
 8009aa8:	e002      	b.n	8009ab0 <_printf_i+0x19c>
 8009aaa:	066a      	lsls	r2, r5, #25
 8009aac:	d5fb      	bpl.n	8009aa6 <_printf_i+0x192>
 8009aae:	8019      	strh	r1, [r3, #0]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6123      	str	r3, [r4, #16]
 8009ab4:	4665      	mov	r5, ip
 8009ab6:	e7b9      	b.n	8009a2c <_printf_i+0x118>
 8009ab8:	6813      	ldr	r3, [r2, #0]
 8009aba:	1d19      	adds	r1, r3, #4
 8009abc:	6011      	str	r1, [r2, #0]
 8009abe:	681d      	ldr	r5, [r3, #0]
 8009ac0:	6862      	ldr	r2, [r4, #4]
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f7f6 fb8b 	bl	80001e0 <memchr>
 8009aca:	b108      	cbz	r0, 8009ad0 <_printf_i+0x1bc>
 8009acc:	1b40      	subs	r0, r0, r5
 8009ace:	6060      	str	r0, [r4, #4]
 8009ad0:	6863      	ldr	r3, [r4, #4]
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ada:	e7a7      	b.n	8009a2c <_printf_i+0x118>
 8009adc:	6923      	ldr	r3, [r4, #16]
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	47c0      	blx	r8
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d0aa      	beq.n	8009a40 <_printf_i+0x12c>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	079b      	lsls	r3, r3, #30
 8009aee:	d413      	bmi.n	8009b18 <_printf_i+0x204>
 8009af0:	68e0      	ldr	r0, [r4, #12]
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	4298      	cmp	r0, r3
 8009af6:	bfb8      	it	lt
 8009af8:	4618      	movlt	r0, r3
 8009afa:	e7a3      	b.n	8009a44 <_printf_i+0x130>
 8009afc:	2301      	movs	r3, #1
 8009afe:	464a      	mov	r2, r9
 8009b00:	4639      	mov	r1, r7
 8009b02:	4630      	mov	r0, r6
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d09a      	beq.n	8009a40 <_printf_i+0x12c>
 8009b0a:	3501      	adds	r5, #1
 8009b0c:	68e3      	ldr	r3, [r4, #12]
 8009b0e:	9a03      	ldr	r2, [sp, #12]
 8009b10:	1a9b      	subs	r3, r3, r2
 8009b12:	42ab      	cmp	r3, r5
 8009b14:	dcf2      	bgt.n	8009afc <_printf_i+0x1e8>
 8009b16:	e7eb      	b.n	8009af0 <_printf_i+0x1dc>
 8009b18:	2500      	movs	r5, #0
 8009b1a:	f104 0919 	add.w	r9, r4, #25
 8009b1e:	e7f5      	b.n	8009b0c <_printf_i+0x1f8>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1ac      	bne.n	8009a7e <_printf_i+0x16a>
 8009b24:	7803      	ldrb	r3, [r0, #0]
 8009b26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b2e:	e76c      	b.n	8009a0a <_printf_i+0xf6>
 8009b30:	0800b3ae 	.word	0x0800b3ae
 8009b34:	0800b3bf 	.word	0x0800b3bf

08009b38 <siprintf>:
 8009b38:	b40e      	push	{r1, r2, r3}
 8009b3a:	b500      	push	{lr}
 8009b3c:	b09c      	sub	sp, #112	; 0x70
 8009b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b40:	9002      	str	r0, [sp, #8]
 8009b42:	9006      	str	r0, [sp, #24]
 8009b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b48:	4809      	ldr	r0, [pc, #36]	; (8009b70 <siprintf+0x38>)
 8009b4a:	9107      	str	r1, [sp, #28]
 8009b4c:	9104      	str	r1, [sp, #16]
 8009b4e:	4909      	ldr	r1, [pc, #36]	; (8009b74 <siprintf+0x3c>)
 8009b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b54:	9105      	str	r1, [sp, #20]
 8009b56:	6800      	ldr	r0, [r0, #0]
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	a902      	add	r1, sp, #8
 8009b5c:	f001 fa5c 	bl	800b018 <_svfiprintf_r>
 8009b60:	9b02      	ldr	r3, [sp, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	b01c      	add	sp, #112	; 0x70
 8009b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b6c:	b003      	add	sp, #12
 8009b6e:	4770      	bx	lr
 8009b70:	2000017c 	.word	0x2000017c
 8009b74:	ffff0208 	.word	0xffff0208

08009b78 <quorem>:
 8009b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	6903      	ldr	r3, [r0, #16]
 8009b7e:	690c      	ldr	r4, [r1, #16]
 8009b80:	42a3      	cmp	r3, r4
 8009b82:	4680      	mov	r8, r0
 8009b84:	f2c0 8082 	blt.w	8009c8c <quorem+0x114>
 8009b88:	3c01      	subs	r4, #1
 8009b8a:	f101 0714 	add.w	r7, r1, #20
 8009b8e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b92:	f100 0614 	add.w	r6, r0, #20
 8009b96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009b9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009b9e:	eb06 030c 	add.w	r3, r6, ip
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	eb07 090c 	add.w	r9, r7, ip
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	fbb0 f5f5 	udiv	r5, r0, r5
 8009bae:	b395      	cbz	r5, 8009c16 <quorem+0x9e>
 8009bb0:	f04f 0a00 	mov.w	sl, #0
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	46b6      	mov	lr, r6
 8009bb8:	46d3      	mov	fp, sl
 8009bba:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bbe:	b293      	uxth	r3, r2
 8009bc0:	fb05 a303 	mla	r3, r5, r3, sl
 8009bc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	ebab 0303 	sub.w	r3, fp, r3
 8009bce:	0c12      	lsrs	r2, r2, #16
 8009bd0:	f8de b000 	ldr.w	fp, [lr]
 8009bd4:	fb05 a202 	mla	r2, r5, r2, sl
 8009bd8:	fa13 f38b 	uxtah	r3, r3, fp
 8009bdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009be0:	fa1f fb82 	uxth.w	fp, r2
 8009be4:	f8de 2000 	ldr.w	r2, [lr]
 8009be8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bf6:	4581      	cmp	r9, r0
 8009bf8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009bfc:	f84e 3b04 	str.w	r3, [lr], #4
 8009c00:	d2db      	bcs.n	8009bba <quorem+0x42>
 8009c02:	f856 300c 	ldr.w	r3, [r6, ip]
 8009c06:	b933      	cbnz	r3, 8009c16 <quorem+0x9e>
 8009c08:	9b01      	ldr	r3, [sp, #4]
 8009c0a:	3b04      	subs	r3, #4
 8009c0c:	429e      	cmp	r6, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	d330      	bcc.n	8009c74 <quorem+0xfc>
 8009c12:	f8c8 4010 	str.w	r4, [r8, #16]
 8009c16:	4640      	mov	r0, r8
 8009c18:	f001 f828 	bl	800ac6c <__mcmp>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	db25      	blt.n	8009c6c <quorem+0xf4>
 8009c20:	3501      	adds	r5, #1
 8009c22:	4630      	mov	r0, r6
 8009c24:	f04f 0c00 	mov.w	ip, #0
 8009c28:	f857 2b04 	ldr.w	r2, [r7], #4
 8009c2c:	f8d0 e000 	ldr.w	lr, [r0]
 8009c30:	b293      	uxth	r3, r2
 8009c32:	ebac 0303 	sub.w	r3, ip, r3
 8009c36:	0c12      	lsrs	r2, r2, #16
 8009c38:	fa13 f38e 	uxtah	r3, r3, lr
 8009c3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c4a:	45b9      	cmp	r9, r7
 8009c4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c50:	f840 3b04 	str.w	r3, [r0], #4
 8009c54:	d2e8      	bcs.n	8009c28 <quorem+0xb0>
 8009c56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009c5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009c5e:	b92a      	cbnz	r2, 8009c6c <quorem+0xf4>
 8009c60:	3b04      	subs	r3, #4
 8009c62:	429e      	cmp	r6, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	d30b      	bcc.n	8009c80 <quorem+0x108>
 8009c68:	f8c8 4010 	str.w	r4, [r8, #16]
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	b003      	add	sp, #12
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	6812      	ldr	r2, [r2, #0]
 8009c76:	3b04      	subs	r3, #4
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	d1ca      	bne.n	8009c12 <quorem+0x9a>
 8009c7c:	3c01      	subs	r4, #1
 8009c7e:	e7c5      	b.n	8009c0c <quorem+0x94>
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	3b04      	subs	r3, #4
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	d1ef      	bne.n	8009c68 <quorem+0xf0>
 8009c88:	3c01      	subs	r4, #1
 8009c8a:	e7ea      	b.n	8009c62 <quorem+0xea>
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e7ee      	b.n	8009c6e <quorem+0xf6>

08009c90 <_dtoa_r>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	ec57 6b10 	vmov	r6, r7, d0
 8009c98:	b097      	sub	sp, #92	; 0x5c
 8009c9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c9c:	9106      	str	r1, [sp, #24]
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ca2:	9312      	str	r3, [sp, #72]	; 0x48
 8009ca4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ca8:	e9cd 6700 	strd	r6, r7, [sp]
 8009cac:	b93d      	cbnz	r5, 8009cbe <_dtoa_r+0x2e>
 8009cae:	2010      	movs	r0, #16
 8009cb0:	f000 fdb4 	bl	800a81c <malloc>
 8009cb4:	6260      	str	r0, [r4, #36]	; 0x24
 8009cb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cba:	6005      	str	r5, [r0, #0]
 8009cbc:	60c5      	str	r5, [r0, #12]
 8009cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc0:	6819      	ldr	r1, [r3, #0]
 8009cc2:	b151      	cbz	r1, 8009cda <_dtoa_r+0x4a>
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	604a      	str	r2, [r1, #4]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4093      	lsls	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 fdeb 	bl	800a8aa <_Bfree>
 8009cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	1e3b      	subs	r3, r7, #0
 8009cdc:	bfbb      	ittet	lt
 8009cde:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ce2:	9301      	strlt	r3, [sp, #4]
 8009ce4:	2300      	movge	r3, #0
 8009ce6:	2201      	movlt	r2, #1
 8009ce8:	bfac      	ite	ge
 8009cea:	f8c8 3000 	strge.w	r3, [r8]
 8009cee:	f8c8 2000 	strlt.w	r2, [r8]
 8009cf2:	4baf      	ldr	r3, [pc, #700]	; (8009fb0 <_dtoa_r+0x320>)
 8009cf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009cf8:	ea33 0308 	bics.w	r3, r3, r8
 8009cfc:	d114      	bne.n	8009d28 <_dtoa_r+0x98>
 8009cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d00:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	b923      	cbnz	r3, 8009d14 <_dtoa_r+0x84>
 8009d0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f000 8542 	beq.w	800a798 <_dtoa_r+0xb08>
 8009d14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009fc4 <_dtoa_r+0x334>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 8544 	beq.w	800a7a8 <_dtoa_r+0xb18>
 8009d20:	f10b 0303 	add.w	r3, fp, #3
 8009d24:	f000 bd3e 	b.w	800a7a4 <_dtoa_r+0xb14>
 8009d28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d38:	4681      	mov	r9, r0
 8009d3a:	b168      	cbz	r0, 8009d58 <_dtoa_r+0xc8>
 8009d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d3e:	2301      	movs	r3, #1
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 8524 	beq.w	800a792 <_dtoa_r+0xb02>
 8009d4a:	4b9a      	ldr	r3, [pc, #616]	; (8009fb4 <_dtoa_r+0x324>)
 8009d4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d4e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	f000 bd28 	b.w	800a7a8 <_dtoa_r+0xb18>
 8009d58:	aa14      	add	r2, sp, #80	; 0x50
 8009d5a:	a915      	add	r1, sp, #84	; 0x54
 8009d5c:	ec47 6b10 	vmov	d0, r6, r7
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 fffa 	bl	800ad5a <__d2b>
 8009d66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009d6a:	9004      	str	r0, [sp, #16]
 8009d6c:	2d00      	cmp	r5, #0
 8009d6e:	d07c      	beq.n	8009e6a <_dtoa_r+0x1da>
 8009d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009d78:	46b2      	mov	sl, r6
 8009d7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009d86:	2200      	movs	r2, #0
 8009d88:	4b8b      	ldr	r3, [pc, #556]	; (8009fb8 <_dtoa_r+0x328>)
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	f7f6 fa7b 	bl	8000288 <__aeabi_dsub>
 8009d92:	a381      	add	r3, pc, #516	; (adr r3, 8009f98 <_dtoa_r+0x308>)
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f7f6 fc2e 	bl	80005f8 <__aeabi_dmul>
 8009d9c:	a380      	add	r3, pc, #512	; (adr r3, 8009fa0 <_dtoa_r+0x310>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 fa73 	bl	800028c <__adddf3>
 8009da6:	4606      	mov	r6, r0
 8009da8:	4628      	mov	r0, r5
 8009daa:	460f      	mov	r7, r1
 8009dac:	f7f6 fbba 	bl	8000524 <__aeabi_i2d>
 8009db0:	a37d      	add	r3, pc, #500	; (adr r3, 8009fa8 <_dtoa_r+0x318>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fc1f 	bl	80005f8 <__aeabi_dmul>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	460f      	mov	r7, r1
 8009dca:	f7f6 fec5 	bl	8000b58 <__aeabi_d2iz>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	f7f6 fe80 	bl	8000adc <__aeabi_dcmplt>
 8009ddc:	b148      	cbz	r0, 8009df2 <_dtoa_r+0x162>
 8009dde:	4650      	mov	r0, sl
 8009de0:	f7f6 fba0 	bl	8000524 <__aeabi_i2d>
 8009de4:	4632      	mov	r2, r6
 8009de6:	463b      	mov	r3, r7
 8009de8:	f7f6 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dec:	b908      	cbnz	r0, 8009df2 <_dtoa_r+0x162>
 8009dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009df2:	f1ba 0f16 	cmp.w	sl, #22
 8009df6:	d859      	bhi.n	8009eac <_dtoa_r+0x21c>
 8009df8:	4970      	ldr	r1, [pc, #448]	; (8009fbc <_dtoa_r+0x32c>)
 8009dfa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e06:	f7f6 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d050      	beq.n	8009eb0 <_dtoa_r+0x220>
 8009e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e12:	2300      	movs	r3, #0
 8009e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e18:	1b5d      	subs	r5, r3, r5
 8009e1a:	f1b5 0801 	subs.w	r8, r5, #1
 8009e1e:	bf49      	itett	mi
 8009e20:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e24:	2300      	movpl	r3, #0
 8009e26:	9305      	strmi	r3, [sp, #20]
 8009e28:	f04f 0800 	movmi.w	r8, #0
 8009e2c:	bf58      	it	pl
 8009e2e:	9305      	strpl	r3, [sp, #20]
 8009e30:	f1ba 0f00 	cmp.w	sl, #0
 8009e34:	db3e      	blt.n	8009eb4 <_dtoa_r+0x224>
 8009e36:	2300      	movs	r3, #0
 8009e38:	44d0      	add	r8, sl
 8009e3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009e3e:	9307      	str	r3, [sp, #28]
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	2b09      	cmp	r3, #9
 8009e44:	f200 8090 	bhi.w	8009f68 <_dtoa_r+0x2d8>
 8009e48:	2b05      	cmp	r3, #5
 8009e4a:	bfc4      	itt	gt
 8009e4c:	3b04      	subgt	r3, #4
 8009e4e:	9306      	strgt	r3, [sp, #24]
 8009e50:	9b06      	ldr	r3, [sp, #24]
 8009e52:	f1a3 0302 	sub.w	r3, r3, #2
 8009e56:	bfcc      	ite	gt
 8009e58:	2500      	movgt	r5, #0
 8009e5a:	2501      	movle	r5, #1
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	f200 808f 	bhi.w	8009f80 <_dtoa_r+0x2f0>
 8009e62:	e8df f003 	tbb	[pc, r3]
 8009e66:	7f7d      	.short	0x7f7d
 8009e68:	7131      	.short	0x7131
 8009e6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009e6e:	441d      	add	r5, r3
 8009e70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009e74:	2820      	cmp	r0, #32
 8009e76:	dd13      	ble.n	8009ea0 <_dtoa_r+0x210>
 8009e78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009e7c:	9b00      	ldr	r3, [sp, #0]
 8009e7e:	fa08 f800 	lsl.w	r8, r8, r0
 8009e82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009e86:	fa23 f000 	lsr.w	r0, r3, r0
 8009e8a:	ea48 0000 	orr.w	r0, r8, r0
 8009e8e:	f7f6 fb39 	bl	8000504 <__aeabi_ui2d>
 8009e92:	2301      	movs	r3, #1
 8009e94:	4682      	mov	sl, r0
 8009e96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009e9a:	3d01      	subs	r5, #1
 8009e9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e9e:	e772      	b.n	8009d86 <_dtoa_r+0xf6>
 8009ea0:	9b00      	ldr	r3, [sp, #0]
 8009ea2:	f1c0 0020 	rsb	r0, r0, #32
 8009ea6:	fa03 f000 	lsl.w	r0, r3, r0
 8009eaa:	e7f0      	b.n	8009e8e <_dtoa_r+0x1fe>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e7b1      	b.n	8009e14 <_dtoa_r+0x184>
 8009eb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8009eb2:	e7b0      	b.n	8009e16 <_dtoa_r+0x186>
 8009eb4:	9b05      	ldr	r3, [sp, #20]
 8009eb6:	eba3 030a 	sub.w	r3, r3, sl
 8009eba:	9305      	str	r3, [sp, #20]
 8009ebc:	f1ca 0300 	rsb	r3, sl, #0
 8009ec0:	9307      	str	r3, [sp, #28]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ec6:	e7bb      	b.n	8009e40 <_dtoa_r+0x1b0>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	930a      	str	r3, [sp, #40]	; 0x28
 8009ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	dd59      	ble.n	8009f86 <_dtoa_r+0x2f6>
 8009ed2:	9302      	str	r3, [sp, #8]
 8009ed4:	4699      	mov	r9, r3
 8009ed6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ed8:	2200      	movs	r2, #0
 8009eda:	6072      	str	r2, [r6, #4]
 8009edc:	2204      	movs	r2, #4
 8009ede:	f102 0014 	add.w	r0, r2, #20
 8009ee2:	4298      	cmp	r0, r3
 8009ee4:	6871      	ldr	r1, [r6, #4]
 8009ee6:	d953      	bls.n	8009f90 <_dtoa_r+0x300>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 fcaa 	bl	800a842 <_Balloc>
 8009eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ef0:	6030      	str	r0, [r6, #0]
 8009ef2:	f1b9 0f0e 	cmp.w	r9, #14
 8009ef6:	f8d3 b000 	ldr.w	fp, [r3]
 8009efa:	f200 80e6 	bhi.w	800a0ca <_dtoa_r+0x43a>
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	f000 80e3 	beq.w	800a0ca <_dtoa_r+0x43a>
 8009f04:	ed9d 7b00 	vldr	d7, [sp]
 8009f08:	f1ba 0f00 	cmp.w	sl, #0
 8009f0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009f10:	dd74      	ble.n	8009ffc <_dtoa_r+0x36c>
 8009f12:	4a2a      	ldr	r2, [pc, #168]	; (8009fbc <_dtoa_r+0x32c>)
 8009f14:	f00a 030f 	and.w	r3, sl, #15
 8009f18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f1c:	ed93 7b00 	vldr	d7, [r3]
 8009f20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009f24:	06f0      	lsls	r0, r6, #27
 8009f26:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009f2a:	d565      	bpl.n	8009ff8 <_dtoa_r+0x368>
 8009f2c:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <_dtoa_r+0x330>)
 8009f2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f36:	f7f6 fc89 	bl	800084c <__aeabi_ddiv>
 8009f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f3e:	f006 060f 	and.w	r6, r6, #15
 8009f42:	2503      	movs	r5, #3
 8009f44:	4f1e      	ldr	r7, [pc, #120]	; (8009fc0 <_dtoa_r+0x330>)
 8009f46:	e04c      	b.n	8009fe2 <_dtoa_r+0x352>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4e:	4453      	add	r3, sl
 8009f50:	f103 0901 	add.w	r9, r3, #1
 8009f54:	9302      	str	r3, [sp, #8]
 8009f56:	464b      	mov	r3, r9
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	bfb8      	it	lt
 8009f5c:	2301      	movlt	r3, #1
 8009f5e:	e7ba      	b.n	8009ed6 <_dtoa_r+0x246>
 8009f60:	2300      	movs	r3, #0
 8009f62:	e7b2      	b.n	8009eca <_dtoa_r+0x23a>
 8009f64:	2300      	movs	r3, #0
 8009f66:	e7f0      	b.n	8009f4a <_dtoa_r+0x2ba>
 8009f68:	2501      	movs	r5, #1
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9306      	str	r3, [sp, #24]
 8009f6e:	950a      	str	r5, [sp, #40]	; 0x28
 8009f70:	f04f 33ff 	mov.w	r3, #4294967295
 8009f74:	9302      	str	r3, [sp, #8]
 8009f76:	4699      	mov	r9, r3
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2312      	movs	r3, #18
 8009f7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f7e:	e7aa      	b.n	8009ed6 <_dtoa_r+0x246>
 8009f80:	2301      	movs	r3, #1
 8009f82:	930a      	str	r3, [sp, #40]	; 0x28
 8009f84:	e7f4      	b.n	8009f70 <_dtoa_r+0x2e0>
 8009f86:	2301      	movs	r3, #1
 8009f88:	9302      	str	r3, [sp, #8]
 8009f8a:	4699      	mov	r9, r3
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	e7f5      	b.n	8009f7c <_dtoa_r+0x2ec>
 8009f90:	3101      	adds	r1, #1
 8009f92:	6071      	str	r1, [r6, #4]
 8009f94:	0052      	lsls	r2, r2, #1
 8009f96:	e7a2      	b.n	8009ede <_dtoa_r+0x24e>
 8009f98:	636f4361 	.word	0x636f4361
 8009f9c:	3fd287a7 	.word	0x3fd287a7
 8009fa0:	8b60c8b3 	.word	0x8b60c8b3
 8009fa4:	3fc68a28 	.word	0x3fc68a28
 8009fa8:	509f79fb 	.word	0x509f79fb
 8009fac:	3fd34413 	.word	0x3fd34413
 8009fb0:	7ff00000 	.word	0x7ff00000
 8009fb4:	0800b3ad 	.word	0x0800b3ad
 8009fb8:	3ff80000 	.word	0x3ff80000
 8009fbc:	0800b408 	.word	0x0800b408
 8009fc0:	0800b3e0 	.word	0x0800b3e0
 8009fc4:	0800b3d9 	.word	0x0800b3d9
 8009fc8:	07f1      	lsls	r1, r6, #31
 8009fca:	d508      	bpl.n	8009fde <_dtoa_r+0x34e>
 8009fcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fd4:	f7f6 fb10 	bl	80005f8 <__aeabi_dmul>
 8009fd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fdc:	3501      	adds	r5, #1
 8009fde:	1076      	asrs	r6, r6, #1
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	d1f0      	bne.n	8009fc8 <_dtoa_r+0x338>
 8009fe6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fee:	f7f6 fc2d 	bl	800084c <__aeabi_ddiv>
 8009ff2:	e9cd 0100 	strd	r0, r1, [sp]
 8009ff6:	e01a      	b.n	800a02e <_dtoa_r+0x39e>
 8009ff8:	2502      	movs	r5, #2
 8009ffa:	e7a3      	b.n	8009f44 <_dtoa_r+0x2b4>
 8009ffc:	f000 80a0 	beq.w	800a140 <_dtoa_r+0x4b0>
 800a000:	f1ca 0600 	rsb	r6, sl, #0
 800a004:	4b9f      	ldr	r3, [pc, #636]	; (800a284 <_dtoa_r+0x5f4>)
 800a006:	4fa0      	ldr	r7, [pc, #640]	; (800a288 <_dtoa_r+0x5f8>)
 800a008:	f006 020f 	and.w	r2, r6, #15
 800a00c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a018:	f7f6 faee 	bl	80005f8 <__aeabi_dmul>
 800a01c:	e9cd 0100 	strd	r0, r1, [sp]
 800a020:	1136      	asrs	r6, r6, #4
 800a022:	2300      	movs	r3, #0
 800a024:	2502      	movs	r5, #2
 800a026:	2e00      	cmp	r6, #0
 800a028:	d17f      	bne.n	800a12a <_dtoa_r+0x49a>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e1      	bne.n	8009ff2 <_dtoa_r+0x362>
 800a02e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 8087 	beq.w	800a144 <_dtoa_r+0x4b4>
 800a036:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a03a:	2200      	movs	r2, #0
 800a03c:	4b93      	ldr	r3, [pc, #588]	; (800a28c <_dtoa_r+0x5fc>)
 800a03e:	4630      	mov	r0, r6
 800a040:	4639      	mov	r1, r7
 800a042:	f7f6 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800a046:	2800      	cmp	r0, #0
 800a048:	d07c      	beq.n	800a144 <_dtoa_r+0x4b4>
 800a04a:	f1b9 0f00 	cmp.w	r9, #0
 800a04e:	d079      	beq.n	800a144 <_dtoa_r+0x4b4>
 800a050:	9b02      	ldr	r3, [sp, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	dd35      	ble.n	800a0c2 <_dtoa_r+0x432>
 800a056:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a05a:	9308      	str	r3, [sp, #32]
 800a05c:	4639      	mov	r1, r7
 800a05e:	2200      	movs	r2, #0
 800a060:	4b8b      	ldr	r3, [pc, #556]	; (800a290 <_dtoa_r+0x600>)
 800a062:	4630      	mov	r0, r6
 800a064:	f7f6 fac8 	bl	80005f8 <__aeabi_dmul>
 800a068:	e9cd 0100 	strd	r0, r1, [sp]
 800a06c:	9f02      	ldr	r7, [sp, #8]
 800a06e:	3501      	adds	r5, #1
 800a070:	4628      	mov	r0, r5
 800a072:	f7f6 fa57 	bl	8000524 <__aeabi_i2d>
 800a076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	2200      	movs	r2, #0
 800a080:	4b84      	ldr	r3, [pc, #528]	; (800a294 <_dtoa_r+0x604>)
 800a082:	f7f6 f903 	bl	800028c <__adddf3>
 800a086:	4605      	mov	r5, r0
 800a088:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a08c:	2f00      	cmp	r7, #0
 800a08e:	d15d      	bne.n	800a14c <_dtoa_r+0x4bc>
 800a090:	2200      	movs	r2, #0
 800a092:	4b81      	ldr	r3, [pc, #516]	; (800a298 <_dtoa_r+0x608>)
 800a094:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a098:	f7f6 f8f6 	bl	8000288 <__aeabi_dsub>
 800a09c:	462a      	mov	r2, r5
 800a09e:	4633      	mov	r3, r6
 800a0a0:	e9cd 0100 	strd	r0, r1, [sp]
 800a0a4:	f7f6 fd38 	bl	8000b18 <__aeabi_dcmpgt>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f040 8288 	bne.w	800a5be <_dtoa_r+0x92e>
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a0b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0b8:	f7f6 fd10 	bl	8000adc <__aeabi_dcmplt>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f040 827c 	bne.w	800a5ba <_dtoa_r+0x92a>
 800a0c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0c6:	e9cd 2300 	strd	r2, r3, [sp]
 800a0ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f2c0 8150 	blt.w	800a372 <_dtoa_r+0x6e2>
 800a0d2:	f1ba 0f0e 	cmp.w	sl, #14
 800a0d6:	f300 814c 	bgt.w	800a372 <_dtoa_r+0x6e2>
 800a0da:	4b6a      	ldr	r3, [pc, #424]	; (800a284 <_dtoa_r+0x5f4>)
 800a0dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0e0:	ed93 7b00 	vldr	d7, [r3]
 800a0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0ec:	f280 80d8 	bge.w	800a2a0 <_dtoa_r+0x610>
 800a0f0:	f1b9 0f00 	cmp.w	r9, #0
 800a0f4:	f300 80d4 	bgt.w	800a2a0 <_dtoa_r+0x610>
 800a0f8:	f040 825e 	bne.w	800a5b8 <_dtoa_r+0x928>
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4b66      	ldr	r3, [pc, #408]	; (800a298 <_dtoa_r+0x608>)
 800a100:	ec51 0b17 	vmov	r0, r1, d7
 800a104:	f7f6 fa78 	bl	80005f8 <__aeabi_dmul>
 800a108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a10c:	f7f6 fcfa 	bl	8000b04 <__aeabi_dcmpge>
 800a110:	464f      	mov	r7, r9
 800a112:	464e      	mov	r6, r9
 800a114:	2800      	cmp	r0, #0
 800a116:	f040 8234 	bne.w	800a582 <_dtoa_r+0x8f2>
 800a11a:	2331      	movs	r3, #49	; 0x31
 800a11c:	f10b 0501 	add.w	r5, fp, #1
 800a120:	f88b 3000 	strb.w	r3, [fp]
 800a124:	f10a 0a01 	add.w	sl, sl, #1
 800a128:	e22f      	b.n	800a58a <_dtoa_r+0x8fa>
 800a12a:	07f2      	lsls	r2, r6, #31
 800a12c:	d505      	bpl.n	800a13a <_dtoa_r+0x4aa>
 800a12e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a132:	f7f6 fa61 	bl	80005f8 <__aeabi_dmul>
 800a136:	3501      	adds	r5, #1
 800a138:	2301      	movs	r3, #1
 800a13a:	1076      	asrs	r6, r6, #1
 800a13c:	3708      	adds	r7, #8
 800a13e:	e772      	b.n	800a026 <_dtoa_r+0x396>
 800a140:	2502      	movs	r5, #2
 800a142:	e774      	b.n	800a02e <_dtoa_r+0x39e>
 800a144:	f8cd a020 	str.w	sl, [sp, #32]
 800a148:	464f      	mov	r7, r9
 800a14a:	e791      	b.n	800a070 <_dtoa_r+0x3e0>
 800a14c:	4b4d      	ldr	r3, [pc, #308]	; (800a284 <_dtoa_r+0x5f4>)
 800a14e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a152:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d047      	beq.n	800a1ec <_dtoa_r+0x55c>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	2000      	movs	r0, #0
 800a162:	494e      	ldr	r1, [pc, #312]	; (800a29c <_dtoa_r+0x60c>)
 800a164:	f7f6 fb72 	bl	800084c <__aeabi_ddiv>
 800a168:	462a      	mov	r2, r5
 800a16a:	4633      	mov	r3, r6
 800a16c:	f7f6 f88c 	bl	8000288 <__aeabi_dsub>
 800a170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a174:	465d      	mov	r5, fp
 800a176:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a17a:	f7f6 fced 	bl	8000b58 <__aeabi_d2iz>
 800a17e:	4606      	mov	r6, r0
 800a180:	f7f6 f9d0 	bl	8000524 <__aeabi_i2d>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a18c:	f7f6 f87c 	bl	8000288 <__aeabi_dsub>
 800a190:	3630      	adds	r6, #48	; 0x30
 800a192:	f805 6b01 	strb.w	r6, [r5], #1
 800a196:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a19a:	e9cd 0100 	strd	r0, r1, [sp]
 800a19e:	f7f6 fc9d 	bl	8000adc <__aeabi_dcmplt>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d163      	bne.n	800a26e <_dtoa_r+0x5de>
 800a1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	4937      	ldr	r1, [pc, #220]	; (800a28c <_dtoa_r+0x5fc>)
 800a1ae:	f7f6 f86b 	bl	8000288 <__aeabi_dsub>
 800a1b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a1b6:	f7f6 fc91 	bl	8000adc <__aeabi_dcmplt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f040 80b7 	bne.w	800a32e <_dtoa_r+0x69e>
 800a1c0:	eba5 030b 	sub.w	r3, r5, fp
 800a1c4:	429f      	cmp	r7, r3
 800a1c6:	f77f af7c 	ble.w	800a0c2 <_dtoa_r+0x432>
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	4b30      	ldr	r3, [pc, #192]	; (800a290 <_dtoa_r+0x600>)
 800a1ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1d2:	f7f6 fa11 	bl	80005f8 <__aeabi_dmul>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1dc:	4b2c      	ldr	r3, [pc, #176]	; (800a290 <_dtoa_r+0x600>)
 800a1de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e2:	f7f6 fa09 	bl	80005f8 <__aeabi_dmul>
 800a1e6:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ea:	e7c4      	b.n	800a176 <_dtoa_r+0x4e6>
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	4633      	mov	r3, r6
 800a1f0:	f7f6 fa02 	bl	80005f8 <__aeabi_dmul>
 800a1f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1f8:	eb0b 0507 	add.w	r5, fp, r7
 800a1fc:	465e      	mov	r6, fp
 800a1fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a202:	f7f6 fca9 	bl	8000b58 <__aeabi_d2iz>
 800a206:	4607      	mov	r7, r0
 800a208:	f7f6 f98c 	bl	8000524 <__aeabi_i2d>
 800a20c:	3730      	adds	r7, #48	; 0x30
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a216:	f7f6 f837 	bl	8000288 <__aeabi_dsub>
 800a21a:	f806 7b01 	strb.w	r7, [r6], #1
 800a21e:	42ae      	cmp	r6, r5
 800a220:	e9cd 0100 	strd	r0, r1, [sp]
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	d126      	bne.n	800a278 <_dtoa_r+0x5e8>
 800a22a:	4b1c      	ldr	r3, [pc, #112]	; (800a29c <_dtoa_r+0x60c>)
 800a22c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a230:	f7f6 f82c 	bl	800028c <__adddf3>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a23c:	f7f6 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 800a240:	2800      	cmp	r0, #0
 800a242:	d174      	bne.n	800a32e <_dtoa_r+0x69e>
 800a244:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a248:	2000      	movs	r0, #0
 800a24a:	4914      	ldr	r1, [pc, #80]	; (800a29c <_dtoa_r+0x60c>)
 800a24c:	f7f6 f81c 	bl	8000288 <__aeabi_dsub>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a258:	f7f6 fc40 	bl	8000adc <__aeabi_dcmplt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	f43f af30 	beq.w	800a0c2 <_dtoa_r+0x432>
 800a262:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a266:	2b30      	cmp	r3, #48	; 0x30
 800a268:	f105 32ff 	add.w	r2, r5, #4294967295
 800a26c:	d002      	beq.n	800a274 <_dtoa_r+0x5e4>
 800a26e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a272:	e04a      	b.n	800a30a <_dtoa_r+0x67a>
 800a274:	4615      	mov	r5, r2
 800a276:	e7f4      	b.n	800a262 <_dtoa_r+0x5d2>
 800a278:	4b05      	ldr	r3, [pc, #20]	; (800a290 <_dtoa_r+0x600>)
 800a27a:	f7f6 f9bd 	bl	80005f8 <__aeabi_dmul>
 800a27e:	e9cd 0100 	strd	r0, r1, [sp]
 800a282:	e7bc      	b.n	800a1fe <_dtoa_r+0x56e>
 800a284:	0800b408 	.word	0x0800b408
 800a288:	0800b3e0 	.word	0x0800b3e0
 800a28c:	3ff00000 	.word	0x3ff00000
 800a290:	40240000 	.word	0x40240000
 800a294:	401c0000 	.word	0x401c0000
 800a298:	40140000 	.word	0x40140000
 800a29c:	3fe00000 	.word	0x3fe00000
 800a2a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a2a4:	465d      	mov	r5, fp
 800a2a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	f7f6 facd 	bl	800084c <__aeabi_ddiv>
 800a2b2:	f7f6 fc51 	bl	8000b58 <__aeabi_d2iz>
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	f7f6 f934 	bl	8000524 <__aeabi_i2d>
 800a2bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2c0:	f7f6 f99a 	bl	80005f8 <__aeabi_dmul>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a2d0:	f7f5 ffda 	bl	8000288 <__aeabi_dsub>
 800a2d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a2d8:	eba5 060b 	sub.w	r6, r5, fp
 800a2dc:	45b1      	cmp	r9, r6
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	d139      	bne.n	800a358 <_dtoa_r+0x6c8>
 800a2e4:	f7f5 ffd2 	bl	800028c <__adddf3>
 800a2e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	f7f6 fc12 	bl	8000b18 <__aeabi_dcmpgt>
 800a2f4:	b9c8      	cbnz	r0, 800a32a <_dtoa_r+0x69a>
 800a2f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	f7f6 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a302:	b110      	cbz	r0, 800a30a <_dtoa_r+0x67a>
 800a304:	f018 0f01 	tst.w	r8, #1
 800a308:	d10f      	bne.n	800a32a <_dtoa_r+0x69a>
 800a30a:	9904      	ldr	r1, [sp, #16]
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 facc 	bl	800a8aa <_Bfree>
 800a312:	2300      	movs	r3, #0
 800a314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a316:	702b      	strb	r3, [r5, #0]
 800a318:	f10a 0301 	add.w	r3, sl, #1
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 8241 	beq.w	800a7a8 <_dtoa_r+0xb18>
 800a326:	601d      	str	r5, [r3, #0]
 800a328:	e23e      	b.n	800a7a8 <_dtoa_r+0xb18>
 800a32a:	f8cd a020 	str.w	sl, [sp, #32]
 800a32e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a332:	2a39      	cmp	r2, #57	; 0x39
 800a334:	f105 33ff 	add.w	r3, r5, #4294967295
 800a338:	d108      	bne.n	800a34c <_dtoa_r+0x6bc>
 800a33a:	459b      	cmp	fp, r3
 800a33c:	d10a      	bne.n	800a354 <_dtoa_r+0x6c4>
 800a33e:	9b08      	ldr	r3, [sp, #32]
 800a340:	3301      	adds	r3, #1
 800a342:	9308      	str	r3, [sp, #32]
 800a344:	2330      	movs	r3, #48	; 0x30
 800a346:	f88b 3000 	strb.w	r3, [fp]
 800a34a:	465b      	mov	r3, fp
 800a34c:	781a      	ldrb	r2, [r3, #0]
 800a34e:	3201      	adds	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	e78c      	b.n	800a26e <_dtoa_r+0x5de>
 800a354:	461d      	mov	r5, r3
 800a356:	e7ea      	b.n	800a32e <_dtoa_r+0x69e>
 800a358:	2200      	movs	r2, #0
 800a35a:	4b9b      	ldr	r3, [pc, #620]	; (800a5c8 <_dtoa_r+0x938>)
 800a35c:	f7f6 f94c 	bl	80005f8 <__aeabi_dmul>
 800a360:	2200      	movs	r2, #0
 800a362:	2300      	movs	r3, #0
 800a364:	4606      	mov	r6, r0
 800a366:	460f      	mov	r7, r1
 800a368:	f7f6 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d09a      	beq.n	800a2a6 <_dtoa_r+0x616>
 800a370:	e7cb      	b.n	800a30a <_dtoa_r+0x67a>
 800a372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a374:	2a00      	cmp	r2, #0
 800a376:	f000 808b 	beq.w	800a490 <_dtoa_r+0x800>
 800a37a:	9a06      	ldr	r2, [sp, #24]
 800a37c:	2a01      	cmp	r2, #1
 800a37e:	dc6e      	bgt.n	800a45e <_dtoa_r+0x7ce>
 800a380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a382:	2a00      	cmp	r2, #0
 800a384:	d067      	beq.n	800a456 <_dtoa_r+0x7c6>
 800a386:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a38a:	9f07      	ldr	r7, [sp, #28]
 800a38c:	9d05      	ldr	r5, [sp, #20]
 800a38e:	9a05      	ldr	r2, [sp, #20]
 800a390:	2101      	movs	r1, #1
 800a392:	441a      	add	r2, r3
 800a394:	4620      	mov	r0, r4
 800a396:	9205      	str	r2, [sp, #20]
 800a398:	4498      	add	r8, r3
 800a39a:	f000 fb26 	bl	800a9ea <__i2b>
 800a39e:	4606      	mov	r6, r0
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	dd0c      	ble.n	800a3be <_dtoa_r+0x72e>
 800a3a4:	f1b8 0f00 	cmp.w	r8, #0
 800a3a8:	dd09      	ble.n	800a3be <_dtoa_r+0x72e>
 800a3aa:	4545      	cmp	r5, r8
 800a3ac:	9a05      	ldr	r2, [sp, #20]
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	bfa8      	it	ge
 800a3b2:	4643      	movge	r3, r8
 800a3b4:	1ad2      	subs	r2, r2, r3
 800a3b6:	9205      	str	r2, [sp, #20]
 800a3b8:	1aed      	subs	r5, r5, r3
 800a3ba:	eba8 0803 	sub.w	r8, r8, r3
 800a3be:	9b07      	ldr	r3, [sp, #28]
 800a3c0:	b1eb      	cbz	r3, 800a3fe <_dtoa_r+0x76e>
 800a3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d067      	beq.n	800a498 <_dtoa_r+0x808>
 800a3c8:	b18f      	cbz	r7, 800a3ee <_dtoa_r+0x75e>
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fbaa 	bl	800ab28 <__pow5mult>
 800a3d4:	9a04      	ldr	r2, [sp, #16]
 800a3d6:	4601      	mov	r1, r0
 800a3d8:	4606      	mov	r6, r0
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fb0e 	bl	800a9fc <__multiply>
 800a3e0:	9904      	ldr	r1, [sp, #16]
 800a3e2:	9008      	str	r0, [sp, #32]
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 fa60 	bl	800a8aa <_Bfree>
 800a3ea:	9b08      	ldr	r3, [sp, #32]
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	9b07      	ldr	r3, [sp, #28]
 800a3f0:	1bda      	subs	r2, r3, r7
 800a3f2:	d004      	beq.n	800a3fe <_dtoa_r+0x76e>
 800a3f4:	9904      	ldr	r1, [sp, #16]
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 fb96 	bl	800ab28 <__pow5mult>
 800a3fc:	9004      	str	r0, [sp, #16]
 800a3fe:	2101      	movs	r1, #1
 800a400:	4620      	mov	r0, r4
 800a402:	f000 faf2 	bl	800a9ea <__i2b>
 800a406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a408:	4607      	mov	r7, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 81d0 	beq.w	800a7b0 <_dtoa_r+0xb20>
 800a410:	461a      	mov	r2, r3
 800a412:	4601      	mov	r1, r0
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fb87 	bl	800ab28 <__pow5mult>
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	4607      	mov	r7, r0
 800a420:	dc40      	bgt.n	800a4a4 <_dtoa_r+0x814>
 800a422:	9b00      	ldr	r3, [sp, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d139      	bne.n	800a49c <_dtoa_r+0x80c>
 800a428:	9b01      	ldr	r3, [sp, #4]
 800a42a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d136      	bne.n	800a4a0 <_dtoa_r+0x810>
 800a432:	9b01      	ldr	r3, [sp, #4]
 800a434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a438:	0d1b      	lsrs	r3, r3, #20
 800a43a:	051b      	lsls	r3, r3, #20
 800a43c:	b12b      	cbz	r3, 800a44a <_dtoa_r+0x7ba>
 800a43e:	9b05      	ldr	r3, [sp, #20]
 800a440:	3301      	adds	r3, #1
 800a442:	9305      	str	r3, [sp, #20]
 800a444:	f108 0801 	add.w	r8, r8, #1
 800a448:	2301      	movs	r3, #1
 800a44a:	9307      	str	r3, [sp, #28]
 800a44c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d12a      	bne.n	800a4a8 <_dtoa_r+0x818>
 800a452:	2001      	movs	r0, #1
 800a454:	e030      	b.n	800a4b8 <_dtoa_r+0x828>
 800a456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a458:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a45c:	e795      	b.n	800a38a <_dtoa_r+0x6fa>
 800a45e:	9b07      	ldr	r3, [sp, #28]
 800a460:	f109 37ff 	add.w	r7, r9, #4294967295
 800a464:	42bb      	cmp	r3, r7
 800a466:	bfbf      	itttt	lt
 800a468:	9b07      	ldrlt	r3, [sp, #28]
 800a46a:	9707      	strlt	r7, [sp, #28]
 800a46c:	1afa      	sublt	r2, r7, r3
 800a46e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a470:	bfbb      	ittet	lt
 800a472:	189b      	addlt	r3, r3, r2
 800a474:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a476:	1bdf      	subge	r7, r3, r7
 800a478:	2700      	movlt	r7, #0
 800a47a:	f1b9 0f00 	cmp.w	r9, #0
 800a47e:	bfb5      	itete	lt
 800a480:	9b05      	ldrlt	r3, [sp, #20]
 800a482:	9d05      	ldrge	r5, [sp, #20]
 800a484:	eba3 0509 	sublt.w	r5, r3, r9
 800a488:	464b      	movge	r3, r9
 800a48a:	bfb8      	it	lt
 800a48c:	2300      	movlt	r3, #0
 800a48e:	e77e      	b.n	800a38e <_dtoa_r+0x6fe>
 800a490:	9f07      	ldr	r7, [sp, #28]
 800a492:	9d05      	ldr	r5, [sp, #20]
 800a494:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a496:	e783      	b.n	800a3a0 <_dtoa_r+0x710>
 800a498:	9a07      	ldr	r2, [sp, #28]
 800a49a:	e7ab      	b.n	800a3f4 <_dtoa_r+0x764>
 800a49c:	2300      	movs	r3, #0
 800a49e:	e7d4      	b.n	800a44a <_dtoa_r+0x7ba>
 800a4a0:	9b00      	ldr	r3, [sp, #0]
 800a4a2:	e7d2      	b.n	800a44a <_dtoa_r+0x7ba>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	9307      	str	r3, [sp, #28]
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a4ae:	6918      	ldr	r0, [r3, #16]
 800a4b0:	f000 fa4d 	bl	800a94e <__hi0bits>
 800a4b4:	f1c0 0020 	rsb	r0, r0, #32
 800a4b8:	4440      	add	r0, r8
 800a4ba:	f010 001f 	ands.w	r0, r0, #31
 800a4be:	d047      	beq.n	800a550 <_dtoa_r+0x8c0>
 800a4c0:	f1c0 0320 	rsb	r3, r0, #32
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	dd3b      	ble.n	800a540 <_dtoa_r+0x8b0>
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	f1c0 001c 	rsb	r0, r0, #28
 800a4ce:	4403      	add	r3, r0
 800a4d0:	9305      	str	r3, [sp, #20]
 800a4d2:	4405      	add	r5, r0
 800a4d4:	4480      	add	r8, r0
 800a4d6:	9b05      	ldr	r3, [sp, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dd05      	ble.n	800a4e8 <_dtoa_r+0x858>
 800a4dc:	461a      	mov	r2, r3
 800a4de:	9904      	ldr	r1, [sp, #16]
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 fb6f 	bl	800abc4 <__lshift>
 800a4e6:	9004      	str	r0, [sp, #16]
 800a4e8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ec:	dd05      	ble.n	800a4fa <_dtoa_r+0x86a>
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4642      	mov	r2, r8
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 fb66 	bl	800abc4 <__lshift>
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4fc:	b353      	cbz	r3, 800a554 <_dtoa_r+0x8c4>
 800a4fe:	4639      	mov	r1, r7
 800a500:	9804      	ldr	r0, [sp, #16]
 800a502:	f000 fbb3 	bl	800ac6c <__mcmp>
 800a506:	2800      	cmp	r0, #0
 800a508:	da24      	bge.n	800a554 <_dtoa_r+0x8c4>
 800a50a:	2300      	movs	r3, #0
 800a50c:	220a      	movs	r2, #10
 800a50e:	9904      	ldr	r1, [sp, #16]
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f9e1 	bl	800a8d8 <__multadd>
 800a516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a518:	9004      	str	r0, [sp, #16]
 800a51a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 814d 	beq.w	800a7be <_dtoa_r+0xb2e>
 800a524:	2300      	movs	r3, #0
 800a526:	4631      	mov	r1, r6
 800a528:	220a      	movs	r2, #10
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f9d4 	bl	800a8d8 <__multadd>
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	4606      	mov	r6, r0
 800a536:	dc4f      	bgt.n	800a5d8 <_dtoa_r+0x948>
 800a538:	9b06      	ldr	r3, [sp, #24]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	dd4c      	ble.n	800a5d8 <_dtoa_r+0x948>
 800a53e:	e011      	b.n	800a564 <_dtoa_r+0x8d4>
 800a540:	d0c9      	beq.n	800a4d6 <_dtoa_r+0x846>
 800a542:	9a05      	ldr	r2, [sp, #20]
 800a544:	331c      	adds	r3, #28
 800a546:	441a      	add	r2, r3
 800a548:	9205      	str	r2, [sp, #20]
 800a54a:	441d      	add	r5, r3
 800a54c:	4498      	add	r8, r3
 800a54e:	e7c2      	b.n	800a4d6 <_dtoa_r+0x846>
 800a550:	4603      	mov	r3, r0
 800a552:	e7f6      	b.n	800a542 <_dtoa_r+0x8b2>
 800a554:	f1b9 0f00 	cmp.w	r9, #0
 800a558:	dc38      	bgt.n	800a5cc <_dtoa_r+0x93c>
 800a55a:	9b06      	ldr	r3, [sp, #24]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	dd35      	ble.n	800a5cc <_dtoa_r+0x93c>
 800a560:	f8cd 9008 	str.w	r9, [sp, #8]
 800a564:	9b02      	ldr	r3, [sp, #8]
 800a566:	b963      	cbnz	r3, 800a582 <_dtoa_r+0x8f2>
 800a568:	4639      	mov	r1, r7
 800a56a:	2205      	movs	r2, #5
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 f9b3 	bl	800a8d8 <__multadd>
 800a572:	4601      	mov	r1, r0
 800a574:	4607      	mov	r7, r0
 800a576:	9804      	ldr	r0, [sp, #16]
 800a578:	f000 fb78 	bl	800ac6c <__mcmp>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	f73f adcc 	bgt.w	800a11a <_dtoa_r+0x48a>
 800a582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a584:	465d      	mov	r5, fp
 800a586:	ea6f 0a03 	mvn.w	sl, r3
 800a58a:	f04f 0900 	mov.w	r9, #0
 800a58e:	4639      	mov	r1, r7
 800a590:	4620      	mov	r0, r4
 800a592:	f000 f98a 	bl	800a8aa <_Bfree>
 800a596:	2e00      	cmp	r6, #0
 800a598:	f43f aeb7 	beq.w	800a30a <_dtoa_r+0x67a>
 800a59c:	f1b9 0f00 	cmp.w	r9, #0
 800a5a0:	d005      	beq.n	800a5ae <_dtoa_r+0x91e>
 800a5a2:	45b1      	cmp	r9, r6
 800a5a4:	d003      	beq.n	800a5ae <_dtoa_r+0x91e>
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 f97e 	bl	800a8aa <_Bfree>
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 f97a 	bl	800a8aa <_Bfree>
 800a5b6:	e6a8      	b.n	800a30a <_dtoa_r+0x67a>
 800a5b8:	2700      	movs	r7, #0
 800a5ba:	463e      	mov	r6, r7
 800a5bc:	e7e1      	b.n	800a582 <_dtoa_r+0x8f2>
 800a5be:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a5c2:	463e      	mov	r6, r7
 800a5c4:	e5a9      	b.n	800a11a <_dtoa_r+0x48a>
 800a5c6:	bf00      	nop
 800a5c8:	40240000 	.word	0x40240000
 800a5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 80fa 	beq.w	800a7cc <_dtoa_r+0xb3c>
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	dd05      	ble.n	800a5e8 <_dtoa_r+0x958>
 800a5dc:	4631      	mov	r1, r6
 800a5de:	462a      	mov	r2, r5
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f000 faef 	bl	800abc4 <__lshift>
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	9b07      	ldr	r3, [sp, #28]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d04c      	beq.n	800a688 <_dtoa_r+0x9f8>
 800a5ee:	6871      	ldr	r1, [r6, #4]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f000 f926 	bl	800a842 <_Balloc>
 800a5f6:	6932      	ldr	r2, [r6, #16]
 800a5f8:	3202      	adds	r2, #2
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	0092      	lsls	r2, r2, #2
 800a5fe:	f106 010c 	add.w	r1, r6, #12
 800a602:	300c      	adds	r0, #12
 800a604:	f000 f912 	bl	800a82c <memcpy>
 800a608:	2201      	movs	r2, #1
 800a60a:	4629      	mov	r1, r5
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fad9 	bl	800abc4 <__lshift>
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	f8cd b014 	str.w	fp, [sp, #20]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	46b1      	mov	r9, r6
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	4606      	mov	r6, r0
 800a622:	4639      	mov	r1, r7
 800a624:	9804      	ldr	r0, [sp, #16]
 800a626:	f7ff faa7 	bl	8009b78 <quorem>
 800a62a:	4649      	mov	r1, r9
 800a62c:	4605      	mov	r5, r0
 800a62e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a632:	9804      	ldr	r0, [sp, #16]
 800a634:	f000 fb1a 	bl	800ac6c <__mcmp>
 800a638:	4632      	mov	r2, r6
 800a63a:	9000      	str	r0, [sp, #0]
 800a63c:	4639      	mov	r1, r7
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 fb2e 	bl	800aca0 <__mdiff>
 800a644:	68c3      	ldr	r3, [r0, #12]
 800a646:	4602      	mov	r2, r0
 800a648:	bb03      	cbnz	r3, 800a68c <_dtoa_r+0x9fc>
 800a64a:	4601      	mov	r1, r0
 800a64c:	9008      	str	r0, [sp, #32]
 800a64e:	9804      	ldr	r0, [sp, #16]
 800a650:	f000 fb0c 	bl	800ac6c <__mcmp>
 800a654:	9a08      	ldr	r2, [sp, #32]
 800a656:	4603      	mov	r3, r0
 800a658:	4611      	mov	r1, r2
 800a65a:	4620      	mov	r0, r4
 800a65c:	9308      	str	r3, [sp, #32]
 800a65e:	f000 f924 	bl	800a8aa <_Bfree>
 800a662:	9b08      	ldr	r3, [sp, #32]
 800a664:	b9a3      	cbnz	r3, 800a690 <_dtoa_r+0xa00>
 800a666:	9a06      	ldr	r2, [sp, #24]
 800a668:	b992      	cbnz	r2, 800a690 <_dtoa_r+0xa00>
 800a66a:	9a07      	ldr	r2, [sp, #28]
 800a66c:	b982      	cbnz	r2, 800a690 <_dtoa_r+0xa00>
 800a66e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a672:	d029      	beq.n	800a6c8 <_dtoa_r+0xa38>
 800a674:	9b00      	ldr	r3, [sp, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	dd01      	ble.n	800a67e <_dtoa_r+0x9ee>
 800a67a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a67e:	9b05      	ldr	r3, [sp, #20]
 800a680:	1c5d      	adds	r5, r3, #1
 800a682:	f883 8000 	strb.w	r8, [r3]
 800a686:	e782      	b.n	800a58e <_dtoa_r+0x8fe>
 800a688:	4630      	mov	r0, r6
 800a68a:	e7c2      	b.n	800a612 <_dtoa_r+0x982>
 800a68c:	2301      	movs	r3, #1
 800a68e:	e7e3      	b.n	800a658 <_dtoa_r+0x9c8>
 800a690:	9a00      	ldr	r2, [sp, #0]
 800a692:	2a00      	cmp	r2, #0
 800a694:	db04      	blt.n	800a6a0 <_dtoa_r+0xa10>
 800a696:	d125      	bne.n	800a6e4 <_dtoa_r+0xa54>
 800a698:	9a06      	ldr	r2, [sp, #24]
 800a69a:	bb1a      	cbnz	r2, 800a6e4 <_dtoa_r+0xa54>
 800a69c:	9a07      	ldr	r2, [sp, #28]
 800a69e:	bb0a      	cbnz	r2, 800a6e4 <_dtoa_r+0xa54>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	ddec      	ble.n	800a67e <_dtoa_r+0x9ee>
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	9904      	ldr	r1, [sp, #16]
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fa8b 	bl	800abc4 <__lshift>
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	9004      	str	r0, [sp, #16]
 800a6b2:	f000 fadb 	bl	800ac6c <__mcmp>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	dc03      	bgt.n	800a6c2 <_dtoa_r+0xa32>
 800a6ba:	d1e0      	bne.n	800a67e <_dtoa_r+0x9ee>
 800a6bc:	f018 0f01 	tst.w	r8, #1
 800a6c0:	d0dd      	beq.n	800a67e <_dtoa_r+0x9ee>
 800a6c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a6c6:	d1d8      	bne.n	800a67a <_dtoa_r+0x9ea>
 800a6c8:	9b05      	ldr	r3, [sp, #20]
 800a6ca:	9a05      	ldr	r2, [sp, #20]
 800a6cc:	1c5d      	adds	r5, r3, #1
 800a6ce:	2339      	movs	r3, #57	; 0x39
 800a6d0:	7013      	strb	r3, [r2, #0]
 800a6d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6d6:	2b39      	cmp	r3, #57	; 0x39
 800a6d8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a6dc:	d04f      	beq.n	800a77e <_dtoa_r+0xaee>
 800a6de:	3301      	adds	r3, #1
 800a6e0:	7013      	strb	r3, [r2, #0]
 800a6e2:	e754      	b.n	800a58e <_dtoa_r+0x8fe>
 800a6e4:	9a05      	ldr	r2, [sp, #20]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f102 0501 	add.w	r5, r2, #1
 800a6ec:	dd06      	ble.n	800a6fc <_dtoa_r+0xa6c>
 800a6ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a6f2:	d0e9      	beq.n	800a6c8 <_dtoa_r+0xa38>
 800a6f4:	f108 0801 	add.w	r8, r8, #1
 800a6f8:	9b05      	ldr	r3, [sp, #20]
 800a6fa:	e7c2      	b.n	800a682 <_dtoa_r+0x9f2>
 800a6fc:	9a02      	ldr	r2, [sp, #8]
 800a6fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a702:	eba5 030b 	sub.w	r3, r5, fp
 800a706:	4293      	cmp	r3, r2
 800a708:	d021      	beq.n	800a74e <_dtoa_r+0xabe>
 800a70a:	2300      	movs	r3, #0
 800a70c:	220a      	movs	r2, #10
 800a70e:	9904      	ldr	r1, [sp, #16]
 800a710:	4620      	mov	r0, r4
 800a712:	f000 f8e1 	bl	800a8d8 <__multadd>
 800a716:	45b1      	cmp	r9, r6
 800a718:	9004      	str	r0, [sp, #16]
 800a71a:	f04f 0300 	mov.w	r3, #0
 800a71e:	f04f 020a 	mov.w	r2, #10
 800a722:	4649      	mov	r1, r9
 800a724:	4620      	mov	r0, r4
 800a726:	d105      	bne.n	800a734 <_dtoa_r+0xaa4>
 800a728:	f000 f8d6 	bl	800a8d8 <__multadd>
 800a72c:	4681      	mov	r9, r0
 800a72e:	4606      	mov	r6, r0
 800a730:	9505      	str	r5, [sp, #20]
 800a732:	e776      	b.n	800a622 <_dtoa_r+0x992>
 800a734:	f000 f8d0 	bl	800a8d8 <__multadd>
 800a738:	4631      	mov	r1, r6
 800a73a:	4681      	mov	r9, r0
 800a73c:	2300      	movs	r3, #0
 800a73e:	220a      	movs	r2, #10
 800a740:	4620      	mov	r0, r4
 800a742:	f000 f8c9 	bl	800a8d8 <__multadd>
 800a746:	4606      	mov	r6, r0
 800a748:	e7f2      	b.n	800a730 <_dtoa_r+0xaa0>
 800a74a:	f04f 0900 	mov.w	r9, #0
 800a74e:	2201      	movs	r2, #1
 800a750:	9904      	ldr	r1, [sp, #16]
 800a752:	4620      	mov	r0, r4
 800a754:	f000 fa36 	bl	800abc4 <__lshift>
 800a758:	4639      	mov	r1, r7
 800a75a:	9004      	str	r0, [sp, #16]
 800a75c:	f000 fa86 	bl	800ac6c <__mcmp>
 800a760:	2800      	cmp	r0, #0
 800a762:	dcb6      	bgt.n	800a6d2 <_dtoa_r+0xa42>
 800a764:	d102      	bne.n	800a76c <_dtoa_r+0xadc>
 800a766:	f018 0f01 	tst.w	r8, #1
 800a76a:	d1b2      	bne.n	800a6d2 <_dtoa_r+0xa42>
 800a76c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a770:	2b30      	cmp	r3, #48	; 0x30
 800a772:	f105 32ff 	add.w	r2, r5, #4294967295
 800a776:	f47f af0a 	bne.w	800a58e <_dtoa_r+0x8fe>
 800a77a:	4615      	mov	r5, r2
 800a77c:	e7f6      	b.n	800a76c <_dtoa_r+0xadc>
 800a77e:	4593      	cmp	fp, r2
 800a780:	d105      	bne.n	800a78e <_dtoa_r+0xafe>
 800a782:	2331      	movs	r3, #49	; 0x31
 800a784:	f10a 0a01 	add.w	sl, sl, #1
 800a788:	f88b 3000 	strb.w	r3, [fp]
 800a78c:	e6ff      	b.n	800a58e <_dtoa_r+0x8fe>
 800a78e:	4615      	mov	r5, r2
 800a790:	e79f      	b.n	800a6d2 <_dtoa_r+0xa42>
 800a792:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a7f8 <_dtoa_r+0xb68>
 800a796:	e007      	b.n	800a7a8 <_dtoa_r+0xb18>
 800a798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a79a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a7fc <_dtoa_r+0xb6c>
 800a79e:	b11b      	cbz	r3, 800a7a8 <_dtoa_r+0xb18>
 800a7a0:	f10b 0308 	add.w	r3, fp, #8
 800a7a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	4658      	mov	r0, fp
 800a7aa:	b017      	add	sp, #92	; 0x5c
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	9b06      	ldr	r3, [sp, #24]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	f77f ae35 	ble.w	800a422 <_dtoa_r+0x792>
 800a7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ba:	9307      	str	r3, [sp, #28]
 800a7bc:	e649      	b.n	800a452 <_dtoa_r+0x7c2>
 800a7be:	9b02      	ldr	r3, [sp, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc03      	bgt.n	800a7cc <_dtoa_r+0xb3c>
 800a7c4:	9b06      	ldr	r3, [sp, #24]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	f73f aecc 	bgt.w	800a564 <_dtoa_r+0x8d4>
 800a7cc:	465d      	mov	r5, fp
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	9804      	ldr	r0, [sp, #16]
 800a7d2:	f7ff f9d1 	bl	8009b78 <quorem>
 800a7d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a7da:	f805 8b01 	strb.w	r8, [r5], #1
 800a7de:	9a02      	ldr	r2, [sp, #8]
 800a7e0:	eba5 030b 	sub.w	r3, r5, fp
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	ddb0      	ble.n	800a74a <_dtoa_r+0xaba>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	220a      	movs	r2, #10
 800a7ec:	9904      	ldr	r1, [sp, #16]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 f872 	bl	800a8d8 <__multadd>
 800a7f4:	9004      	str	r0, [sp, #16]
 800a7f6:	e7ea      	b.n	800a7ce <_dtoa_r+0xb3e>
 800a7f8:	0800b3ac 	.word	0x0800b3ac
 800a7fc:	0800b3d0 	.word	0x0800b3d0

0800a800 <_localeconv_r>:
 800a800:	4b04      	ldr	r3, [pc, #16]	; (800a814 <_localeconv_r+0x14>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6a18      	ldr	r0, [r3, #32]
 800a806:	4b04      	ldr	r3, [pc, #16]	; (800a818 <_localeconv_r+0x18>)
 800a808:	2800      	cmp	r0, #0
 800a80a:	bf08      	it	eq
 800a80c:	4618      	moveq	r0, r3
 800a80e:	30f0      	adds	r0, #240	; 0xf0
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	2000017c 	.word	0x2000017c
 800a818:	200001e0 	.word	0x200001e0

0800a81c <malloc>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <malloc+0xc>)
 800a81e:	4601      	mov	r1, r0
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f000 bb45 	b.w	800aeb0 <_malloc_r>
 800a826:	bf00      	nop
 800a828:	2000017c 	.word	0x2000017c

0800a82c <memcpy>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	1e43      	subs	r3, r0, #1
 800a830:	440a      	add	r2, r1
 800a832:	4291      	cmp	r1, r2
 800a834:	d100      	bne.n	800a838 <memcpy+0xc>
 800a836:	bd10      	pop	{r4, pc}
 800a838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a840:	e7f7      	b.n	800a832 <memcpy+0x6>

0800a842 <_Balloc>:
 800a842:	b570      	push	{r4, r5, r6, lr}
 800a844:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a846:	4604      	mov	r4, r0
 800a848:	460e      	mov	r6, r1
 800a84a:	b93d      	cbnz	r5, 800a85c <_Balloc+0x1a>
 800a84c:	2010      	movs	r0, #16
 800a84e:	f7ff ffe5 	bl	800a81c <malloc>
 800a852:	6260      	str	r0, [r4, #36]	; 0x24
 800a854:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a858:	6005      	str	r5, [r0, #0]
 800a85a:	60c5      	str	r5, [r0, #12]
 800a85c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a85e:	68eb      	ldr	r3, [r5, #12]
 800a860:	b183      	cbz	r3, 800a884 <_Balloc+0x42>
 800a862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a86a:	b9b8      	cbnz	r0, 800a89c <_Balloc+0x5a>
 800a86c:	2101      	movs	r1, #1
 800a86e:	fa01 f506 	lsl.w	r5, r1, r6
 800a872:	1d6a      	adds	r2, r5, #5
 800a874:	0092      	lsls	r2, r2, #2
 800a876:	4620      	mov	r0, r4
 800a878:	f000 fabe 	bl	800adf8 <_calloc_r>
 800a87c:	b160      	cbz	r0, 800a898 <_Balloc+0x56>
 800a87e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a882:	e00e      	b.n	800a8a2 <_Balloc+0x60>
 800a884:	2221      	movs	r2, #33	; 0x21
 800a886:	2104      	movs	r1, #4
 800a888:	4620      	mov	r0, r4
 800a88a:	f000 fab5 	bl	800adf8 <_calloc_r>
 800a88e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a890:	60e8      	str	r0, [r5, #12]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e4      	bne.n	800a862 <_Balloc+0x20>
 800a898:	2000      	movs	r0, #0
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	6802      	ldr	r2, [r0, #0]
 800a89e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8a8:	e7f7      	b.n	800a89a <_Balloc+0x58>

0800a8aa <_Bfree>:
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460d      	mov	r5, r1
 800a8b2:	b93c      	cbnz	r4, 800a8c4 <_Bfree+0x1a>
 800a8b4:	2010      	movs	r0, #16
 800a8b6:	f7ff ffb1 	bl	800a81c <malloc>
 800a8ba:	6270      	str	r0, [r6, #36]	; 0x24
 800a8bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8c0:	6004      	str	r4, [r0, #0]
 800a8c2:	60c4      	str	r4, [r0, #12]
 800a8c4:	b13d      	cbz	r5, 800a8d6 <_Bfree+0x2c>
 800a8c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a8c8:	686a      	ldr	r2, [r5, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8d0:	6029      	str	r1, [r5, #0]
 800a8d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}

0800a8d8 <__multadd>:
 800a8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	690d      	ldr	r5, [r1, #16]
 800a8de:	461f      	mov	r7, r3
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	f101 0c14 	add.w	ip, r1, #20
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f8dc 0000 	ldr.w	r0, [ip]
 800a8ee:	b281      	uxth	r1, r0
 800a8f0:	fb02 7101 	mla	r1, r2, r1, r7
 800a8f4:	0c0f      	lsrs	r7, r1, #16
 800a8f6:	0c00      	lsrs	r0, r0, #16
 800a8f8:	fb02 7000 	mla	r0, r2, r0, r7
 800a8fc:	b289      	uxth	r1, r1
 800a8fe:	3301      	adds	r3, #1
 800a900:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a904:	429d      	cmp	r5, r3
 800a906:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a90a:	f84c 1b04 	str.w	r1, [ip], #4
 800a90e:	dcec      	bgt.n	800a8ea <__multadd+0x12>
 800a910:	b1d7      	cbz	r7, 800a948 <__multadd+0x70>
 800a912:	68a3      	ldr	r3, [r4, #8]
 800a914:	42ab      	cmp	r3, r5
 800a916:	dc12      	bgt.n	800a93e <__multadd+0x66>
 800a918:	6861      	ldr	r1, [r4, #4]
 800a91a:	4630      	mov	r0, r6
 800a91c:	3101      	adds	r1, #1
 800a91e:	f7ff ff90 	bl	800a842 <_Balloc>
 800a922:	6922      	ldr	r2, [r4, #16]
 800a924:	3202      	adds	r2, #2
 800a926:	f104 010c 	add.w	r1, r4, #12
 800a92a:	4680      	mov	r8, r0
 800a92c:	0092      	lsls	r2, r2, #2
 800a92e:	300c      	adds	r0, #12
 800a930:	f7ff ff7c 	bl	800a82c <memcpy>
 800a934:	4621      	mov	r1, r4
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ffb7 	bl	800a8aa <_Bfree>
 800a93c:	4644      	mov	r4, r8
 800a93e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a942:	3501      	adds	r5, #1
 800a944:	615f      	str	r7, [r3, #20]
 800a946:	6125      	str	r5, [r4, #16]
 800a948:	4620      	mov	r0, r4
 800a94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a94e <__hi0bits>:
 800a94e:	0c02      	lsrs	r2, r0, #16
 800a950:	0412      	lsls	r2, r2, #16
 800a952:	4603      	mov	r3, r0
 800a954:	b9b2      	cbnz	r2, 800a984 <__hi0bits+0x36>
 800a956:	0403      	lsls	r3, r0, #16
 800a958:	2010      	movs	r0, #16
 800a95a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a95e:	bf04      	itt	eq
 800a960:	021b      	lsleq	r3, r3, #8
 800a962:	3008      	addeq	r0, #8
 800a964:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a968:	bf04      	itt	eq
 800a96a:	011b      	lsleq	r3, r3, #4
 800a96c:	3004      	addeq	r0, #4
 800a96e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a972:	bf04      	itt	eq
 800a974:	009b      	lsleq	r3, r3, #2
 800a976:	3002      	addeq	r0, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	db06      	blt.n	800a98a <__hi0bits+0x3c>
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	d503      	bpl.n	800a988 <__hi0bits+0x3a>
 800a980:	3001      	adds	r0, #1
 800a982:	4770      	bx	lr
 800a984:	2000      	movs	r0, #0
 800a986:	e7e8      	b.n	800a95a <__hi0bits+0xc>
 800a988:	2020      	movs	r0, #32
 800a98a:	4770      	bx	lr

0800a98c <__lo0bits>:
 800a98c:	6803      	ldr	r3, [r0, #0]
 800a98e:	f013 0207 	ands.w	r2, r3, #7
 800a992:	4601      	mov	r1, r0
 800a994:	d00b      	beq.n	800a9ae <__lo0bits+0x22>
 800a996:	07da      	lsls	r2, r3, #31
 800a998:	d423      	bmi.n	800a9e2 <__lo0bits+0x56>
 800a99a:	0798      	lsls	r0, r3, #30
 800a99c:	bf49      	itett	mi
 800a99e:	085b      	lsrmi	r3, r3, #1
 800a9a0:	089b      	lsrpl	r3, r3, #2
 800a9a2:	2001      	movmi	r0, #1
 800a9a4:	600b      	strmi	r3, [r1, #0]
 800a9a6:	bf5c      	itt	pl
 800a9a8:	600b      	strpl	r3, [r1, #0]
 800a9aa:	2002      	movpl	r0, #2
 800a9ac:	4770      	bx	lr
 800a9ae:	b298      	uxth	r0, r3
 800a9b0:	b9a8      	cbnz	r0, 800a9de <__lo0bits+0x52>
 800a9b2:	0c1b      	lsrs	r3, r3, #16
 800a9b4:	2010      	movs	r0, #16
 800a9b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a9ba:	bf04      	itt	eq
 800a9bc:	0a1b      	lsreq	r3, r3, #8
 800a9be:	3008      	addeq	r0, #8
 800a9c0:	071a      	lsls	r2, r3, #28
 800a9c2:	bf04      	itt	eq
 800a9c4:	091b      	lsreq	r3, r3, #4
 800a9c6:	3004      	addeq	r0, #4
 800a9c8:	079a      	lsls	r2, r3, #30
 800a9ca:	bf04      	itt	eq
 800a9cc:	089b      	lsreq	r3, r3, #2
 800a9ce:	3002      	addeq	r0, #2
 800a9d0:	07da      	lsls	r2, r3, #31
 800a9d2:	d402      	bmi.n	800a9da <__lo0bits+0x4e>
 800a9d4:	085b      	lsrs	r3, r3, #1
 800a9d6:	d006      	beq.n	800a9e6 <__lo0bits+0x5a>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	600b      	str	r3, [r1, #0]
 800a9dc:	4770      	bx	lr
 800a9de:	4610      	mov	r0, r2
 800a9e0:	e7e9      	b.n	800a9b6 <__lo0bits+0x2a>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	4770      	bx	lr
 800a9e6:	2020      	movs	r0, #32
 800a9e8:	4770      	bx	lr

0800a9ea <__i2b>:
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	f7ff ff27 	bl	800a842 <_Balloc>
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	6144      	str	r4, [r0, #20]
 800a9f8:	6102      	str	r2, [r0, #16]
 800a9fa:	bd10      	pop	{r4, pc}

0800a9fc <__multiply>:
 800a9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa00:	4614      	mov	r4, r2
 800aa02:	690a      	ldr	r2, [r1, #16]
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	bfb8      	it	lt
 800aa0a:	460b      	movlt	r3, r1
 800aa0c:	4688      	mov	r8, r1
 800aa0e:	bfbc      	itt	lt
 800aa10:	46a0      	movlt	r8, r4
 800aa12:	461c      	movlt	r4, r3
 800aa14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aa1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa24:	eb07 0609 	add.w	r6, r7, r9
 800aa28:	42b3      	cmp	r3, r6
 800aa2a:	bfb8      	it	lt
 800aa2c:	3101      	addlt	r1, #1
 800aa2e:	f7ff ff08 	bl	800a842 <_Balloc>
 800aa32:	f100 0514 	add.w	r5, r0, #20
 800aa36:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4573      	cmp	r3, lr
 800aa40:	d316      	bcc.n	800aa70 <__multiply+0x74>
 800aa42:	f104 0214 	add.w	r2, r4, #20
 800aa46:	f108 0114 	add.w	r1, r8, #20
 800aa4a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aa4e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	9201      	str	r2, [sp, #4]
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d80c      	bhi.n	800aa76 <__multiply+0x7a>
 800aa5c:	2e00      	cmp	r6, #0
 800aa5e:	dd03      	ble.n	800aa68 <__multiply+0x6c>
 800aa60:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d05d      	beq.n	800ab24 <__multiply+0x128>
 800aa68:	6106      	str	r6, [r0, #16]
 800aa6a:	b003      	add	sp, #12
 800aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa70:	f843 2b04 	str.w	r2, [r3], #4
 800aa74:	e7e3      	b.n	800aa3e <__multiply+0x42>
 800aa76:	f8b2 b000 	ldrh.w	fp, [r2]
 800aa7a:	f1bb 0f00 	cmp.w	fp, #0
 800aa7e:	d023      	beq.n	800aac8 <__multiply+0xcc>
 800aa80:	4689      	mov	r9, r1
 800aa82:	46ac      	mov	ip, r5
 800aa84:	f04f 0800 	mov.w	r8, #0
 800aa88:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa8c:	f8dc a000 	ldr.w	sl, [ip]
 800aa90:	b2a3      	uxth	r3, r4
 800aa92:	fa1f fa8a 	uxth.w	sl, sl
 800aa96:	fb0b a303 	mla	r3, fp, r3, sl
 800aa9a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa9e:	f8dc 4000 	ldr.w	r4, [ip]
 800aaa2:	4443      	add	r3, r8
 800aaa4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aaa8:	fb0b 840a 	mla	r4, fp, sl, r8
 800aaac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aab0:	46e2      	mov	sl, ip
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aab8:	454f      	cmp	r7, r9
 800aaba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aabe:	f84a 3b04 	str.w	r3, [sl], #4
 800aac2:	d82b      	bhi.n	800ab1c <__multiply+0x120>
 800aac4:	f8cc 8004 	str.w	r8, [ip, #4]
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aace:	3204      	adds	r2, #4
 800aad0:	f1ba 0f00 	cmp.w	sl, #0
 800aad4:	d020      	beq.n	800ab18 <__multiply+0x11c>
 800aad6:	682b      	ldr	r3, [r5, #0]
 800aad8:	4689      	mov	r9, r1
 800aada:	46a8      	mov	r8, r5
 800aadc:	f04f 0b00 	mov.w	fp, #0
 800aae0:	f8b9 c000 	ldrh.w	ip, [r9]
 800aae4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aae8:	fb0a 440c 	mla	r4, sl, ip, r4
 800aaec:	445c      	add	r4, fp
 800aaee:	46c4      	mov	ip, r8
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aaf6:	f84c 3b04 	str.w	r3, [ip], #4
 800aafa:	f859 3b04 	ldr.w	r3, [r9], #4
 800aafe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ab02:	0c1b      	lsrs	r3, r3, #16
 800ab04:	fb0a b303 	mla	r3, sl, r3, fp
 800ab08:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ab0c:	454f      	cmp	r7, r9
 800ab0e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ab12:	d805      	bhi.n	800ab20 <__multiply+0x124>
 800ab14:	f8c8 3004 	str.w	r3, [r8, #4]
 800ab18:	3504      	adds	r5, #4
 800ab1a:	e79b      	b.n	800aa54 <__multiply+0x58>
 800ab1c:	46d4      	mov	ip, sl
 800ab1e:	e7b3      	b.n	800aa88 <__multiply+0x8c>
 800ab20:	46e0      	mov	r8, ip
 800ab22:	e7dd      	b.n	800aae0 <__multiply+0xe4>
 800ab24:	3e01      	subs	r6, #1
 800ab26:	e799      	b.n	800aa5c <__multiply+0x60>

0800ab28 <__pow5mult>:
 800ab28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	4615      	mov	r5, r2
 800ab2e:	f012 0203 	ands.w	r2, r2, #3
 800ab32:	4606      	mov	r6, r0
 800ab34:	460f      	mov	r7, r1
 800ab36:	d007      	beq.n	800ab48 <__pow5mult+0x20>
 800ab38:	3a01      	subs	r2, #1
 800ab3a:	4c21      	ldr	r4, [pc, #132]	; (800abc0 <__pow5mult+0x98>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab42:	f7ff fec9 	bl	800a8d8 <__multadd>
 800ab46:	4607      	mov	r7, r0
 800ab48:	10ad      	asrs	r5, r5, #2
 800ab4a:	d035      	beq.n	800abb8 <__pow5mult+0x90>
 800ab4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab4e:	b93c      	cbnz	r4, 800ab60 <__pow5mult+0x38>
 800ab50:	2010      	movs	r0, #16
 800ab52:	f7ff fe63 	bl	800a81c <malloc>
 800ab56:	6270      	str	r0, [r6, #36]	; 0x24
 800ab58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab5c:	6004      	str	r4, [r0, #0]
 800ab5e:	60c4      	str	r4, [r0, #12]
 800ab60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab68:	b94c      	cbnz	r4, 800ab7e <__pow5mult+0x56>
 800ab6a:	f240 2171 	movw	r1, #625	; 0x271
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7ff ff3b 	bl	800a9ea <__i2b>
 800ab74:	2300      	movs	r3, #0
 800ab76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	f04f 0800 	mov.w	r8, #0
 800ab82:	07eb      	lsls	r3, r5, #31
 800ab84:	d50a      	bpl.n	800ab9c <__pow5mult+0x74>
 800ab86:	4639      	mov	r1, r7
 800ab88:	4622      	mov	r2, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ff36 	bl	800a9fc <__multiply>
 800ab90:	4639      	mov	r1, r7
 800ab92:	4681      	mov	r9, r0
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff fe88 	bl	800a8aa <_Bfree>
 800ab9a:	464f      	mov	r7, r9
 800ab9c:	106d      	asrs	r5, r5, #1
 800ab9e:	d00b      	beq.n	800abb8 <__pow5mult+0x90>
 800aba0:	6820      	ldr	r0, [r4, #0]
 800aba2:	b938      	cbnz	r0, 800abb4 <__pow5mult+0x8c>
 800aba4:	4622      	mov	r2, r4
 800aba6:	4621      	mov	r1, r4
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7ff ff27 	bl	800a9fc <__multiply>
 800abae:	6020      	str	r0, [r4, #0]
 800abb0:	f8c0 8000 	str.w	r8, [r0]
 800abb4:	4604      	mov	r4, r0
 800abb6:	e7e4      	b.n	800ab82 <__pow5mult+0x5a>
 800abb8:	4638      	mov	r0, r7
 800abba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abbe:	bf00      	nop
 800abc0:	0800b4d0 	.word	0x0800b4d0

0800abc4 <__lshift>:
 800abc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	460c      	mov	r4, r1
 800abca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	6849      	ldr	r1, [r1, #4]
 800abd2:	eb0a 0903 	add.w	r9, sl, r3
 800abd6:	68a3      	ldr	r3, [r4, #8]
 800abd8:	4607      	mov	r7, r0
 800abda:	4616      	mov	r6, r2
 800abdc:	f109 0501 	add.w	r5, r9, #1
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	db32      	blt.n	800ac4a <__lshift+0x86>
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7ff fe2c 	bl	800a842 <_Balloc>
 800abea:	2300      	movs	r3, #0
 800abec:	4680      	mov	r8, r0
 800abee:	f100 0114 	add.w	r1, r0, #20
 800abf2:	461a      	mov	r2, r3
 800abf4:	4553      	cmp	r3, sl
 800abf6:	db2b      	blt.n	800ac50 <__lshift+0x8c>
 800abf8:	6920      	ldr	r0, [r4, #16]
 800abfa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abfe:	f104 0314 	add.w	r3, r4, #20
 800ac02:	f016 021f 	ands.w	r2, r6, #31
 800ac06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac0a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac0e:	d025      	beq.n	800ac5c <__lshift+0x98>
 800ac10:	f1c2 0e20 	rsb	lr, r2, #32
 800ac14:	2000      	movs	r0, #0
 800ac16:	681e      	ldr	r6, [r3, #0]
 800ac18:	468a      	mov	sl, r1
 800ac1a:	4096      	lsls	r6, r2
 800ac1c:	4330      	orrs	r0, r6
 800ac1e:	f84a 0b04 	str.w	r0, [sl], #4
 800ac22:	f853 0b04 	ldr.w	r0, [r3], #4
 800ac26:	459c      	cmp	ip, r3
 800ac28:	fa20 f00e 	lsr.w	r0, r0, lr
 800ac2c:	d814      	bhi.n	800ac58 <__lshift+0x94>
 800ac2e:	6048      	str	r0, [r1, #4]
 800ac30:	b108      	cbz	r0, 800ac36 <__lshift+0x72>
 800ac32:	f109 0502 	add.w	r5, r9, #2
 800ac36:	3d01      	subs	r5, #1
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ac3e:	4621      	mov	r1, r4
 800ac40:	f7ff fe33 	bl	800a8aa <_Bfree>
 800ac44:	4640      	mov	r0, r8
 800ac46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4a:	3101      	adds	r1, #1
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	e7c7      	b.n	800abe0 <__lshift+0x1c>
 800ac50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ac54:	3301      	adds	r3, #1
 800ac56:	e7cd      	b.n	800abf4 <__lshift+0x30>
 800ac58:	4651      	mov	r1, sl
 800ac5a:	e7dc      	b.n	800ac16 <__lshift+0x52>
 800ac5c:	3904      	subs	r1, #4
 800ac5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac62:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac66:	459c      	cmp	ip, r3
 800ac68:	d8f9      	bhi.n	800ac5e <__lshift+0x9a>
 800ac6a:	e7e4      	b.n	800ac36 <__lshift+0x72>

0800ac6c <__mcmp>:
 800ac6c:	6903      	ldr	r3, [r0, #16]
 800ac6e:	690a      	ldr	r2, [r1, #16]
 800ac70:	1a9b      	subs	r3, r3, r2
 800ac72:	b530      	push	{r4, r5, lr}
 800ac74:	d10c      	bne.n	800ac90 <__mcmp+0x24>
 800ac76:	0092      	lsls	r2, r2, #2
 800ac78:	3014      	adds	r0, #20
 800ac7a:	3114      	adds	r1, #20
 800ac7c:	1884      	adds	r4, r0, r2
 800ac7e:	4411      	add	r1, r2
 800ac80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac88:	4295      	cmp	r5, r2
 800ac8a:	d003      	beq.n	800ac94 <__mcmp+0x28>
 800ac8c:	d305      	bcc.n	800ac9a <__mcmp+0x2e>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4618      	mov	r0, r3
 800ac92:	bd30      	pop	{r4, r5, pc}
 800ac94:	42a0      	cmp	r0, r4
 800ac96:	d3f3      	bcc.n	800ac80 <__mcmp+0x14>
 800ac98:	e7fa      	b.n	800ac90 <__mcmp+0x24>
 800ac9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9e:	e7f7      	b.n	800ac90 <__mcmp+0x24>

0800aca0 <__mdiff>:
 800aca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca4:	460d      	mov	r5, r1
 800aca6:	4607      	mov	r7, r0
 800aca8:	4611      	mov	r1, r2
 800acaa:	4628      	mov	r0, r5
 800acac:	4614      	mov	r4, r2
 800acae:	f7ff ffdd 	bl	800ac6c <__mcmp>
 800acb2:	1e06      	subs	r6, r0, #0
 800acb4:	d108      	bne.n	800acc8 <__mdiff+0x28>
 800acb6:	4631      	mov	r1, r6
 800acb8:	4638      	mov	r0, r7
 800acba:	f7ff fdc2 	bl	800a842 <_Balloc>
 800acbe:	2301      	movs	r3, #1
 800acc0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800acc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc8:	bfa4      	itt	ge
 800acca:	4623      	movge	r3, r4
 800accc:	462c      	movge	r4, r5
 800acce:	4638      	mov	r0, r7
 800acd0:	6861      	ldr	r1, [r4, #4]
 800acd2:	bfa6      	itte	ge
 800acd4:	461d      	movge	r5, r3
 800acd6:	2600      	movge	r6, #0
 800acd8:	2601      	movlt	r6, #1
 800acda:	f7ff fdb2 	bl	800a842 <_Balloc>
 800acde:	692b      	ldr	r3, [r5, #16]
 800ace0:	60c6      	str	r6, [r0, #12]
 800ace2:	6926      	ldr	r6, [r4, #16]
 800ace4:	f105 0914 	add.w	r9, r5, #20
 800ace8:	f104 0214 	add.w	r2, r4, #20
 800acec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800acf0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800acf4:	f100 0514 	add.w	r5, r0, #20
 800acf8:	f04f 0e00 	mov.w	lr, #0
 800acfc:	f852 ab04 	ldr.w	sl, [r2], #4
 800ad00:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad04:	fa1e f18a 	uxtah	r1, lr, sl
 800ad08:	b2a3      	uxth	r3, r4
 800ad0a:	1ac9      	subs	r1, r1, r3
 800ad0c:	0c23      	lsrs	r3, r4, #16
 800ad0e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ad12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ad16:	b289      	uxth	r1, r1
 800ad18:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ad1c:	45c8      	cmp	r8, r9
 800ad1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ad22:	4694      	mov	ip, r2
 800ad24:	f845 3b04 	str.w	r3, [r5], #4
 800ad28:	d8e8      	bhi.n	800acfc <__mdiff+0x5c>
 800ad2a:	45bc      	cmp	ip, r7
 800ad2c:	d304      	bcc.n	800ad38 <__mdiff+0x98>
 800ad2e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad32:	b183      	cbz	r3, 800ad56 <__mdiff+0xb6>
 800ad34:	6106      	str	r6, [r0, #16]
 800ad36:	e7c5      	b.n	800acc4 <__mdiff+0x24>
 800ad38:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad3c:	fa1e f381 	uxtah	r3, lr, r1
 800ad40:	141a      	asrs	r2, r3, #16
 800ad42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad4c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ad50:	f845 3b04 	str.w	r3, [r5], #4
 800ad54:	e7e9      	b.n	800ad2a <__mdiff+0x8a>
 800ad56:	3e01      	subs	r6, #1
 800ad58:	e7e9      	b.n	800ad2e <__mdiff+0x8e>

0800ad5a <__d2b>:
 800ad5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad5e:	460e      	mov	r6, r1
 800ad60:	2101      	movs	r1, #1
 800ad62:	ec59 8b10 	vmov	r8, r9, d0
 800ad66:	4615      	mov	r5, r2
 800ad68:	f7ff fd6b 	bl	800a842 <_Balloc>
 800ad6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ad70:	4607      	mov	r7, r0
 800ad72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad76:	bb34      	cbnz	r4, 800adc6 <__d2b+0x6c>
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f1b8 0300 	subs.w	r3, r8, #0
 800ad7e:	d027      	beq.n	800add0 <__d2b+0x76>
 800ad80:	a802      	add	r0, sp, #8
 800ad82:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ad86:	f7ff fe01 	bl	800a98c <__lo0bits>
 800ad8a:	9900      	ldr	r1, [sp, #0]
 800ad8c:	b1f0      	cbz	r0, 800adcc <__d2b+0x72>
 800ad8e:	9a01      	ldr	r2, [sp, #4]
 800ad90:	f1c0 0320 	rsb	r3, r0, #32
 800ad94:	fa02 f303 	lsl.w	r3, r2, r3
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	40c2      	lsrs	r2, r0
 800ad9c:	617b      	str	r3, [r7, #20]
 800ad9e:	9201      	str	r2, [sp, #4]
 800ada0:	9b01      	ldr	r3, [sp, #4]
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bf14      	ite	ne
 800ada8:	2102      	movne	r1, #2
 800adaa:	2101      	moveq	r1, #1
 800adac:	6139      	str	r1, [r7, #16]
 800adae:	b1c4      	cbz	r4, 800ade2 <__d2b+0x88>
 800adb0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800adb4:	4404      	add	r4, r0
 800adb6:	6034      	str	r4, [r6, #0]
 800adb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adbc:	6028      	str	r0, [r5, #0]
 800adbe:	4638      	mov	r0, r7
 800adc0:	b003      	add	sp, #12
 800adc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adca:	e7d5      	b.n	800ad78 <__d2b+0x1e>
 800adcc:	6179      	str	r1, [r7, #20]
 800adce:	e7e7      	b.n	800ada0 <__d2b+0x46>
 800add0:	a801      	add	r0, sp, #4
 800add2:	f7ff fddb 	bl	800a98c <__lo0bits>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	617b      	str	r3, [r7, #20]
 800adda:	2101      	movs	r1, #1
 800addc:	6139      	str	r1, [r7, #16]
 800adde:	3020      	adds	r0, #32
 800ade0:	e7e5      	b.n	800adae <__d2b+0x54>
 800ade2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ade6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adea:	6030      	str	r0, [r6, #0]
 800adec:	6918      	ldr	r0, [r3, #16]
 800adee:	f7ff fdae 	bl	800a94e <__hi0bits>
 800adf2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800adf6:	e7e1      	b.n	800adbc <__d2b+0x62>

0800adf8 <_calloc_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	fb02 f401 	mul.w	r4, r2, r1
 800adfe:	4621      	mov	r1, r4
 800ae00:	f000 f856 	bl	800aeb0 <_malloc_r>
 800ae04:	4605      	mov	r5, r0
 800ae06:	b118      	cbz	r0, 800ae10 <_calloc_r+0x18>
 800ae08:	4622      	mov	r2, r4
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	f7fe fa30 	bl	8009270 <memset>
 800ae10:	4628      	mov	r0, r5
 800ae12:	bd38      	pop	{r3, r4, r5, pc}

0800ae14 <_free_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4605      	mov	r5, r0
 800ae18:	2900      	cmp	r1, #0
 800ae1a:	d045      	beq.n	800aea8 <_free_r+0x94>
 800ae1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae20:	1f0c      	subs	r4, r1, #4
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bfb8      	it	lt
 800ae26:	18e4      	addlt	r4, r4, r3
 800ae28:	f000 fa29 	bl	800b27e <__malloc_lock>
 800ae2c:	4a1f      	ldr	r2, [pc, #124]	; (800aeac <_free_r+0x98>)
 800ae2e:	6813      	ldr	r3, [r2, #0]
 800ae30:	4610      	mov	r0, r2
 800ae32:	b933      	cbnz	r3, 800ae42 <_free_r+0x2e>
 800ae34:	6063      	str	r3, [r4, #4]
 800ae36:	6014      	str	r4, [r2, #0]
 800ae38:	4628      	mov	r0, r5
 800ae3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae3e:	f000 ba1f 	b.w	800b280 <__malloc_unlock>
 800ae42:	42a3      	cmp	r3, r4
 800ae44:	d90c      	bls.n	800ae60 <_free_r+0x4c>
 800ae46:	6821      	ldr	r1, [r4, #0]
 800ae48:	1862      	adds	r2, r4, r1
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	bf04      	itt	eq
 800ae4e:	681a      	ldreq	r2, [r3, #0]
 800ae50:	685b      	ldreq	r3, [r3, #4]
 800ae52:	6063      	str	r3, [r4, #4]
 800ae54:	bf04      	itt	eq
 800ae56:	1852      	addeq	r2, r2, r1
 800ae58:	6022      	streq	r2, [r4, #0]
 800ae5a:	6004      	str	r4, [r0, #0]
 800ae5c:	e7ec      	b.n	800ae38 <_free_r+0x24>
 800ae5e:	4613      	mov	r3, r2
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	b10a      	cbz	r2, 800ae68 <_free_r+0x54>
 800ae64:	42a2      	cmp	r2, r4
 800ae66:	d9fa      	bls.n	800ae5e <_free_r+0x4a>
 800ae68:	6819      	ldr	r1, [r3, #0]
 800ae6a:	1858      	adds	r0, r3, r1
 800ae6c:	42a0      	cmp	r0, r4
 800ae6e:	d10b      	bne.n	800ae88 <_free_r+0x74>
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	4401      	add	r1, r0
 800ae74:	1858      	adds	r0, r3, r1
 800ae76:	4282      	cmp	r2, r0
 800ae78:	6019      	str	r1, [r3, #0]
 800ae7a:	d1dd      	bne.n	800ae38 <_free_r+0x24>
 800ae7c:	6810      	ldr	r0, [r2, #0]
 800ae7e:	6852      	ldr	r2, [r2, #4]
 800ae80:	605a      	str	r2, [r3, #4]
 800ae82:	4401      	add	r1, r0
 800ae84:	6019      	str	r1, [r3, #0]
 800ae86:	e7d7      	b.n	800ae38 <_free_r+0x24>
 800ae88:	d902      	bls.n	800ae90 <_free_r+0x7c>
 800ae8a:	230c      	movs	r3, #12
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	e7d3      	b.n	800ae38 <_free_r+0x24>
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	1821      	adds	r1, r4, r0
 800ae94:	428a      	cmp	r2, r1
 800ae96:	bf04      	itt	eq
 800ae98:	6811      	ldreq	r1, [r2, #0]
 800ae9a:	6852      	ldreq	r2, [r2, #4]
 800ae9c:	6062      	str	r2, [r4, #4]
 800ae9e:	bf04      	itt	eq
 800aea0:	1809      	addeq	r1, r1, r0
 800aea2:	6021      	streq	r1, [r4, #0]
 800aea4:	605c      	str	r4, [r3, #4]
 800aea6:	e7c7      	b.n	800ae38 <_free_r+0x24>
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000590 	.word	0x20000590

0800aeb0 <_malloc_r>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	1ccd      	adds	r5, r1, #3
 800aeb4:	f025 0503 	bic.w	r5, r5, #3
 800aeb8:	3508      	adds	r5, #8
 800aeba:	2d0c      	cmp	r5, #12
 800aebc:	bf38      	it	cc
 800aebe:	250c      	movcc	r5, #12
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	4606      	mov	r6, r0
 800aec4:	db01      	blt.n	800aeca <_malloc_r+0x1a>
 800aec6:	42a9      	cmp	r1, r5
 800aec8:	d903      	bls.n	800aed2 <_malloc_r+0x22>
 800aeca:	230c      	movs	r3, #12
 800aecc:	6033      	str	r3, [r6, #0]
 800aece:	2000      	movs	r0, #0
 800aed0:	bd70      	pop	{r4, r5, r6, pc}
 800aed2:	f000 f9d4 	bl	800b27e <__malloc_lock>
 800aed6:	4a21      	ldr	r2, [pc, #132]	; (800af5c <_malloc_r+0xac>)
 800aed8:	6814      	ldr	r4, [r2, #0]
 800aeda:	4621      	mov	r1, r4
 800aedc:	b991      	cbnz	r1, 800af04 <_malloc_r+0x54>
 800aede:	4c20      	ldr	r4, [pc, #128]	; (800af60 <_malloc_r+0xb0>)
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	b91b      	cbnz	r3, 800aeec <_malloc_r+0x3c>
 800aee4:	4630      	mov	r0, r6
 800aee6:	f000 f98f 	bl	800b208 <_sbrk_r>
 800aeea:	6020      	str	r0, [r4, #0]
 800aeec:	4629      	mov	r1, r5
 800aeee:	4630      	mov	r0, r6
 800aef0:	f000 f98a 	bl	800b208 <_sbrk_r>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d124      	bne.n	800af42 <_malloc_r+0x92>
 800aef8:	230c      	movs	r3, #12
 800aefa:	6033      	str	r3, [r6, #0]
 800aefc:	4630      	mov	r0, r6
 800aefe:	f000 f9bf 	bl	800b280 <__malloc_unlock>
 800af02:	e7e4      	b.n	800aece <_malloc_r+0x1e>
 800af04:	680b      	ldr	r3, [r1, #0]
 800af06:	1b5b      	subs	r3, r3, r5
 800af08:	d418      	bmi.n	800af3c <_malloc_r+0x8c>
 800af0a:	2b0b      	cmp	r3, #11
 800af0c:	d90f      	bls.n	800af2e <_malloc_r+0x7e>
 800af0e:	600b      	str	r3, [r1, #0]
 800af10:	50cd      	str	r5, [r1, r3]
 800af12:	18cc      	adds	r4, r1, r3
 800af14:	4630      	mov	r0, r6
 800af16:	f000 f9b3 	bl	800b280 <__malloc_unlock>
 800af1a:	f104 000b 	add.w	r0, r4, #11
 800af1e:	1d23      	adds	r3, r4, #4
 800af20:	f020 0007 	bic.w	r0, r0, #7
 800af24:	1ac3      	subs	r3, r0, r3
 800af26:	d0d3      	beq.n	800aed0 <_malloc_r+0x20>
 800af28:	425a      	negs	r2, r3
 800af2a:	50e2      	str	r2, [r4, r3]
 800af2c:	e7d0      	b.n	800aed0 <_malloc_r+0x20>
 800af2e:	428c      	cmp	r4, r1
 800af30:	684b      	ldr	r3, [r1, #4]
 800af32:	bf16      	itet	ne
 800af34:	6063      	strne	r3, [r4, #4]
 800af36:	6013      	streq	r3, [r2, #0]
 800af38:	460c      	movne	r4, r1
 800af3a:	e7eb      	b.n	800af14 <_malloc_r+0x64>
 800af3c:	460c      	mov	r4, r1
 800af3e:	6849      	ldr	r1, [r1, #4]
 800af40:	e7cc      	b.n	800aedc <_malloc_r+0x2c>
 800af42:	1cc4      	adds	r4, r0, #3
 800af44:	f024 0403 	bic.w	r4, r4, #3
 800af48:	42a0      	cmp	r0, r4
 800af4a:	d005      	beq.n	800af58 <_malloc_r+0xa8>
 800af4c:	1a21      	subs	r1, r4, r0
 800af4e:	4630      	mov	r0, r6
 800af50:	f000 f95a 	bl	800b208 <_sbrk_r>
 800af54:	3001      	adds	r0, #1
 800af56:	d0cf      	beq.n	800aef8 <_malloc_r+0x48>
 800af58:	6025      	str	r5, [r4, #0]
 800af5a:	e7db      	b.n	800af14 <_malloc_r+0x64>
 800af5c:	20000590 	.word	0x20000590
 800af60:	20000594 	.word	0x20000594

0800af64 <__ssputs_r>:
 800af64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af68:	688e      	ldr	r6, [r1, #8]
 800af6a:	429e      	cmp	r6, r3
 800af6c:	4682      	mov	sl, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	4690      	mov	r8, r2
 800af72:	4699      	mov	r9, r3
 800af74:	d837      	bhi.n	800afe6 <__ssputs_r+0x82>
 800af76:	898a      	ldrh	r2, [r1, #12]
 800af78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af7c:	d031      	beq.n	800afe2 <__ssputs_r+0x7e>
 800af7e:	6825      	ldr	r5, [r4, #0]
 800af80:	6909      	ldr	r1, [r1, #16]
 800af82:	1a6f      	subs	r7, r5, r1
 800af84:	6965      	ldr	r5, [r4, #20]
 800af86:	2302      	movs	r3, #2
 800af88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af8c:	fb95 f5f3 	sdiv	r5, r5, r3
 800af90:	f109 0301 	add.w	r3, r9, #1
 800af94:	443b      	add	r3, r7
 800af96:	429d      	cmp	r5, r3
 800af98:	bf38      	it	cc
 800af9a:	461d      	movcc	r5, r3
 800af9c:	0553      	lsls	r3, r2, #21
 800af9e:	d530      	bpl.n	800b002 <__ssputs_r+0x9e>
 800afa0:	4629      	mov	r1, r5
 800afa2:	f7ff ff85 	bl	800aeb0 <_malloc_r>
 800afa6:	4606      	mov	r6, r0
 800afa8:	b950      	cbnz	r0, 800afc0 <__ssputs_r+0x5c>
 800afaa:	230c      	movs	r3, #12
 800afac:	f8ca 3000 	str.w	r3, [sl]
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc0:	463a      	mov	r2, r7
 800afc2:	6921      	ldr	r1, [r4, #16]
 800afc4:	f7ff fc32 	bl	800a82c <memcpy>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	6126      	str	r6, [r4, #16]
 800afd6:	6165      	str	r5, [r4, #20]
 800afd8:	443e      	add	r6, r7
 800afda:	1bed      	subs	r5, r5, r7
 800afdc:	6026      	str	r6, [r4, #0]
 800afde:	60a5      	str	r5, [r4, #8]
 800afe0:	464e      	mov	r6, r9
 800afe2:	454e      	cmp	r6, r9
 800afe4:	d900      	bls.n	800afe8 <__ssputs_r+0x84>
 800afe6:	464e      	mov	r6, r9
 800afe8:	4632      	mov	r2, r6
 800afea:	4641      	mov	r1, r8
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	f000 f92d 	bl	800b24c <memmove>
 800aff2:	68a3      	ldr	r3, [r4, #8]
 800aff4:	1b9b      	subs	r3, r3, r6
 800aff6:	60a3      	str	r3, [r4, #8]
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	441e      	add	r6, r3
 800affc:	6026      	str	r6, [r4, #0]
 800affe:	2000      	movs	r0, #0
 800b000:	e7dc      	b.n	800afbc <__ssputs_r+0x58>
 800b002:	462a      	mov	r2, r5
 800b004:	f000 f93d 	bl	800b282 <_realloc_r>
 800b008:	4606      	mov	r6, r0
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d1e2      	bne.n	800afd4 <__ssputs_r+0x70>
 800b00e:	6921      	ldr	r1, [r4, #16]
 800b010:	4650      	mov	r0, sl
 800b012:	f7ff feff 	bl	800ae14 <_free_r>
 800b016:	e7c8      	b.n	800afaa <__ssputs_r+0x46>

0800b018 <_svfiprintf_r>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	461d      	mov	r5, r3
 800b01e:	898b      	ldrh	r3, [r1, #12]
 800b020:	061f      	lsls	r7, r3, #24
 800b022:	b09d      	sub	sp, #116	; 0x74
 800b024:	4680      	mov	r8, r0
 800b026:	460c      	mov	r4, r1
 800b028:	4616      	mov	r6, r2
 800b02a:	d50f      	bpl.n	800b04c <_svfiprintf_r+0x34>
 800b02c:	690b      	ldr	r3, [r1, #16]
 800b02e:	b96b      	cbnz	r3, 800b04c <_svfiprintf_r+0x34>
 800b030:	2140      	movs	r1, #64	; 0x40
 800b032:	f7ff ff3d 	bl	800aeb0 <_malloc_r>
 800b036:	6020      	str	r0, [r4, #0]
 800b038:	6120      	str	r0, [r4, #16]
 800b03a:	b928      	cbnz	r0, 800b048 <_svfiprintf_r+0x30>
 800b03c:	230c      	movs	r3, #12
 800b03e:	f8c8 3000 	str.w	r3, [r8]
 800b042:	f04f 30ff 	mov.w	r0, #4294967295
 800b046:	e0c8      	b.n	800b1da <_svfiprintf_r+0x1c2>
 800b048:	2340      	movs	r3, #64	; 0x40
 800b04a:	6163      	str	r3, [r4, #20]
 800b04c:	2300      	movs	r3, #0
 800b04e:	9309      	str	r3, [sp, #36]	; 0x24
 800b050:	2320      	movs	r3, #32
 800b052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b056:	2330      	movs	r3, #48	; 0x30
 800b058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b05c:	9503      	str	r5, [sp, #12]
 800b05e:	f04f 0b01 	mov.w	fp, #1
 800b062:	4637      	mov	r7, r6
 800b064:	463d      	mov	r5, r7
 800b066:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b06a:	b10b      	cbz	r3, 800b070 <_svfiprintf_r+0x58>
 800b06c:	2b25      	cmp	r3, #37	; 0x25
 800b06e:	d13e      	bne.n	800b0ee <_svfiprintf_r+0xd6>
 800b070:	ebb7 0a06 	subs.w	sl, r7, r6
 800b074:	d00b      	beq.n	800b08e <_svfiprintf_r+0x76>
 800b076:	4653      	mov	r3, sl
 800b078:	4632      	mov	r2, r6
 800b07a:	4621      	mov	r1, r4
 800b07c:	4640      	mov	r0, r8
 800b07e:	f7ff ff71 	bl	800af64 <__ssputs_r>
 800b082:	3001      	adds	r0, #1
 800b084:	f000 80a4 	beq.w	800b1d0 <_svfiprintf_r+0x1b8>
 800b088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08a:	4453      	add	r3, sl
 800b08c:	9309      	str	r3, [sp, #36]	; 0x24
 800b08e:	783b      	ldrb	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 809d 	beq.w	800b1d0 <_svfiprintf_r+0x1b8>
 800b096:	2300      	movs	r3, #0
 800b098:	f04f 32ff 	mov.w	r2, #4294967295
 800b09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0aa:	462f      	mov	r7, r5
 800b0ac:	2205      	movs	r2, #5
 800b0ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b0b2:	4850      	ldr	r0, [pc, #320]	; (800b1f4 <_svfiprintf_r+0x1dc>)
 800b0b4:	f7f5 f894 	bl	80001e0 <memchr>
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	b9d0      	cbnz	r0, 800b0f2 <_svfiprintf_r+0xda>
 800b0bc:	06d9      	lsls	r1, r3, #27
 800b0be:	bf44      	itt	mi
 800b0c0:	2220      	movmi	r2, #32
 800b0c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0c6:	071a      	lsls	r2, r3, #28
 800b0c8:	bf44      	itt	mi
 800b0ca:	222b      	movmi	r2, #43	; 0x2b
 800b0cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0d0:	782a      	ldrb	r2, [r5, #0]
 800b0d2:	2a2a      	cmp	r2, #42	; 0x2a
 800b0d4:	d015      	beq.n	800b102 <_svfiprintf_r+0xea>
 800b0d6:	9a07      	ldr	r2, [sp, #28]
 800b0d8:	462f      	mov	r7, r5
 800b0da:	2000      	movs	r0, #0
 800b0dc:	250a      	movs	r5, #10
 800b0de:	4639      	mov	r1, r7
 800b0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e4:	3b30      	subs	r3, #48	; 0x30
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d94d      	bls.n	800b186 <_svfiprintf_r+0x16e>
 800b0ea:	b1b8      	cbz	r0, 800b11c <_svfiprintf_r+0x104>
 800b0ec:	e00f      	b.n	800b10e <_svfiprintf_r+0xf6>
 800b0ee:	462f      	mov	r7, r5
 800b0f0:	e7b8      	b.n	800b064 <_svfiprintf_r+0x4c>
 800b0f2:	4a40      	ldr	r2, [pc, #256]	; (800b1f4 <_svfiprintf_r+0x1dc>)
 800b0f4:	1a80      	subs	r0, r0, r2
 800b0f6:	fa0b f000 	lsl.w	r0, fp, r0
 800b0fa:	4318      	orrs	r0, r3
 800b0fc:	9004      	str	r0, [sp, #16]
 800b0fe:	463d      	mov	r5, r7
 800b100:	e7d3      	b.n	800b0aa <_svfiprintf_r+0x92>
 800b102:	9a03      	ldr	r2, [sp, #12]
 800b104:	1d11      	adds	r1, r2, #4
 800b106:	6812      	ldr	r2, [r2, #0]
 800b108:	9103      	str	r1, [sp, #12]
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	db01      	blt.n	800b112 <_svfiprintf_r+0xfa>
 800b10e:	9207      	str	r2, [sp, #28]
 800b110:	e004      	b.n	800b11c <_svfiprintf_r+0x104>
 800b112:	4252      	negs	r2, r2
 800b114:	f043 0302 	orr.w	r3, r3, #2
 800b118:	9207      	str	r2, [sp, #28]
 800b11a:	9304      	str	r3, [sp, #16]
 800b11c:	783b      	ldrb	r3, [r7, #0]
 800b11e:	2b2e      	cmp	r3, #46	; 0x2e
 800b120:	d10c      	bne.n	800b13c <_svfiprintf_r+0x124>
 800b122:	787b      	ldrb	r3, [r7, #1]
 800b124:	2b2a      	cmp	r3, #42	; 0x2a
 800b126:	d133      	bne.n	800b190 <_svfiprintf_r+0x178>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	1d1a      	adds	r2, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9203      	str	r2, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfb8      	it	lt
 800b134:	f04f 33ff 	movlt.w	r3, #4294967295
 800b138:	3702      	adds	r7, #2
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	4d2e      	ldr	r5, [pc, #184]	; (800b1f8 <_svfiprintf_r+0x1e0>)
 800b13e:	7839      	ldrb	r1, [r7, #0]
 800b140:	2203      	movs	r2, #3
 800b142:	4628      	mov	r0, r5
 800b144:	f7f5 f84c 	bl	80001e0 <memchr>
 800b148:	b138      	cbz	r0, 800b15a <_svfiprintf_r+0x142>
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	1b40      	subs	r0, r0, r5
 800b14e:	fa03 f000 	lsl.w	r0, r3, r0
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	4303      	orrs	r3, r0
 800b156:	3701      	adds	r7, #1
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	7839      	ldrb	r1, [r7, #0]
 800b15c:	4827      	ldr	r0, [pc, #156]	; (800b1fc <_svfiprintf_r+0x1e4>)
 800b15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b162:	2206      	movs	r2, #6
 800b164:	1c7e      	adds	r6, r7, #1
 800b166:	f7f5 f83b 	bl	80001e0 <memchr>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d038      	beq.n	800b1e0 <_svfiprintf_r+0x1c8>
 800b16e:	4b24      	ldr	r3, [pc, #144]	; (800b200 <_svfiprintf_r+0x1e8>)
 800b170:	bb13      	cbnz	r3, 800b1b8 <_svfiprintf_r+0x1a0>
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	3307      	adds	r3, #7
 800b176:	f023 0307 	bic.w	r3, r3, #7
 800b17a:	3308      	adds	r3, #8
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b180:	444b      	add	r3, r9
 800b182:	9309      	str	r3, [sp, #36]	; 0x24
 800b184:	e76d      	b.n	800b062 <_svfiprintf_r+0x4a>
 800b186:	fb05 3202 	mla	r2, r5, r2, r3
 800b18a:	2001      	movs	r0, #1
 800b18c:	460f      	mov	r7, r1
 800b18e:	e7a6      	b.n	800b0de <_svfiprintf_r+0xc6>
 800b190:	2300      	movs	r3, #0
 800b192:	3701      	adds	r7, #1
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	4619      	mov	r1, r3
 800b198:	250a      	movs	r5, #10
 800b19a:	4638      	mov	r0, r7
 800b19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a0:	3a30      	subs	r2, #48	; 0x30
 800b1a2:	2a09      	cmp	r2, #9
 800b1a4:	d903      	bls.n	800b1ae <_svfiprintf_r+0x196>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0c8      	beq.n	800b13c <_svfiprintf_r+0x124>
 800b1aa:	9105      	str	r1, [sp, #20]
 800b1ac:	e7c6      	b.n	800b13c <_svfiprintf_r+0x124>
 800b1ae:	fb05 2101 	mla	r1, r5, r1, r2
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	e7f0      	b.n	800b19a <_svfiprintf_r+0x182>
 800b1b8:	ab03      	add	r3, sp, #12
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4b11      	ldr	r3, [pc, #68]	; (800b204 <_svfiprintf_r+0x1ec>)
 800b1c0:	a904      	add	r1, sp, #16
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f7fe f8f0 	bl	80093a8 <_printf_float>
 800b1c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1cc:	4681      	mov	r9, r0
 800b1ce:	d1d6      	bne.n	800b17e <_svfiprintf_r+0x166>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	065b      	lsls	r3, r3, #25
 800b1d4:	f53f af35 	bmi.w	800b042 <_svfiprintf_r+0x2a>
 800b1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1da:	b01d      	add	sp, #116	; 0x74
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e0:	ab03      	add	r3, sp, #12
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	4b07      	ldr	r3, [pc, #28]	; (800b204 <_svfiprintf_r+0x1ec>)
 800b1e8:	a904      	add	r1, sp, #16
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	f7fe fb92 	bl	8009914 <_printf_i>
 800b1f0:	e7ea      	b.n	800b1c8 <_svfiprintf_r+0x1b0>
 800b1f2:	bf00      	nop
 800b1f4:	0800b4dc 	.word	0x0800b4dc
 800b1f8:	0800b4e2 	.word	0x0800b4e2
 800b1fc:	0800b4e6 	.word	0x0800b4e6
 800b200:	080093a9 	.word	0x080093a9
 800b204:	0800af65 	.word	0x0800af65

0800b208 <_sbrk_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4c06      	ldr	r4, [pc, #24]	; (800b224 <_sbrk_r+0x1c>)
 800b20c:	2300      	movs	r3, #0
 800b20e:	4605      	mov	r5, r0
 800b210:	4608      	mov	r0, r1
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	f7f5 fffa 	bl	800120c <_sbrk>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	d102      	bne.n	800b222 <_sbrk_r+0x1a>
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	b103      	cbz	r3, 800b222 <_sbrk_r+0x1a>
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	200015cc 	.word	0x200015cc

0800b228 <__ascii_mbtowc>:
 800b228:	b082      	sub	sp, #8
 800b22a:	b901      	cbnz	r1, 800b22e <__ascii_mbtowc+0x6>
 800b22c:	a901      	add	r1, sp, #4
 800b22e:	b142      	cbz	r2, 800b242 <__ascii_mbtowc+0x1a>
 800b230:	b14b      	cbz	r3, 800b246 <__ascii_mbtowc+0x1e>
 800b232:	7813      	ldrb	r3, [r2, #0]
 800b234:	600b      	str	r3, [r1, #0]
 800b236:	7812      	ldrb	r2, [r2, #0]
 800b238:	1c10      	adds	r0, r2, #0
 800b23a:	bf18      	it	ne
 800b23c:	2001      	movne	r0, #1
 800b23e:	b002      	add	sp, #8
 800b240:	4770      	bx	lr
 800b242:	4610      	mov	r0, r2
 800b244:	e7fb      	b.n	800b23e <__ascii_mbtowc+0x16>
 800b246:	f06f 0001 	mvn.w	r0, #1
 800b24a:	e7f8      	b.n	800b23e <__ascii_mbtowc+0x16>

0800b24c <memmove>:
 800b24c:	4288      	cmp	r0, r1
 800b24e:	b510      	push	{r4, lr}
 800b250:	eb01 0302 	add.w	r3, r1, r2
 800b254:	d807      	bhi.n	800b266 <memmove+0x1a>
 800b256:	1e42      	subs	r2, r0, #1
 800b258:	4299      	cmp	r1, r3
 800b25a:	d00a      	beq.n	800b272 <memmove+0x26>
 800b25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b260:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b264:	e7f8      	b.n	800b258 <memmove+0xc>
 800b266:	4283      	cmp	r3, r0
 800b268:	d9f5      	bls.n	800b256 <memmove+0xa>
 800b26a:	1881      	adds	r1, r0, r2
 800b26c:	1ad2      	subs	r2, r2, r3
 800b26e:	42d3      	cmn	r3, r2
 800b270:	d100      	bne.n	800b274 <memmove+0x28>
 800b272:	bd10      	pop	{r4, pc}
 800b274:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b278:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b27c:	e7f7      	b.n	800b26e <memmove+0x22>

0800b27e <__malloc_lock>:
 800b27e:	4770      	bx	lr

0800b280 <__malloc_unlock>:
 800b280:	4770      	bx	lr

0800b282 <_realloc_r>:
 800b282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b284:	4607      	mov	r7, r0
 800b286:	4614      	mov	r4, r2
 800b288:	460e      	mov	r6, r1
 800b28a:	b921      	cbnz	r1, 800b296 <_realloc_r+0x14>
 800b28c:	4611      	mov	r1, r2
 800b28e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b292:	f7ff be0d 	b.w	800aeb0 <_malloc_r>
 800b296:	b922      	cbnz	r2, 800b2a2 <_realloc_r+0x20>
 800b298:	f7ff fdbc 	bl	800ae14 <_free_r>
 800b29c:	4625      	mov	r5, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a2:	f000 f821 	bl	800b2e8 <_malloc_usable_size_r>
 800b2a6:	42a0      	cmp	r0, r4
 800b2a8:	d20f      	bcs.n	800b2ca <_realloc_r+0x48>
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	f7ff fdff 	bl	800aeb0 <_malloc_r>
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d0f2      	beq.n	800b29e <_realloc_r+0x1c>
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	f7ff fab6 	bl	800a82c <memcpy>
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7ff fda6 	bl	800ae14 <_free_r>
 800b2c8:	e7e9      	b.n	800b29e <_realloc_r+0x1c>
 800b2ca:	4635      	mov	r5, r6
 800b2cc:	e7e7      	b.n	800b29e <_realloc_r+0x1c>

0800b2ce <__ascii_wctomb>:
 800b2ce:	b149      	cbz	r1, 800b2e4 <__ascii_wctomb+0x16>
 800b2d0:	2aff      	cmp	r2, #255	; 0xff
 800b2d2:	bf85      	ittet	hi
 800b2d4:	238a      	movhi	r3, #138	; 0x8a
 800b2d6:	6003      	strhi	r3, [r0, #0]
 800b2d8:	700a      	strbls	r2, [r1, #0]
 800b2da:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2de:	bf98      	it	ls
 800b2e0:	2001      	movls	r0, #1
 800b2e2:	4770      	bx	lr
 800b2e4:	4608      	mov	r0, r1
 800b2e6:	4770      	bx	lr

0800b2e8 <_malloc_usable_size_r>:
 800b2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ec:	1f18      	subs	r0, r3, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bfbc      	itt	lt
 800b2f2:	580b      	ldrlt	r3, [r1, r0]
 800b2f4:	18c0      	addlt	r0, r0, r3
 800b2f6:	4770      	bx	lr

0800b2f8 <_init>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr

0800b304 <_fini>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr
